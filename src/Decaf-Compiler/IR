; ModuleID = 'decaf Compiler'

@0 = private unnamed_addr constant [6 x i8] c"\22%d \22\00"

define i32 @fib(i32 %n) {
entry:
  %n1 = alloca i32
  store i32 %n, i32* %n1
  %0 = load i32, i32* %n1
  %gt = icmp sgt i32 %0, 1
  br i1 %gt, label %if, label %else

if:                                               ; preds = %entry
  %1 = load i32, i32* %n1
  %sub = sub i32 %1, 2
  %2 = call i32 @fib(i32 %sub)
  %3 = load i32, i32* %n1
  %sub2 = sub i32 %3, 1
  %4 = call i32 @fib(i32 %sub2)
  %add = add i32 %2, %4
  ret i32 %add
  br label %ifcont

else:                                             ; preds = %entry
  br label %ifcont

ifcont:                                           ; preds = %else, %if
  ret i32 1
}

define i32 @main() {
entry:
  %i1 = alloca i32
  %i = alloca i32
  %n = alloca i32
  store i32 0, i32* %n
  store i32 0, i32* %i
  %0 = load i32, i32* %n
  store i32 6, i32* %n
  store i32 1, i32* %i1
  br label %loop

loop:                                             ; preds = %loop, %entry
  %i2 = phi i32 [ 1, %entry ], [ %NextVal, %loop ]
  %1 = load i32, i32* %n
  %2 = load i32, i32* %i1
  %3 = call i32 @fib(i32 %2)
  %4 = call i32 @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @0, i32 0, i32 0), i32 %3)
  %i3 = load i32, i32* %i1
  %NextVal = add i32 %i3, 1
  store i32 %NextVal, i32* %i1
  %loopcondition = icmp slt i32 %NextVal, %1
  br i1 %loopcondition, label %loop, label %afterloop

afterloop:                                        ; preds = %loop
  ret i32 0
}

declare i32 @printf(i8*, i32)
