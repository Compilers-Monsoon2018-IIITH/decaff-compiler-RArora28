; ModuleID = 'decaf Compiler'

@arr = global [10000 x i32] zeroinitializer
@n = global i32 0
@mx = global i32 0
@mn = global i32 0
@0 = private unnamed_addr constant [6 x i8] c"\22%d \22\00"
@1 = private unnamed_addr constant [5 x i8] c"\22%d\22\00"

define void @initialize(i32 %x) {
entry:
  %i = alloca i32
  %x1 = alloca i32
  store i32 %x, i32* %x1
  %0 = load i32, i32* %x1
  %1 = load i32, i32* @n
  store i32 %0, i32* @n
  store i32 0, i32* %i
  br label %loop

loop:                                             ; preds = %loop, %entry
  %i2 = phi i32 [ 0, %entry ], [ %NextVal, %loop ]
  %2 = load i32, i32* @n
  %3 = load i32, i32* %i
  %add = add i32 %3, 9784
  %4 = load i32, i32* %i
  %arr_Index = getelementptr [10000 x i32], [10000 x i32]* @arr, i32 0, i32 %4
  %5 = load i32, i32* %arr_Index
  store i32 %add, i32* %arr_Index
  %i3 = load i32, i32* %i
  %NextVal = add i32 %i3, 1
  store i32 %NextVal, i32* %i
  %loopcondition = icmp slt i32 %NextVal, %2
  br i1 %loopcondition, label %loop, label %afterloop

afterloop:                                        ; preds = %loop
  ret void
}

define void @calcMaxMin(i32 %x) {
entry:
  %i2 = alloca i32
  %i = alloca i32
  %x1 = alloca i32
  store i32 %x, i32* %x1
  store i32 0, i32* %i
  %0 = load i32, i32* @mn
  store i32 2147483, i32* @mn
  %1 = load i32, i32* @mx
  store i32 -2147483, i32* @mx
  store i32 0, i32* %i2
  br label %loop

loop:                                             ; preds = %ifcont9, %entry
  %i3 = phi i32 [ 0, %entry ], [ %NextVal, %ifcont9 ]
  %2 = load i32, i32* @n
  %3 = load i32, i32* %i2
  %arr_Index = getelementptr [10000 x i32], [10000 x i32]* @arr, i32 0, i32 %3
  %4 = load i32, i32* %arr_Index
  %5 = load i32, i32* @mx
  %gt = icmp sgt i32 %4, %5
  br i1 %gt, label %if, label %else

afterloop:                                        ; preds = %ifcont9
  ret void

if:                                               ; preds = %loop
  %6 = load i32, i32* %i2
  %arr_Index4 = getelementptr [10000 x i32], [10000 x i32]* @arr, i32 0, i32 %6
  %7 = load i32, i32* %arr_Index4
  %8 = load i32, i32* @mx
  store i32 %7, i32* @mx
  br label %ifcont

else:                                             ; preds = %loop
  br label %ifcont

ifcont:                                           ; preds = %else, %if
  %9 = load i32, i32* %i2
  %arr_Index5 = getelementptr [10000 x i32], [10000 x i32]* @arr, i32 0, i32 %9
  %10 = load i32, i32* %arr_Index5
  %11 = load i32, i32* @mn
  %lt = icmp slt i32 %10, %11
  br i1 %lt, label %if6, label %else8

if6:                                              ; preds = %ifcont
  %12 = load i32, i32* %i2
  %arr_Index7 = getelementptr [10000 x i32], [10000 x i32]* @arr, i32 0, i32 %12
  %13 = load i32, i32* %arr_Index7
  %14 = load i32, i32* @mn
  store i32 %13, i32* @mn
  br label %ifcont9

else8:                                            ; preds = %ifcont
  br label %ifcont9

ifcont9:                                          ; preds = %else8, %if6
  %i10 = load i32, i32* %i2
  %NextVal = add i32 %i10, 1
  store i32 %NextVal, i32* %i2
  %loopcondition = icmp slt i32 %NextVal, %2
  br i1 %loopcondition, label %loop, label %afterloop
}

define void @printMaxMin(i32 %x) {
entry:
  %x1 = alloca i32
  store i32 %x, i32* %x1
  %0 = load i32, i32* @mx
  %1 = call i32 @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @0, i32 0, i32 0), i32 %0)
  %2 = load i32, i32* @mn
  %3 = call i32 @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i32 0, i32 0), i32 %2)
  ret void
}

declare i32 @printf(i8*, i32)

define void @main() {
entry:
  %x = alloca i32
  store i32 0, i32* %x
  %0 = load i32, i32* %x
  store i32 30, i32* %x
  %1 = load i32, i32* %x
  call void @initialize(i32 %1)
  %2 = load i32, i32* %x
  call void @calcMaxMin(i32 %2)
  %3 = load i32, i32* %x
  call void @printMaxMin(i32 %3)
  ret void
}
