Terminals which are not used

   ABSOLUTE


State 38 conflicts: 1 reduce/reduce


Grammar

    0 $accept: program_declaration $end

    1 program_declaration: CLASS PROGRAM CURLY_OPEN field_declarations method_declarations CURLY_CLOSE

    2 var_type: INT
    3         | BOOLEAN

    4 field_declarations: /* empty */
    5                   | field_declarations field_declaration SEMI_COLON

    6 field_declaration: var_type field_names

    7 field_names: field_name
    8            | field_names COMMA field_name

    9 field_name: ID
   10           | ID SQUARE_OPEN int_literal SQUARE_CLOSE

   11 method_declarations: method_declaration method_declarations
   12                    | /* empty */

   13 method_declaration: VOID ID OPEN parameter_declarations CLOSE code_block
   14                   | var_type ID OPEN parameter_declarations CLOSE code_block
   15                   | VOID ID OPEN CLOSE code_block
   16                   | var_type ID OPEN CLOSE code_block

   17 parameter_declarations: parameter_declaration
   18                       | parameter_declarations COMMA parameter_declaration

   19 parameter_declaration: var_type ID

   20 code_block: CURLY_OPEN block CURLY_CLOSE

   21 block: /* empty */
   22      | var_declarations statements

   23 var_declarations: /* empty */
   24                 | var_declarations var_declaration SEMI_COLON

   25 var_declaration: var_type var_names

   26 var_names: ID
   27          | var_names COMMA ID

   28 statements: /* empty */
   29           | statements statement

   30 statement: assign_statement
   31          | method_call_statement
   32          | if_statement
   33          | for_statement
   34          | return_statement
   35          | terminal_statement
   36          | code_block

   37 assign_statement: location assign_op expr SEMI_COLON

   38 location: ID
   39         | ID SQUARE_OPEN expr SQUARE_CLOSE

   40 if_statement: IF OPEN expr CLOSE code_block else_statement

   41 else_statement: /* empty */
   42               | ELSE code_block

   43 for_statement: FOR ID EQUAL expr COMMA expr code_block

   44 return_statement: RETURN expr SEMI_COLON
   45                 | RETURN SEMI_COLON

   46 terminal_statement: BREAK SEMI_COLON
   47                   | CONTINUE SEMI_COLON

   48 method_call_statement: method_call SEMI_COLON
   49                      | callout_call SEMI_COLON

   50 method_call: ID OPEN method_call_args CLOSE
   51            | ID OPEN CLOSE

   52 method_call_args: expr
   53                 | method_call_args COMMA expr

   54 callout_call: CALLOUT OPEN string_literal CLOSE
   55             | CALLOUT OPEN string_literal COMMA non_empty_callout_args CLOSE

   56 non_empty_callout_args: callout_arg
   57                       | non_empty_callout_args COMMA callout_arg

   58 callout_arg: expr
   59            | string_literal

   60 expr: location
   61     | method_call_statement
   62     | char_literal
   63     | int_literal
   64     | bool_literal
   65     | binary_expr
   66     | unary_expr
   67     | enclosed_expr

   68 binary_expr: expr ADD expr
   69            | expr SUBTRACT expr
   70            | expr MULTIPLY expr
   71            | expr DIVIDE expr
   72            | expr MODULO expr
   73            | expr GREATER expr
   74            | expr LESS expr
   75            | expr GREATER_EQUAL expr
   76            | expr LESS_EQUAL expr
   77            | expr EQUALITY expr
   78            | expr NOT_EQUAL expr
   79            | expr CONDITIONAL_AND expr
   80            | expr CONDITIONAL_OR expr

   81 enclosed_expr: OPEN expr CLOSE

   82 unary_expr: SUBTRACT expr
   83           | NOT expr

   84 assign_op: EQUAL
   85          | PLUS_EQUAL
   86          | MINUS_EQUAL

   87 char_literal: CHAR_LITERAL

   88 int_literal: NUM
   89            | HEX_LITERAL

   90 bool_literal: TRUE
   91             | FALSE

   92 string_literal: STRING


Terminals, with rules where they appear

$end (0) 0
error (256)
ADD (258) 68
SUBTRACT (259) 69 82
MULTIPLY (260) 70
DIVIDE (261) 71
MODULO (262) 72
EQUAL (263) 43 84
PLUS_EQUAL (264) 85
MINUS_EQUAL (265) 86
EQUALITY (266) 77
NOT_EQUAL (267) 78
GREATER_EQUAL (268) 75
LESS_EQUAL (269) 76
GREATER (270) 73
LESS (271) 74
NOT (272) 83
CONDITIONAL_AND (273) 79
CONDITIONAL_OR (274) 80
PROGRAM (275) 1
CLASS (276) 1
CALLOUT (277) 54 55
VOID (278) 13 15
INT (279) 2
BOOLEAN (280) 3
TRUE (281) 90
FALSE (282) 91
BREAK (283) 46
CONTINUE (284) 47
RETURN (285) 44 45
FOR (286) 43
IF (287) 40
ELSE (288) 42
NUM (289) 88
HEX_LITERAL (290) 89
CHAR_LITERAL (291) 87
STRING (292) 92
ID (293) 9 10 13 14 15 16 19 26 27 38 39 43 50 51
ABSOLUTE (294)
CURLY_OPEN (295) 1 20
CURLY_CLOSE (296) 1 20
SQUARE_OPEN (297) 10 39
SQUARE_CLOSE (298) 10 39
OPEN (299) 13 14 15 16 40 50 51 54 55 81
CLOSE (300) 13 14 15 16 40 50 51 54 55 81
SEMI_COLON (301) 5 24 37 44 45 46 47 48 49
COMMA (302) 8 18 27 43 53 55 57


Nonterminals, with rules where they appear

$accept (48)
    on left: 0
program_declaration (49)
    on left: 1, on right: 0
var_type (50)
    on left: 2 3, on right: 6 14 16 19 25
field_declarations (51)
    on left: 4 5, on right: 1 5
field_declaration (52)
    on left: 6, on right: 5
field_names (53)
    on left: 7 8, on right: 6 8
field_name (54)
    on left: 9 10, on right: 7 8
method_declarations (55)
    on left: 11 12, on right: 1 11
method_declaration (56)
    on left: 13 14 15 16, on right: 11
parameter_declarations (57)
    on left: 17 18, on right: 13 14 18
parameter_declaration (58)
    on left: 19, on right: 17 18
code_block (59)
    on left: 20, on right: 13 14 15 16 36 40 42 43
block (60)
    on left: 21 22, on right: 20
var_declarations (61)
    on left: 23 24, on right: 22 24
var_declaration (62)
    on left: 25, on right: 24
var_names (63)
    on left: 26 27, on right: 25 27
statements (64)
    on left: 28 29, on right: 22 29
statement (65)
    on left: 30 31 32 33 34 35 36, on right: 29
assign_statement (66)
    on left: 37, on right: 30
location (67)
    on left: 38 39, on right: 37 60
if_statement (68)
    on left: 40, on right: 32
else_statement (69)
    on left: 41 42, on right: 40
for_statement (70)
    on left: 43, on right: 33
return_statement (71)
    on left: 44 45, on right: 34
terminal_statement (72)
    on left: 46 47, on right: 35
method_call_statement (73)
    on left: 48 49, on right: 31 61
method_call (74)
    on left: 50 51, on right: 48
method_call_args (75)
    on left: 52 53, on right: 50 53
callout_call (76)
    on left: 54 55, on right: 49
non_empty_callout_args (77)
    on left: 56 57, on right: 55 57
callout_arg (78)
    on left: 58 59, on right: 56 57
expr (79)
    on left: 60 61 62 63 64 65 66 67, on right: 37 39 40 43 44 52 53
    58 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83
binary_expr (80)
    on left: 68 69 70 71 72 73 74 75 76 77 78 79 80,
    on right: 65
enclosed_expr (81)
    on left: 81, on right: 67
unary_expr (82)
    on left: 82 83, on right: 66
assign_op (83)
    on left: 84 85 86, on right: 37
char_literal (84)
    on left: 87, on right: 62
int_literal (85)
    on left: 88 89, on right: 10 63
bool_literal (86)
    on left: 90 91, on right: 64
string_literal (87)
    on left: 92, on right: 54 55 59


state 0

    0 $accept: . program_declaration $end

    CLASS  shift, and go to state 1

    program_declaration  go to state 2


state 1

    1 program_declaration: CLASS . PROGRAM CURLY_OPEN field_declarations method_declarations CURLY_CLOSE

    PROGRAM  shift, and go to state 3


state 2

    0 $accept: program_declaration . $end

    $end  shift, and go to state 4


state 3

    1 program_declaration: CLASS PROGRAM . CURLY_OPEN field_declarations method_declarations CURLY_CLOSE

    CURLY_OPEN  shift, and go to state 5


state 4

    0 $accept: program_declaration $end .

    $default  accept


state 5

    1 program_declaration: CLASS PROGRAM CURLY_OPEN . field_declarations method_declarations CURLY_CLOSE

    $default  reduce using rule 4 (field_declarations)

    field_declarations  go to state 6


state 6

    1 program_declaration: CLASS PROGRAM CURLY_OPEN field_declarations . method_declarations CURLY_CLOSE
    5 field_declarations: field_declarations . field_declaration SEMI_COLON

    VOID     shift, and go to state 7
    INT      shift, and go to state 8
    BOOLEAN  shift, and go to state 9

    $default  reduce using rule 12 (method_declarations)

    var_type             go to state 10
    field_declaration    go to state 11
    method_declarations  go to state 12
    method_declaration   go to state 13


state 7

   13 method_declaration: VOID . ID OPEN parameter_declarations CLOSE code_block
   15                   | VOID . ID OPEN CLOSE code_block

    ID  shift, and go to state 14


state 8

    2 var_type: INT .

    $default  reduce using rule 2 (var_type)


state 9

    3 var_type: BOOLEAN .

    $default  reduce using rule 3 (var_type)


state 10

    6 field_declaration: var_type . field_names
   14 method_declaration: var_type . ID OPEN parameter_declarations CLOSE code_block
   16                   | var_type . ID OPEN CLOSE code_block

    ID  shift, and go to state 15

    field_names  go to state 16
    field_name   go to state 17


state 11

    5 field_declarations: field_declarations field_declaration . SEMI_COLON

    SEMI_COLON  shift, and go to state 18


state 12

    1 program_declaration: CLASS PROGRAM CURLY_OPEN field_declarations method_declarations . CURLY_CLOSE

    CURLY_CLOSE  shift, and go to state 19


state 13

   11 method_declarations: method_declaration . method_declarations

    VOID     shift, and go to state 7
    INT      shift, and go to state 8
    BOOLEAN  shift, and go to state 9

    $default  reduce using rule 12 (method_declarations)

    var_type             go to state 20
    method_declarations  go to state 21
    method_declaration   go to state 13


state 14

   13 method_declaration: VOID ID . OPEN parameter_declarations CLOSE code_block
   15                   | VOID ID . OPEN CLOSE code_block

    OPEN  shift, and go to state 22


state 15

    9 field_name: ID .
   10           | ID . SQUARE_OPEN int_literal SQUARE_CLOSE
   14 method_declaration: var_type ID . OPEN parameter_declarations CLOSE code_block
   16                   | var_type ID . OPEN CLOSE code_block

    SQUARE_OPEN  shift, and go to state 23
    OPEN         shift, and go to state 24

    $default  reduce using rule 9 (field_name)


state 16

    6 field_declaration: var_type field_names .
    8 field_names: field_names . COMMA field_name

    COMMA  shift, and go to state 25

    $default  reduce using rule 6 (field_declaration)


state 17

    7 field_names: field_name .

    $default  reduce using rule 7 (field_names)


state 18

    5 field_declarations: field_declarations field_declaration SEMI_COLON .

    $default  reduce using rule 5 (field_declarations)


state 19

    1 program_declaration: CLASS PROGRAM CURLY_OPEN field_declarations method_declarations CURLY_CLOSE .

    $default  reduce using rule 1 (program_declaration)


state 20

   14 method_declaration: var_type . ID OPEN parameter_declarations CLOSE code_block
   16                   | var_type . ID OPEN CLOSE code_block

    ID  shift, and go to state 26


state 21

   11 method_declarations: method_declaration method_declarations .

    $default  reduce using rule 11 (method_declarations)


state 22

   13 method_declaration: VOID ID OPEN . parameter_declarations CLOSE code_block
   15                   | VOID ID OPEN . CLOSE code_block

    INT      shift, and go to state 8
    BOOLEAN  shift, and go to state 9
    CLOSE    shift, and go to state 27

    var_type                go to state 28
    parameter_declarations  go to state 29
    parameter_declaration   go to state 30


state 23

   10 field_name: ID SQUARE_OPEN . int_literal SQUARE_CLOSE

    NUM          shift, and go to state 31
    HEX_LITERAL  shift, and go to state 32

    int_literal  go to state 33


state 24

   14 method_declaration: var_type ID OPEN . parameter_declarations CLOSE code_block
   16                   | var_type ID OPEN . CLOSE code_block

    INT      shift, and go to state 8
    BOOLEAN  shift, and go to state 9
    CLOSE    shift, and go to state 34

    var_type                go to state 28
    parameter_declarations  go to state 35
    parameter_declaration   go to state 30


state 25

    8 field_names: field_names COMMA . field_name

    ID  shift, and go to state 36

    field_name  go to state 37


state 26

   14 method_declaration: var_type ID . OPEN parameter_declarations CLOSE code_block
   16                   | var_type ID . OPEN CLOSE code_block

    OPEN  shift, and go to state 24


state 27

   15 method_declaration: VOID ID OPEN CLOSE . code_block

    CURLY_OPEN  shift, and go to state 38

    code_block  go to state 39


state 28

   19 parameter_declaration: var_type . ID

    ID  shift, and go to state 40


state 29

   13 method_declaration: VOID ID OPEN parameter_declarations . CLOSE code_block
   18 parameter_declarations: parameter_declarations . COMMA parameter_declaration

    CLOSE  shift, and go to state 41
    COMMA  shift, and go to state 42


state 30

   17 parameter_declarations: parameter_declaration .

    $default  reduce using rule 17 (parameter_declarations)


state 31

   88 int_literal: NUM .

    $default  reduce using rule 88 (int_literal)


state 32

   89 int_literal: HEX_LITERAL .

    $default  reduce using rule 89 (int_literal)


state 33

   10 field_name: ID SQUARE_OPEN int_literal . SQUARE_CLOSE

    SQUARE_CLOSE  shift, and go to state 43


state 34

   16 method_declaration: var_type ID OPEN CLOSE . code_block

    CURLY_OPEN  shift, and go to state 38

    code_block  go to state 44


state 35

   14 method_declaration: var_type ID OPEN parameter_declarations . CLOSE code_block
   18 parameter_declarations: parameter_declarations . COMMA parameter_declaration

    CLOSE  shift, and go to state 45
    COMMA  shift, and go to state 42


state 36

    9 field_name: ID .
   10           | ID . SQUARE_OPEN int_literal SQUARE_CLOSE

    SQUARE_OPEN  shift, and go to state 23

    $default  reduce using rule 9 (field_name)


state 37

    8 field_names: field_names COMMA field_name .

    $default  reduce using rule 8 (field_names)


state 38

   20 code_block: CURLY_OPEN . block CURLY_CLOSE

    CURLY_CLOSE  reduce using rule 21 (block)
    CURLY_CLOSE  [reduce using rule 23 (var_declarations)]
    $default     reduce using rule 23 (var_declarations)

    block             go to state 46
    var_declarations  go to state 47


state 39

   15 method_declaration: VOID ID OPEN CLOSE code_block .

    $default  reduce using rule 15 (method_declaration)


state 40

   19 parameter_declaration: var_type ID .

    $default  reduce using rule 19 (parameter_declaration)


state 41

   13 method_declaration: VOID ID OPEN parameter_declarations CLOSE . code_block

    CURLY_OPEN  shift, and go to state 38

    code_block  go to state 48


state 42

   18 parameter_declarations: parameter_declarations COMMA . parameter_declaration

    INT      shift, and go to state 8
    BOOLEAN  shift, and go to state 9

    var_type               go to state 28
    parameter_declaration  go to state 49


state 43

   10 field_name: ID SQUARE_OPEN int_literal SQUARE_CLOSE .

    $default  reduce using rule 10 (field_name)


state 44

   16 method_declaration: var_type ID OPEN CLOSE code_block .

    $default  reduce using rule 16 (method_declaration)


state 45

   14 method_declaration: var_type ID OPEN parameter_declarations CLOSE . code_block

    CURLY_OPEN  shift, and go to state 38

    code_block  go to state 50


state 46

   20 code_block: CURLY_OPEN block . CURLY_CLOSE

    CURLY_CLOSE  shift, and go to state 51


state 47

   22 block: var_declarations . statements
   24 var_declarations: var_declarations . var_declaration SEMI_COLON

    INT      shift, and go to state 8
    BOOLEAN  shift, and go to state 9

    $default  reduce using rule 28 (statements)

    var_type         go to state 52
    var_declaration  go to state 53
    statements       go to state 54


state 48

   13 method_declaration: VOID ID OPEN parameter_declarations CLOSE code_block .

    $default  reduce using rule 13 (method_declaration)


state 49

   18 parameter_declarations: parameter_declarations COMMA parameter_declaration .

    $default  reduce using rule 18 (parameter_declarations)


state 50

   14 method_declaration: var_type ID OPEN parameter_declarations CLOSE code_block .

    $default  reduce using rule 14 (method_declaration)


state 51

   20 code_block: CURLY_OPEN block CURLY_CLOSE .

    $default  reduce using rule 20 (code_block)


state 52

   25 var_declaration: var_type . var_names

    ID  shift, and go to state 55

    var_names  go to state 56


state 53

   24 var_declarations: var_declarations var_declaration . SEMI_COLON

    SEMI_COLON  shift, and go to state 57


state 54

   22 block: var_declarations statements .
   29 statements: statements . statement

    CALLOUT     shift, and go to state 58
    BREAK       shift, and go to state 59
    CONTINUE    shift, and go to state 60
    RETURN      shift, and go to state 61
    FOR         shift, and go to state 62
    IF          shift, and go to state 63
    ID          shift, and go to state 64
    CURLY_OPEN  shift, and go to state 38

    $default  reduce using rule 22 (block)

    code_block             go to state 65
    statement              go to state 66
    assign_statement       go to state 67
    location               go to state 68
    if_statement           go to state 69
    for_statement          go to state 70
    return_statement       go to state 71
    terminal_statement     go to state 72
    method_call_statement  go to state 73
    method_call            go to state 74
    callout_call           go to state 75


state 55

   26 var_names: ID .

    $default  reduce using rule 26 (var_names)


state 56

   25 var_declaration: var_type var_names .
   27 var_names: var_names . COMMA ID

    COMMA  shift, and go to state 76

    $default  reduce using rule 25 (var_declaration)


state 57

   24 var_declarations: var_declarations var_declaration SEMI_COLON .

    $default  reduce using rule 24 (var_declarations)


state 58

   54 callout_call: CALLOUT . OPEN string_literal CLOSE
   55             | CALLOUT . OPEN string_literal COMMA non_empty_callout_args CLOSE

    OPEN  shift, and go to state 77


state 59

   46 terminal_statement: BREAK . SEMI_COLON

    SEMI_COLON  shift, and go to state 78


state 60

   47 terminal_statement: CONTINUE . SEMI_COLON

    SEMI_COLON  shift, and go to state 79


state 61

   44 return_statement: RETURN . expr SEMI_COLON
   45                 | RETURN . SEMI_COLON

    SUBTRACT      shift, and go to state 80
    NOT           shift, and go to state 81
    CALLOUT       shift, and go to state 58
    TRUE          shift, and go to state 82
    FALSE         shift, and go to state 83
    NUM           shift, and go to state 31
    HEX_LITERAL   shift, and go to state 32
    CHAR_LITERAL  shift, and go to state 84
    ID            shift, and go to state 64
    OPEN          shift, and go to state 85
    SEMI_COLON    shift, and go to state 86

    location               go to state 87
    method_call_statement  go to state 88
    method_call            go to state 74
    callout_call           go to state 75
    expr                   go to state 89
    binary_expr            go to state 90
    enclosed_expr          go to state 91
    unary_expr             go to state 92
    char_literal           go to state 93
    int_literal            go to state 94
    bool_literal           go to state 95


state 62

   43 for_statement: FOR . ID EQUAL expr COMMA expr code_block

    ID  shift, and go to state 96


state 63

   40 if_statement: IF . OPEN expr CLOSE code_block else_statement

    OPEN  shift, and go to state 97


state 64

   38 location: ID .
   39         | ID . SQUARE_OPEN expr SQUARE_CLOSE
   50 method_call: ID . OPEN method_call_args CLOSE
   51            | ID . OPEN CLOSE

    SQUARE_OPEN  shift, and go to state 98
    OPEN         shift, and go to state 99

    $default  reduce using rule 38 (location)


state 65

   36 statement: code_block .

    $default  reduce using rule 36 (statement)


state 66

   29 statements: statements statement .

    $default  reduce using rule 29 (statements)


state 67

   30 statement: assign_statement .

    $default  reduce using rule 30 (statement)


state 68

   37 assign_statement: location . assign_op expr SEMI_COLON

    EQUAL        shift, and go to state 100
    PLUS_EQUAL   shift, and go to state 101
    MINUS_EQUAL  shift, and go to state 102

    assign_op  go to state 103


state 69

   32 statement: if_statement .

    $default  reduce using rule 32 (statement)


state 70

   33 statement: for_statement .

    $default  reduce using rule 33 (statement)


state 71

   34 statement: return_statement .

    $default  reduce using rule 34 (statement)


state 72

   35 statement: terminal_statement .

    $default  reduce using rule 35 (statement)


state 73

   31 statement: method_call_statement .

    $default  reduce using rule 31 (statement)


state 74

   48 method_call_statement: method_call . SEMI_COLON

    SEMI_COLON  shift, and go to state 104


state 75

   49 method_call_statement: callout_call . SEMI_COLON

    SEMI_COLON  shift, and go to state 105


state 76

   27 var_names: var_names COMMA . ID

    ID  shift, and go to state 106


state 77

   54 callout_call: CALLOUT OPEN . string_literal CLOSE
   55             | CALLOUT OPEN . string_literal COMMA non_empty_callout_args CLOSE

    STRING  shift, and go to state 107

    string_literal  go to state 108


state 78

   46 terminal_statement: BREAK SEMI_COLON .

    $default  reduce using rule 46 (terminal_statement)


state 79

   47 terminal_statement: CONTINUE SEMI_COLON .

    $default  reduce using rule 47 (terminal_statement)


state 80

   82 unary_expr: SUBTRACT . expr

    SUBTRACT      shift, and go to state 80
    NOT           shift, and go to state 81
    CALLOUT       shift, and go to state 58
    TRUE          shift, and go to state 82
    FALSE         shift, and go to state 83
    NUM           shift, and go to state 31
    HEX_LITERAL   shift, and go to state 32
    CHAR_LITERAL  shift, and go to state 84
    ID            shift, and go to state 64
    OPEN          shift, and go to state 85

    location               go to state 87
    method_call_statement  go to state 88
    method_call            go to state 74
    callout_call           go to state 75
    expr                   go to state 109
    binary_expr            go to state 90
    enclosed_expr          go to state 91
    unary_expr             go to state 92
    char_literal           go to state 93
    int_literal            go to state 94
    bool_literal           go to state 95


state 81

   83 unary_expr: NOT . expr

    SUBTRACT      shift, and go to state 80
    NOT           shift, and go to state 81
    CALLOUT       shift, and go to state 58
    TRUE          shift, and go to state 82
    FALSE         shift, and go to state 83
    NUM           shift, and go to state 31
    HEX_LITERAL   shift, and go to state 32
    CHAR_LITERAL  shift, and go to state 84
    ID            shift, and go to state 64
    OPEN          shift, and go to state 85

    location               go to state 87
    method_call_statement  go to state 88
    method_call            go to state 74
    callout_call           go to state 75
    expr                   go to state 110
    binary_expr            go to state 90
    enclosed_expr          go to state 91
    unary_expr             go to state 92
    char_literal           go to state 93
    int_literal            go to state 94
    bool_literal           go to state 95


state 82

   90 bool_literal: TRUE .

    $default  reduce using rule 90 (bool_literal)


state 83

   91 bool_literal: FALSE .

    $default  reduce using rule 91 (bool_literal)


state 84

   87 char_literal: CHAR_LITERAL .

    $default  reduce using rule 87 (char_literal)


state 85

   81 enclosed_expr: OPEN . expr CLOSE

    SUBTRACT      shift, and go to state 80
    NOT           shift, and go to state 81
    CALLOUT       shift, and go to state 58
    TRUE          shift, and go to state 82
    FALSE         shift, and go to state 83
    NUM           shift, and go to state 31
    HEX_LITERAL   shift, and go to state 32
    CHAR_LITERAL  shift, and go to state 84
    ID            shift, and go to state 64
    OPEN          shift, and go to state 85

    location               go to state 87
    method_call_statement  go to state 88
    method_call            go to state 74
    callout_call           go to state 75
    expr                   go to state 111
    binary_expr            go to state 90
    enclosed_expr          go to state 91
    unary_expr             go to state 92
    char_literal           go to state 93
    int_literal            go to state 94
    bool_literal           go to state 95


state 86

   45 return_statement: RETURN SEMI_COLON .

    $default  reduce using rule 45 (return_statement)


state 87

   60 expr: location .

    $default  reduce using rule 60 (expr)


state 88

   61 expr: method_call_statement .

    $default  reduce using rule 61 (expr)


state 89

   44 return_statement: RETURN expr . SEMI_COLON
   68 binary_expr: expr . ADD expr
   69            | expr . SUBTRACT expr
   70            | expr . MULTIPLY expr
   71            | expr . DIVIDE expr
   72            | expr . MODULO expr
   73            | expr . GREATER expr
   74            | expr . LESS expr
   75            | expr . GREATER_EQUAL expr
   76            | expr . LESS_EQUAL expr
   77            | expr . EQUALITY expr
   78            | expr . NOT_EQUAL expr
   79            | expr . CONDITIONAL_AND expr
   80            | expr . CONDITIONAL_OR expr

    ADD              shift, and go to state 112
    SUBTRACT         shift, and go to state 113
    MULTIPLY         shift, and go to state 114
    DIVIDE           shift, and go to state 115
    MODULO           shift, and go to state 116
    EQUALITY         shift, and go to state 117
    NOT_EQUAL        shift, and go to state 118
    GREATER_EQUAL    shift, and go to state 119
    LESS_EQUAL       shift, and go to state 120
    GREATER          shift, and go to state 121
    LESS             shift, and go to state 122
    CONDITIONAL_AND  shift, and go to state 123
    CONDITIONAL_OR   shift, and go to state 124
    SEMI_COLON       shift, and go to state 125


state 90

   65 expr: binary_expr .

    $default  reduce using rule 65 (expr)


state 91

   67 expr: enclosed_expr .

    $default  reduce using rule 67 (expr)


state 92

   66 expr: unary_expr .

    $default  reduce using rule 66 (expr)


state 93

   62 expr: char_literal .

    $default  reduce using rule 62 (expr)


state 94

   63 expr: int_literal .

    $default  reduce using rule 63 (expr)


state 95

   64 expr: bool_literal .

    $default  reduce using rule 64 (expr)


state 96

   43 for_statement: FOR ID . EQUAL expr COMMA expr code_block

    EQUAL  shift, and go to state 126


state 97

   40 if_statement: IF OPEN . expr CLOSE code_block else_statement

    SUBTRACT      shift, and go to state 80
    NOT           shift, and go to state 81
    CALLOUT       shift, and go to state 58
    TRUE          shift, and go to state 82
    FALSE         shift, and go to state 83
    NUM           shift, and go to state 31
    HEX_LITERAL   shift, and go to state 32
    CHAR_LITERAL  shift, and go to state 84
    ID            shift, and go to state 64
    OPEN          shift, and go to state 85

    location               go to state 87
    method_call_statement  go to state 88
    method_call            go to state 74
    callout_call           go to state 75
    expr                   go to state 127
    binary_expr            go to state 90
    enclosed_expr          go to state 91
    unary_expr             go to state 92
    char_literal           go to state 93
    int_literal            go to state 94
    bool_literal           go to state 95


state 98

   39 location: ID SQUARE_OPEN . expr SQUARE_CLOSE

    SUBTRACT      shift, and go to state 80
    NOT           shift, and go to state 81
    CALLOUT       shift, and go to state 58
    TRUE          shift, and go to state 82
    FALSE         shift, and go to state 83
    NUM           shift, and go to state 31
    HEX_LITERAL   shift, and go to state 32
    CHAR_LITERAL  shift, and go to state 84
    ID            shift, and go to state 64
    OPEN          shift, and go to state 85

    location               go to state 87
    method_call_statement  go to state 88
    method_call            go to state 74
    callout_call           go to state 75
    expr                   go to state 128
    binary_expr            go to state 90
    enclosed_expr          go to state 91
    unary_expr             go to state 92
    char_literal           go to state 93
    int_literal            go to state 94
    bool_literal           go to state 95


state 99

   50 method_call: ID OPEN . method_call_args CLOSE
   51            | ID OPEN . CLOSE

    SUBTRACT      shift, and go to state 80
    NOT           shift, and go to state 81
    CALLOUT       shift, and go to state 58
    TRUE          shift, and go to state 82
    FALSE         shift, and go to state 83
    NUM           shift, and go to state 31
    HEX_LITERAL   shift, and go to state 32
    CHAR_LITERAL  shift, and go to state 84
    ID            shift, and go to state 64
    OPEN          shift, and go to state 85
    CLOSE         shift, and go to state 129

    location               go to state 87
    method_call_statement  go to state 88
    method_call            go to state 74
    method_call_args       go to state 130
    callout_call           go to state 75
    expr                   go to state 131
    binary_expr            go to state 90
    enclosed_expr          go to state 91
    unary_expr             go to state 92
    char_literal           go to state 93
    int_literal            go to state 94
    bool_literal           go to state 95


state 100

   84 assign_op: EQUAL .

    $default  reduce using rule 84 (assign_op)


state 101

   85 assign_op: PLUS_EQUAL .

    $default  reduce using rule 85 (assign_op)


state 102

   86 assign_op: MINUS_EQUAL .

    $default  reduce using rule 86 (assign_op)


state 103

   37 assign_statement: location assign_op . expr SEMI_COLON

    SUBTRACT      shift, and go to state 80
    NOT           shift, and go to state 81
    CALLOUT       shift, and go to state 58
    TRUE          shift, and go to state 82
    FALSE         shift, and go to state 83
    NUM           shift, and go to state 31
    HEX_LITERAL   shift, and go to state 32
    CHAR_LITERAL  shift, and go to state 84
    ID            shift, and go to state 64
    OPEN          shift, and go to state 85

    location               go to state 87
    method_call_statement  go to state 88
    method_call            go to state 74
    callout_call           go to state 75
    expr                   go to state 132
    binary_expr            go to state 90
    enclosed_expr          go to state 91
    unary_expr             go to state 92
    char_literal           go to state 93
    int_literal            go to state 94
    bool_literal           go to state 95


state 104

   48 method_call_statement: method_call SEMI_COLON .

    $default  reduce using rule 48 (method_call_statement)


state 105

   49 method_call_statement: callout_call SEMI_COLON .

    $default  reduce using rule 49 (method_call_statement)


state 106

   27 var_names: var_names COMMA ID .

    $default  reduce using rule 27 (var_names)


state 107

   92 string_literal: STRING .

    $default  reduce using rule 92 (string_literal)


state 108

   54 callout_call: CALLOUT OPEN string_literal . CLOSE
   55             | CALLOUT OPEN string_literal . COMMA non_empty_callout_args CLOSE

    CLOSE  shift, and go to state 133
    COMMA  shift, and go to state 134


state 109

   68 binary_expr: expr . ADD expr
   69            | expr . SUBTRACT expr
   70            | expr . MULTIPLY expr
   71            | expr . DIVIDE expr
   72            | expr . MODULO expr
   73            | expr . GREATER expr
   74            | expr . LESS expr
   75            | expr . GREATER_EQUAL expr
   76            | expr . LESS_EQUAL expr
   77            | expr . EQUALITY expr
   78            | expr . NOT_EQUAL expr
   79            | expr . CONDITIONAL_AND expr
   80            | expr . CONDITIONAL_OR expr
   82 unary_expr: SUBTRACT expr .

    MULTIPLY         shift, and go to state 114
    DIVIDE           shift, and go to state 115
    MODULO           shift, and go to state 116
    EQUALITY         shift, and go to state 117
    NOT_EQUAL        shift, and go to state 118
    GREATER_EQUAL    shift, and go to state 119
    LESS_EQUAL       shift, and go to state 120
    GREATER          shift, and go to state 121
    LESS             shift, and go to state 122
    CONDITIONAL_AND  shift, and go to state 123
    CONDITIONAL_OR   shift, and go to state 124

    $default  reduce using rule 82 (unary_expr)


state 110

   68 binary_expr: expr . ADD expr
   69            | expr . SUBTRACT expr
   70            | expr . MULTIPLY expr
   71            | expr . DIVIDE expr
   72            | expr . MODULO expr
   73            | expr . GREATER expr
   74            | expr . LESS expr
   75            | expr . GREATER_EQUAL expr
   76            | expr . LESS_EQUAL expr
   77            | expr . EQUALITY expr
   78            | expr . NOT_EQUAL expr
   79            | expr . CONDITIONAL_AND expr
   80            | expr . CONDITIONAL_OR expr
   83 unary_expr: NOT expr .

    CONDITIONAL_AND  shift, and go to state 123
    CONDITIONAL_OR   shift, and go to state 124

    $default  reduce using rule 83 (unary_expr)


state 111

   68 binary_expr: expr . ADD expr
   69            | expr . SUBTRACT expr
   70            | expr . MULTIPLY expr
   71            | expr . DIVIDE expr
   72            | expr . MODULO expr
   73            | expr . GREATER expr
   74            | expr . LESS expr
   75            | expr . GREATER_EQUAL expr
   76            | expr . LESS_EQUAL expr
   77            | expr . EQUALITY expr
   78            | expr . NOT_EQUAL expr
   79            | expr . CONDITIONAL_AND expr
   80            | expr . CONDITIONAL_OR expr
   81 enclosed_expr: OPEN expr . CLOSE

    ADD              shift, and go to state 112
    SUBTRACT         shift, and go to state 113
    MULTIPLY         shift, and go to state 114
    DIVIDE           shift, and go to state 115
    MODULO           shift, and go to state 116
    EQUALITY         shift, and go to state 117
    NOT_EQUAL        shift, and go to state 118
    GREATER_EQUAL    shift, and go to state 119
    LESS_EQUAL       shift, and go to state 120
    GREATER          shift, and go to state 121
    LESS             shift, and go to state 122
    CONDITIONAL_AND  shift, and go to state 123
    CONDITIONAL_OR   shift, and go to state 124
    CLOSE            shift, and go to state 135


state 112

   68 binary_expr: expr ADD . expr

    SUBTRACT      shift, and go to state 80
    NOT           shift, and go to state 81
    CALLOUT       shift, and go to state 58
    TRUE          shift, and go to state 82
    FALSE         shift, and go to state 83
    NUM           shift, and go to state 31
    HEX_LITERAL   shift, and go to state 32
    CHAR_LITERAL  shift, and go to state 84
    ID            shift, and go to state 64
    OPEN          shift, and go to state 85

    location               go to state 87
    method_call_statement  go to state 88
    method_call            go to state 74
    callout_call           go to state 75
    expr                   go to state 136
    binary_expr            go to state 90
    enclosed_expr          go to state 91
    unary_expr             go to state 92
    char_literal           go to state 93
    int_literal            go to state 94
    bool_literal           go to state 95


state 113

   69 binary_expr: expr SUBTRACT . expr

    SUBTRACT      shift, and go to state 80
    NOT           shift, and go to state 81
    CALLOUT       shift, and go to state 58
    TRUE          shift, and go to state 82
    FALSE         shift, and go to state 83
    NUM           shift, and go to state 31
    HEX_LITERAL   shift, and go to state 32
    CHAR_LITERAL  shift, and go to state 84
    ID            shift, and go to state 64
    OPEN          shift, and go to state 85

    location               go to state 87
    method_call_statement  go to state 88
    method_call            go to state 74
    callout_call           go to state 75
    expr                   go to state 137
    binary_expr            go to state 90
    enclosed_expr          go to state 91
    unary_expr             go to state 92
    char_literal           go to state 93
    int_literal            go to state 94
    bool_literal           go to state 95


state 114

   70 binary_expr: expr MULTIPLY . expr

    SUBTRACT      shift, and go to state 80
    NOT           shift, and go to state 81
    CALLOUT       shift, and go to state 58
    TRUE          shift, and go to state 82
    FALSE         shift, and go to state 83
    NUM           shift, and go to state 31
    HEX_LITERAL   shift, and go to state 32
    CHAR_LITERAL  shift, and go to state 84
    ID            shift, and go to state 64
    OPEN          shift, and go to state 85

    location               go to state 87
    method_call_statement  go to state 88
    method_call            go to state 74
    callout_call           go to state 75
    expr                   go to state 138
    binary_expr            go to state 90
    enclosed_expr          go to state 91
    unary_expr             go to state 92
    char_literal           go to state 93
    int_literal            go to state 94
    bool_literal           go to state 95


state 115

   71 binary_expr: expr DIVIDE . expr

    SUBTRACT      shift, and go to state 80
    NOT           shift, and go to state 81
    CALLOUT       shift, and go to state 58
    TRUE          shift, and go to state 82
    FALSE         shift, and go to state 83
    NUM           shift, and go to state 31
    HEX_LITERAL   shift, and go to state 32
    CHAR_LITERAL  shift, and go to state 84
    ID            shift, and go to state 64
    OPEN          shift, and go to state 85

    location               go to state 87
    method_call_statement  go to state 88
    method_call            go to state 74
    callout_call           go to state 75
    expr                   go to state 139
    binary_expr            go to state 90
    enclosed_expr          go to state 91
    unary_expr             go to state 92
    char_literal           go to state 93
    int_literal            go to state 94
    bool_literal           go to state 95


state 116

   72 binary_expr: expr MODULO . expr

    SUBTRACT      shift, and go to state 80
    NOT           shift, and go to state 81
    CALLOUT       shift, and go to state 58
    TRUE          shift, and go to state 82
    FALSE         shift, and go to state 83
    NUM           shift, and go to state 31
    HEX_LITERAL   shift, and go to state 32
    CHAR_LITERAL  shift, and go to state 84
    ID            shift, and go to state 64
    OPEN          shift, and go to state 85

    location               go to state 87
    method_call_statement  go to state 88
    method_call            go to state 74
    callout_call           go to state 75
    expr                   go to state 140
    binary_expr            go to state 90
    enclosed_expr          go to state 91
    unary_expr             go to state 92
    char_literal           go to state 93
    int_literal            go to state 94
    bool_literal           go to state 95


state 117

   77 binary_expr: expr EQUALITY . expr

    SUBTRACT      shift, and go to state 80
    NOT           shift, and go to state 81
    CALLOUT       shift, and go to state 58
    TRUE          shift, and go to state 82
    FALSE         shift, and go to state 83
    NUM           shift, and go to state 31
    HEX_LITERAL   shift, and go to state 32
    CHAR_LITERAL  shift, and go to state 84
    ID            shift, and go to state 64
    OPEN          shift, and go to state 85

    location               go to state 87
    method_call_statement  go to state 88
    method_call            go to state 74
    callout_call           go to state 75
    expr                   go to state 141
    binary_expr            go to state 90
    enclosed_expr          go to state 91
    unary_expr             go to state 92
    char_literal           go to state 93
    int_literal            go to state 94
    bool_literal           go to state 95


state 118

   78 binary_expr: expr NOT_EQUAL . expr

    SUBTRACT      shift, and go to state 80
    NOT           shift, and go to state 81
    CALLOUT       shift, and go to state 58
    TRUE          shift, and go to state 82
    FALSE         shift, and go to state 83
    NUM           shift, and go to state 31
    HEX_LITERAL   shift, and go to state 32
    CHAR_LITERAL  shift, and go to state 84
    ID            shift, and go to state 64
    OPEN          shift, and go to state 85

    location               go to state 87
    method_call_statement  go to state 88
    method_call            go to state 74
    callout_call           go to state 75
    expr                   go to state 142
    binary_expr            go to state 90
    enclosed_expr          go to state 91
    unary_expr             go to state 92
    char_literal           go to state 93
    int_literal            go to state 94
    bool_literal           go to state 95


state 119

   75 binary_expr: expr GREATER_EQUAL . expr

    SUBTRACT      shift, and go to state 80
    NOT           shift, and go to state 81
    CALLOUT       shift, and go to state 58
    TRUE          shift, and go to state 82
    FALSE         shift, and go to state 83
    NUM           shift, and go to state 31
    HEX_LITERAL   shift, and go to state 32
    CHAR_LITERAL  shift, and go to state 84
    ID            shift, and go to state 64
    OPEN          shift, and go to state 85

    location               go to state 87
    method_call_statement  go to state 88
    method_call            go to state 74
    callout_call           go to state 75
    expr                   go to state 143
    binary_expr            go to state 90
    enclosed_expr          go to state 91
    unary_expr             go to state 92
    char_literal           go to state 93
    int_literal            go to state 94
    bool_literal           go to state 95


state 120

   76 binary_expr: expr LESS_EQUAL . expr

    SUBTRACT      shift, and go to state 80
    NOT           shift, and go to state 81
    CALLOUT       shift, and go to state 58
    TRUE          shift, and go to state 82
    FALSE         shift, and go to state 83
    NUM           shift, and go to state 31
    HEX_LITERAL   shift, and go to state 32
    CHAR_LITERAL  shift, and go to state 84
    ID            shift, and go to state 64
    OPEN          shift, and go to state 85

    location               go to state 87
    method_call_statement  go to state 88
    method_call            go to state 74
    callout_call           go to state 75
    expr                   go to state 144
    binary_expr            go to state 90
    enclosed_expr          go to state 91
    unary_expr             go to state 92
    char_literal           go to state 93
    int_literal            go to state 94
    bool_literal           go to state 95


state 121

   73 binary_expr: expr GREATER . expr

    SUBTRACT      shift, and go to state 80
    NOT           shift, and go to state 81
    CALLOUT       shift, and go to state 58
    TRUE          shift, and go to state 82
    FALSE         shift, and go to state 83
    NUM           shift, and go to state 31
    HEX_LITERAL   shift, and go to state 32
    CHAR_LITERAL  shift, and go to state 84
    ID            shift, and go to state 64
    OPEN          shift, and go to state 85

    location               go to state 87
    method_call_statement  go to state 88
    method_call            go to state 74
    callout_call           go to state 75
    expr                   go to state 145
    binary_expr            go to state 90
    enclosed_expr          go to state 91
    unary_expr             go to state 92
    char_literal           go to state 93
    int_literal            go to state 94
    bool_literal           go to state 95


state 122

   74 binary_expr: expr LESS . expr

    SUBTRACT      shift, and go to state 80
    NOT           shift, and go to state 81
    CALLOUT       shift, and go to state 58
    TRUE          shift, and go to state 82
    FALSE         shift, and go to state 83
    NUM           shift, and go to state 31
    HEX_LITERAL   shift, and go to state 32
    CHAR_LITERAL  shift, and go to state 84
    ID            shift, and go to state 64
    OPEN          shift, and go to state 85

    location               go to state 87
    method_call_statement  go to state 88
    method_call            go to state 74
    callout_call           go to state 75
    expr                   go to state 146
    binary_expr            go to state 90
    enclosed_expr          go to state 91
    unary_expr             go to state 92
    char_literal           go to state 93
    int_literal            go to state 94
    bool_literal           go to state 95


state 123

   79 binary_expr: expr CONDITIONAL_AND . expr

    SUBTRACT      shift, and go to state 80
    NOT           shift, and go to state 81
    CALLOUT       shift, and go to state 58
    TRUE          shift, and go to state 82
    FALSE         shift, and go to state 83
    NUM           shift, and go to state 31
    HEX_LITERAL   shift, and go to state 32
    CHAR_LITERAL  shift, and go to state 84
    ID            shift, and go to state 64
    OPEN          shift, and go to state 85

    location               go to state 87
    method_call_statement  go to state 88
    method_call            go to state 74
    callout_call           go to state 75
    expr                   go to state 147
    binary_expr            go to state 90
    enclosed_expr          go to state 91
    unary_expr             go to state 92
    char_literal           go to state 93
    int_literal            go to state 94
    bool_literal           go to state 95


state 124

   80 binary_expr: expr CONDITIONAL_OR . expr

    SUBTRACT      shift, and go to state 80
    NOT           shift, and go to state 81
    CALLOUT       shift, and go to state 58
    TRUE          shift, and go to state 82
    FALSE         shift, and go to state 83
    NUM           shift, and go to state 31
    HEX_LITERAL   shift, and go to state 32
    CHAR_LITERAL  shift, and go to state 84
    ID            shift, and go to state 64
    OPEN          shift, and go to state 85

    location               go to state 87
    method_call_statement  go to state 88
    method_call            go to state 74
    callout_call           go to state 75
    expr                   go to state 148
    binary_expr            go to state 90
    enclosed_expr          go to state 91
    unary_expr             go to state 92
    char_literal           go to state 93
    int_literal            go to state 94
    bool_literal           go to state 95


state 125

   44 return_statement: RETURN expr SEMI_COLON .

    $default  reduce using rule 44 (return_statement)


state 126

   43 for_statement: FOR ID EQUAL . expr COMMA expr code_block

    SUBTRACT      shift, and go to state 80
    NOT           shift, and go to state 81
    CALLOUT       shift, and go to state 58
    TRUE          shift, and go to state 82
    FALSE         shift, and go to state 83
    NUM           shift, and go to state 31
    HEX_LITERAL   shift, and go to state 32
    CHAR_LITERAL  shift, and go to state 84
    ID            shift, and go to state 64
    OPEN          shift, and go to state 85

    location               go to state 87
    method_call_statement  go to state 88
    method_call            go to state 74
    callout_call           go to state 75
    expr                   go to state 149
    binary_expr            go to state 90
    enclosed_expr          go to state 91
    unary_expr             go to state 92
    char_literal           go to state 93
    int_literal            go to state 94
    bool_literal           go to state 95


state 127

   40 if_statement: IF OPEN expr . CLOSE code_block else_statement
   68 binary_expr: expr . ADD expr
   69            | expr . SUBTRACT expr
   70            | expr . MULTIPLY expr
   71            | expr . DIVIDE expr
   72            | expr . MODULO expr
   73            | expr . GREATER expr
   74            | expr . LESS expr
   75            | expr . GREATER_EQUAL expr
   76            | expr . LESS_EQUAL expr
   77            | expr . EQUALITY expr
   78            | expr . NOT_EQUAL expr
   79            | expr . CONDITIONAL_AND expr
   80            | expr . CONDITIONAL_OR expr

    ADD              shift, and go to state 112
    SUBTRACT         shift, and go to state 113
    MULTIPLY         shift, and go to state 114
    DIVIDE           shift, and go to state 115
    MODULO           shift, and go to state 116
    EQUALITY         shift, and go to state 117
    NOT_EQUAL        shift, and go to state 118
    GREATER_EQUAL    shift, and go to state 119
    LESS_EQUAL       shift, and go to state 120
    GREATER          shift, and go to state 121
    LESS             shift, and go to state 122
    CONDITIONAL_AND  shift, and go to state 123
    CONDITIONAL_OR   shift, and go to state 124
    CLOSE            shift, and go to state 150


state 128

   39 location: ID SQUARE_OPEN expr . SQUARE_CLOSE
   68 binary_expr: expr . ADD expr
   69            | expr . SUBTRACT expr
   70            | expr . MULTIPLY expr
   71            | expr . DIVIDE expr
   72            | expr . MODULO expr
   73            | expr . GREATER expr
   74            | expr . LESS expr
   75            | expr . GREATER_EQUAL expr
   76            | expr . LESS_EQUAL expr
   77            | expr . EQUALITY expr
   78            | expr . NOT_EQUAL expr
   79            | expr . CONDITIONAL_AND expr
   80            | expr . CONDITIONAL_OR expr

    ADD              shift, and go to state 112
    SUBTRACT         shift, and go to state 113
    MULTIPLY         shift, and go to state 114
    DIVIDE           shift, and go to state 115
    MODULO           shift, and go to state 116
    EQUALITY         shift, and go to state 117
    NOT_EQUAL        shift, and go to state 118
    GREATER_EQUAL    shift, and go to state 119
    LESS_EQUAL       shift, and go to state 120
    GREATER          shift, and go to state 121
    LESS             shift, and go to state 122
    CONDITIONAL_AND  shift, and go to state 123
    CONDITIONAL_OR   shift, and go to state 124
    SQUARE_CLOSE     shift, and go to state 151


state 129

   51 method_call: ID OPEN CLOSE .

    $default  reduce using rule 51 (method_call)


state 130

   50 method_call: ID OPEN method_call_args . CLOSE
   53 method_call_args: method_call_args . COMMA expr

    CLOSE  shift, and go to state 152
    COMMA  shift, and go to state 153


state 131

   52 method_call_args: expr .
   68 binary_expr: expr . ADD expr
   69            | expr . SUBTRACT expr
   70            | expr . MULTIPLY expr
   71            | expr . DIVIDE expr
   72            | expr . MODULO expr
   73            | expr . GREATER expr
   74            | expr . LESS expr
   75            | expr . GREATER_EQUAL expr
   76            | expr . LESS_EQUAL expr
   77            | expr . EQUALITY expr
   78            | expr . NOT_EQUAL expr
   79            | expr . CONDITIONAL_AND expr
   80            | expr . CONDITIONAL_OR expr

    ADD              shift, and go to state 112
    SUBTRACT         shift, and go to state 113
    MULTIPLY         shift, and go to state 114
    DIVIDE           shift, and go to state 115
    MODULO           shift, and go to state 116
    EQUALITY         shift, and go to state 117
    NOT_EQUAL        shift, and go to state 118
    GREATER_EQUAL    shift, and go to state 119
    LESS_EQUAL       shift, and go to state 120
    GREATER          shift, and go to state 121
    LESS             shift, and go to state 122
    CONDITIONAL_AND  shift, and go to state 123
    CONDITIONAL_OR   shift, and go to state 124

    $default  reduce using rule 52 (method_call_args)


state 132

   37 assign_statement: location assign_op expr . SEMI_COLON
   68 binary_expr: expr . ADD expr
   69            | expr . SUBTRACT expr
   70            | expr . MULTIPLY expr
   71            | expr . DIVIDE expr
   72            | expr . MODULO expr
   73            | expr . GREATER expr
   74            | expr . LESS expr
   75            | expr . GREATER_EQUAL expr
   76            | expr . LESS_EQUAL expr
   77            | expr . EQUALITY expr
   78            | expr . NOT_EQUAL expr
   79            | expr . CONDITIONAL_AND expr
   80            | expr . CONDITIONAL_OR expr

    ADD              shift, and go to state 112
    SUBTRACT         shift, and go to state 113
    MULTIPLY         shift, and go to state 114
    DIVIDE           shift, and go to state 115
    MODULO           shift, and go to state 116
    EQUALITY         shift, and go to state 117
    NOT_EQUAL        shift, and go to state 118
    GREATER_EQUAL    shift, and go to state 119
    LESS_EQUAL       shift, and go to state 120
    GREATER          shift, and go to state 121
    LESS             shift, and go to state 122
    CONDITIONAL_AND  shift, and go to state 123
    CONDITIONAL_OR   shift, and go to state 124
    SEMI_COLON       shift, and go to state 154


state 133

   54 callout_call: CALLOUT OPEN string_literal CLOSE .

    $default  reduce using rule 54 (callout_call)


state 134

   55 callout_call: CALLOUT OPEN string_literal COMMA . non_empty_callout_args CLOSE

    SUBTRACT      shift, and go to state 80
    NOT           shift, and go to state 81
    CALLOUT       shift, and go to state 58
    TRUE          shift, and go to state 82
    FALSE         shift, and go to state 83
    NUM           shift, and go to state 31
    HEX_LITERAL   shift, and go to state 32
    CHAR_LITERAL  shift, and go to state 84
    STRING        shift, and go to state 107
    ID            shift, and go to state 64
    OPEN          shift, and go to state 85

    location                go to state 87
    method_call_statement   go to state 88
    method_call             go to state 74
    callout_call            go to state 75
    non_empty_callout_args  go to state 155
    callout_arg             go to state 156
    expr                    go to state 157
    binary_expr             go to state 90
    enclosed_expr           go to state 91
    unary_expr              go to state 92
    char_literal            go to state 93
    int_literal             go to state 94
    bool_literal            go to state 95
    string_literal          go to state 158


state 135

   81 enclosed_expr: OPEN expr CLOSE .

    $default  reduce using rule 81 (enclosed_expr)


state 136

   68 binary_expr: expr . ADD expr
   68            | expr ADD expr .
   69            | expr . SUBTRACT expr
   70            | expr . MULTIPLY expr
   71            | expr . DIVIDE expr
   72            | expr . MODULO expr
   73            | expr . GREATER expr
   74            | expr . LESS expr
   75            | expr . GREATER_EQUAL expr
   76            | expr . LESS_EQUAL expr
   77            | expr . EQUALITY expr
   78            | expr . NOT_EQUAL expr
   79            | expr . CONDITIONAL_AND expr
   80            | expr . CONDITIONAL_OR expr

    SUBTRACT         shift, and go to state 113
    MULTIPLY         shift, and go to state 114
    DIVIDE           shift, and go to state 115
    MODULO           shift, and go to state 116
    EQUALITY         shift, and go to state 117
    NOT_EQUAL        shift, and go to state 118
    GREATER_EQUAL    shift, and go to state 119
    LESS_EQUAL       shift, and go to state 120
    GREATER          shift, and go to state 121
    LESS             shift, and go to state 122
    CONDITIONAL_AND  shift, and go to state 123
    CONDITIONAL_OR   shift, and go to state 124

    $default  reduce using rule 68 (binary_expr)


state 137

   68 binary_expr: expr . ADD expr
   69            | expr . SUBTRACT expr
   69            | expr SUBTRACT expr .
   70            | expr . MULTIPLY expr
   71            | expr . DIVIDE expr
   72            | expr . MODULO expr
   73            | expr . GREATER expr
   74            | expr . LESS expr
   75            | expr . GREATER_EQUAL expr
   76            | expr . LESS_EQUAL expr
   77            | expr . EQUALITY expr
   78            | expr . NOT_EQUAL expr
   79            | expr . CONDITIONAL_AND expr
   80            | expr . CONDITIONAL_OR expr

    MULTIPLY         shift, and go to state 114
    DIVIDE           shift, and go to state 115
    MODULO           shift, and go to state 116
    EQUALITY         shift, and go to state 117
    NOT_EQUAL        shift, and go to state 118
    GREATER_EQUAL    shift, and go to state 119
    LESS_EQUAL       shift, and go to state 120
    GREATER          shift, and go to state 121
    LESS             shift, and go to state 122
    CONDITIONAL_AND  shift, and go to state 123
    CONDITIONAL_OR   shift, and go to state 124

    $default  reduce using rule 69 (binary_expr)


state 138

   68 binary_expr: expr . ADD expr
   69            | expr . SUBTRACT expr
   70            | expr . MULTIPLY expr
   70            | expr MULTIPLY expr .
   71            | expr . DIVIDE expr
   72            | expr . MODULO expr
   73            | expr . GREATER expr
   74            | expr . LESS expr
   75            | expr . GREATER_EQUAL expr
   76            | expr . LESS_EQUAL expr
   77            | expr . EQUALITY expr
   78            | expr . NOT_EQUAL expr
   79            | expr . CONDITIONAL_AND expr
   80            | expr . CONDITIONAL_OR expr

    DIVIDE           shift, and go to state 115
    MODULO           shift, and go to state 116
    EQUALITY         shift, and go to state 117
    NOT_EQUAL        shift, and go to state 118
    GREATER_EQUAL    shift, and go to state 119
    LESS_EQUAL       shift, and go to state 120
    GREATER          shift, and go to state 121
    LESS             shift, and go to state 122
    CONDITIONAL_AND  shift, and go to state 123
    CONDITIONAL_OR   shift, and go to state 124

    $default  reduce using rule 70 (binary_expr)


state 139

   68 binary_expr: expr . ADD expr
   69            | expr . SUBTRACT expr
   70            | expr . MULTIPLY expr
   71            | expr . DIVIDE expr
   71            | expr DIVIDE expr .
   72            | expr . MODULO expr
   73            | expr . GREATER expr
   74            | expr . LESS expr
   75            | expr . GREATER_EQUAL expr
   76            | expr . LESS_EQUAL expr
   77            | expr . EQUALITY expr
   78            | expr . NOT_EQUAL expr
   79            | expr . CONDITIONAL_AND expr
   80            | expr . CONDITIONAL_OR expr

    MODULO           shift, and go to state 116
    EQUALITY         shift, and go to state 117
    NOT_EQUAL        shift, and go to state 118
    GREATER_EQUAL    shift, and go to state 119
    LESS_EQUAL       shift, and go to state 120
    GREATER          shift, and go to state 121
    LESS             shift, and go to state 122
    CONDITIONAL_AND  shift, and go to state 123
    CONDITIONAL_OR   shift, and go to state 124

    $default  reduce using rule 71 (binary_expr)


state 140

   68 binary_expr: expr . ADD expr
   69            | expr . SUBTRACT expr
   70            | expr . MULTIPLY expr
   71            | expr . DIVIDE expr
   72            | expr . MODULO expr
   72            | expr MODULO expr .
   73            | expr . GREATER expr
   74            | expr . LESS expr
   75            | expr . GREATER_EQUAL expr
   76            | expr . LESS_EQUAL expr
   77            | expr . EQUALITY expr
   78            | expr . NOT_EQUAL expr
   79            | expr . CONDITIONAL_AND expr
   80            | expr . CONDITIONAL_OR expr

    EQUALITY         shift, and go to state 117
    NOT_EQUAL        shift, and go to state 118
    GREATER_EQUAL    shift, and go to state 119
    LESS_EQUAL       shift, and go to state 120
    GREATER          shift, and go to state 121
    LESS             shift, and go to state 122
    CONDITIONAL_AND  shift, and go to state 123
    CONDITIONAL_OR   shift, and go to state 124

    $default  reduce using rule 72 (binary_expr)


state 141

   68 binary_expr: expr . ADD expr
   69            | expr . SUBTRACT expr
   70            | expr . MULTIPLY expr
   71            | expr . DIVIDE expr
   72            | expr . MODULO expr
   73            | expr . GREATER expr
   74            | expr . LESS expr
   75            | expr . GREATER_EQUAL expr
   76            | expr . LESS_EQUAL expr
   77            | expr . EQUALITY expr
   77            | expr EQUALITY expr .
   78            | expr . NOT_EQUAL expr
   79            | expr . CONDITIONAL_AND expr
   80            | expr . CONDITIONAL_OR expr

    NOT_EQUAL        shift, and go to state 118
    GREATER_EQUAL    shift, and go to state 119
    LESS_EQUAL       shift, and go to state 120
    GREATER          shift, and go to state 121
    LESS             shift, and go to state 122
    CONDITIONAL_AND  shift, and go to state 123
    CONDITIONAL_OR   shift, and go to state 124

    $default  reduce using rule 77 (binary_expr)


state 142

   68 binary_expr: expr . ADD expr
   69            | expr . SUBTRACT expr
   70            | expr . MULTIPLY expr
   71            | expr . DIVIDE expr
   72            | expr . MODULO expr
   73            | expr . GREATER expr
   74            | expr . LESS expr
   75            | expr . GREATER_EQUAL expr
   76            | expr . LESS_EQUAL expr
   77            | expr . EQUALITY expr
   78            | expr . NOT_EQUAL expr
   78            | expr NOT_EQUAL expr .
   79            | expr . CONDITIONAL_AND expr
   80            | expr . CONDITIONAL_OR expr

    GREATER_EQUAL    shift, and go to state 119
    LESS_EQUAL       shift, and go to state 120
    GREATER          shift, and go to state 121
    LESS             shift, and go to state 122
    CONDITIONAL_AND  shift, and go to state 123
    CONDITIONAL_OR   shift, and go to state 124

    $default  reduce using rule 78 (binary_expr)


state 143

   68 binary_expr: expr . ADD expr
   69            | expr . SUBTRACT expr
   70            | expr . MULTIPLY expr
   71            | expr . DIVIDE expr
   72            | expr . MODULO expr
   73            | expr . GREATER expr
   74            | expr . LESS expr
   75            | expr . GREATER_EQUAL expr
   75            | expr GREATER_EQUAL expr .
   76            | expr . LESS_EQUAL expr
   77            | expr . EQUALITY expr
   78            | expr . NOT_EQUAL expr
   79            | expr . CONDITIONAL_AND expr
   80            | expr . CONDITIONAL_OR expr

    LESS_EQUAL       shift, and go to state 120
    GREATER          shift, and go to state 121
    LESS             shift, and go to state 122
    CONDITIONAL_AND  shift, and go to state 123
    CONDITIONAL_OR   shift, and go to state 124

    $default  reduce using rule 75 (binary_expr)


state 144

   68 binary_expr: expr . ADD expr
   69            | expr . SUBTRACT expr
   70            | expr . MULTIPLY expr
   71            | expr . DIVIDE expr
   72            | expr . MODULO expr
   73            | expr . GREATER expr
   74            | expr . LESS expr
   75            | expr . GREATER_EQUAL expr
   76            | expr . LESS_EQUAL expr
   76            | expr LESS_EQUAL expr .
   77            | expr . EQUALITY expr
   78            | expr . NOT_EQUAL expr
   79            | expr . CONDITIONAL_AND expr
   80            | expr . CONDITIONAL_OR expr

    GREATER          shift, and go to state 121
    LESS             shift, and go to state 122
    CONDITIONAL_AND  shift, and go to state 123
    CONDITIONAL_OR   shift, and go to state 124

    $default  reduce using rule 76 (binary_expr)


state 145

   68 binary_expr: expr . ADD expr
   69            | expr . SUBTRACT expr
   70            | expr . MULTIPLY expr
   71            | expr . DIVIDE expr
   72            | expr . MODULO expr
   73            | expr . GREATER expr
   73            | expr GREATER expr .
   74            | expr . LESS expr
   75            | expr . GREATER_EQUAL expr
   76            | expr . LESS_EQUAL expr
   77            | expr . EQUALITY expr
   78            | expr . NOT_EQUAL expr
   79            | expr . CONDITIONAL_AND expr
   80            | expr . CONDITIONAL_OR expr

    LESS             shift, and go to state 122
    CONDITIONAL_AND  shift, and go to state 123
    CONDITIONAL_OR   shift, and go to state 124

    $default  reduce using rule 73 (binary_expr)


state 146

   68 binary_expr: expr . ADD expr
   69            | expr . SUBTRACT expr
   70            | expr . MULTIPLY expr
   71            | expr . DIVIDE expr
   72            | expr . MODULO expr
   73            | expr . GREATER expr
   74            | expr . LESS expr
   74            | expr LESS expr .
   75            | expr . GREATER_EQUAL expr
   76            | expr . LESS_EQUAL expr
   77            | expr . EQUALITY expr
   78            | expr . NOT_EQUAL expr
   79            | expr . CONDITIONAL_AND expr
   80            | expr . CONDITIONAL_OR expr

    CONDITIONAL_AND  shift, and go to state 123
    CONDITIONAL_OR   shift, and go to state 124

    $default  reduce using rule 74 (binary_expr)


state 147

   68 binary_expr: expr . ADD expr
   69            | expr . SUBTRACT expr
   70            | expr . MULTIPLY expr
   71            | expr . DIVIDE expr
   72            | expr . MODULO expr
   73            | expr . GREATER expr
   74            | expr . LESS expr
   75            | expr . GREATER_EQUAL expr
   76            | expr . LESS_EQUAL expr
   77            | expr . EQUALITY expr
   78            | expr . NOT_EQUAL expr
   79            | expr . CONDITIONAL_AND expr
   79            | expr CONDITIONAL_AND expr .
   80            | expr . CONDITIONAL_OR expr

    CONDITIONAL_OR  shift, and go to state 124

    $default  reduce using rule 79 (binary_expr)


state 148

   68 binary_expr: expr . ADD expr
   69            | expr . SUBTRACT expr
   70            | expr . MULTIPLY expr
   71            | expr . DIVIDE expr
   72            | expr . MODULO expr
   73            | expr . GREATER expr
   74            | expr . LESS expr
   75            | expr . GREATER_EQUAL expr
   76            | expr . LESS_EQUAL expr
   77            | expr . EQUALITY expr
   78            | expr . NOT_EQUAL expr
   79            | expr . CONDITIONAL_AND expr
   80            | expr . CONDITIONAL_OR expr
   80            | expr CONDITIONAL_OR expr .

    $default  reduce using rule 80 (binary_expr)


state 149

   43 for_statement: FOR ID EQUAL expr . COMMA expr code_block
   68 binary_expr: expr . ADD expr
   69            | expr . SUBTRACT expr
   70            | expr . MULTIPLY expr
   71            | expr . DIVIDE expr
   72            | expr . MODULO expr
   73            | expr . GREATER expr
   74            | expr . LESS expr
   75            | expr . GREATER_EQUAL expr
   76            | expr . LESS_EQUAL expr
   77            | expr . EQUALITY expr
   78            | expr . NOT_EQUAL expr
   79            | expr . CONDITIONAL_AND expr
   80            | expr . CONDITIONAL_OR expr

    ADD              shift, and go to state 112
    SUBTRACT         shift, and go to state 113
    MULTIPLY         shift, and go to state 114
    DIVIDE           shift, and go to state 115
    MODULO           shift, and go to state 116
    EQUALITY         shift, and go to state 117
    NOT_EQUAL        shift, and go to state 118
    GREATER_EQUAL    shift, and go to state 119
    LESS_EQUAL       shift, and go to state 120
    GREATER          shift, and go to state 121
    LESS             shift, and go to state 122
    CONDITIONAL_AND  shift, and go to state 123
    CONDITIONAL_OR   shift, and go to state 124
    COMMA            shift, and go to state 159


state 150

   40 if_statement: IF OPEN expr CLOSE . code_block else_statement

    CURLY_OPEN  shift, and go to state 38

    code_block  go to state 160


state 151

   39 location: ID SQUARE_OPEN expr SQUARE_CLOSE .

    $default  reduce using rule 39 (location)


state 152

   50 method_call: ID OPEN method_call_args CLOSE .

    $default  reduce using rule 50 (method_call)


state 153

   53 method_call_args: method_call_args COMMA . expr

    SUBTRACT      shift, and go to state 80
    NOT           shift, and go to state 81
    CALLOUT       shift, and go to state 58
    TRUE          shift, and go to state 82
    FALSE         shift, and go to state 83
    NUM           shift, and go to state 31
    HEX_LITERAL   shift, and go to state 32
    CHAR_LITERAL  shift, and go to state 84
    ID            shift, and go to state 64
    OPEN          shift, and go to state 85

    location               go to state 87
    method_call_statement  go to state 88
    method_call            go to state 74
    callout_call           go to state 75
    expr                   go to state 161
    binary_expr            go to state 90
    enclosed_expr          go to state 91
    unary_expr             go to state 92
    char_literal           go to state 93
    int_literal            go to state 94
    bool_literal           go to state 95


state 154

   37 assign_statement: location assign_op expr SEMI_COLON .

    $default  reduce using rule 37 (assign_statement)


state 155

   55 callout_call: CALLOUT OPEN string_literal COMMA non_empty_callout_args . CLOSE
   57 non_empty_callout_args: non_empty_callout_args . COMMA callout_arg

    CLOSE  shift, and go to state 162
    COMMA  shift, and go to state 163


state 156

   56 non_empty_callout_args: callout_arg .

    $default  reduce using rule 56 (non_empty_callout_args)


state 157

   58 callout_arg: expr .
   68 binary_expr: expr . ADD expr
   69            | expr . SUBTRACT expr
   70            | expr . MULTIPLY expr
   71            | expr . DIVIDE expr
   72            | expr . MODULO expr
   73            | expr . GREATER expr
   74            | expr . LESS expr
   75            | expr . GREATER_EQUAL expr
   76            | expr . LESS_EQUAL expr
   77            | expr . EQUALITY expr
   78            | expr . NOT_EQUAL expr
   79            | expr . CONDITIONAL_AND expr
   80            | expr . CONDITIONAL_OR expr

    ADD              shift, and go to state 112
    SUBTRACT         shift, and go to state 113
    MULTIPLY         shift, and go to state 114
    DIVIDE           shift, and go to state 115
    MODULO           shift, and go to state 116
    EQUALITY         shift, and go to state 117
    NOT_EQUAL        shift, and go to state 118
    GREATER_EQUAL    shift, and go to state 119
    LESS_EQUAL       shift, and go to state 120
    GREATER          shift, and go to state 121
    LESS             shift, and go to state 122
    CONDITIONAL_AND  shift, and go to state 123
    CONDITIONAL_OR   shift, and go to state 124

    $default  reduce using rule 58 (callout_arg)


state 158

   59 callout_arg: string_literal .

    $default  reduce using rule 59 (callout_arg)


state 159

   43 for_statement: FOR ID EQUAL expr COMMA . expr code_block

    SUBTRACT      shift, and go to state 80
    NOT           shift, and go to state 81
    CALLOUT       shift, and go to state 58
    TRUE          shift, and go to state 82
    FALSE         shift, and go to state 83
    NUM           shift, and go to state 31
    HEX_LITERAL   shift, and go to state 32
    CHAR_LITERAL  shift, and go to state 84
    ID            shift, and go to state 64
    OPEN          shift, and go to state 85

    location               go to state 87
    method_call_statement  go to state 88
    method_call            go to state 74
    callout_call           go to state 75
    expr                   go to state 164
    binary_expr            go to state 90
    enclosed_expr          go to state 91
    unary_expr             go to state 92
    char_literal           go to state 93
    int_literal            go to state 94
    bool_literal           go to state 95


state 160

   40 if_statement: IF OPEN expr CLOSE code_block . else_statement

    ELSE  shift, and go to state 165

    $default  reduce using rule 41 (else_statement)

    else_statement  go to state 166


state 161

   53 method_call_args: method_call_args COMMA expr .
   68 binary_expr: expr . ADD expr
   69            | expr . SUBTRACT expr
   70            | expr . MULTIPLY expr
   71            | expr . DIVIDE expr
   72            | expr . MODULO expr
   73            | expr . GREATER expr
   74            | expr . LESS expr
   75            | expr . GREATER_EQUAL expr
   76            | expr . LESS_EQUAL expr
   77            | expr . EQUALITY expr
   78            | expr . NOT_EQUAL expr
   79            | expr . CONDITIONAL_AND expr
   80            | expr . CONDITIONAL_OR expr

    ADD              shift, and go to state 112
    SUBTRACT         shift, and go to state 113
    MULTIPLY         shift, and go to state 114
    DIVIDE           shift, and go to state 115
    MODULO           shift, and go to state 116
    EQUALITY         shift, and go to state 117
    NOT_EQUAL        shift, and go to state 118
    GREATER_EQUAL    shift, and go to state 119
    LESS_EQUAL       shift, and go to state 120
    GREATER          shift, and go to state 121
    LESS             shift, and go to state 122
    CONDITIONAL_AND  shift, and go to state 123
    CONDITIONAL_OR   shift, and go to state 124

    $default  reduce using rule 53 (method_call_args)


state 162

   55 callout_call: CALLOUT OPEN string_literal COMMA non_empty_callout_args CLOSE .

    $default  reduce using rule 55 (callout_call)


state 163

   57 non_empty_callout_args: non_empty_callout_args COMMA . callout_arg

    SUBTRACT      shift, and go to state 80
    NOT           shift, and go to state 81
    CALLOUT       shift, and go to state 58
    TRUE          shift, and go to state 82
    FALSE         shift, and go to state 83
    NUM           shift, and go to state 31
    HEX_LITERAL   shift, and go to state 32
    CHAR_LITERAL  shift, and go to state 84
    STRING        shift, and go to state 107
    ID            shift, and go to state 64
    OPEN          shift, and go to state 85

    location               go to state 87
    method_call_statement  go to state 88
    method_call            go to state 74
    callout_call           go to state 75
    callout_arg            go to state 167
    expr                   go to state 157
    binary_expr            go to state 90
    enclosed_expr          go to state 91
    unary_expr             go to state 92
    char_literal           go to state 93
    int_literal            go to state 94
    bool_literal           go to state 95
    string_literal         go to state 158


state 164

   43 for_statement: FOR ID EQUAL expr COMMA expr . code_block
   68 binary_expr: expr . ADD expr
   69            | expr . SUBTRACT expr
   70            | expr . MULTIPLY expr
   71            | expr . DIVIDE expr
   72            | expr . MODULO expr
   73            | expr . GREATER expr
   74            | expr . LESS expr
   75            | expr . GREATER_EQUAL expr
   76            | expr . LESS_EQUAL expr
   77            | expr . EQUALITY expr
   78            | expr . NOT_EQUAL expr
   79            | expr . CONDITIONAL_AND expr
   80            | expr . CONDITIONAL_OR expr

    ADD              shift, and go to state 112
    SUBTRACT         shift, and go to state 113
    MULTIPLY         shift, and go to state 114
    DIVIDE           shift, and go to state 115
    MODULO           shift, and go to state 116
    EQUALITY         shift, and go to state 117
    NOT_EQUAL        shift, and go to state 118
    GREATER_EQUAL    shift, and go to state 119
    LESS_EQUAL       shift, and go to state 120
    GREATER          shift, and go to state 121
    LESS             shift, and go to state 122
    CONDITIONAL_AND  shift, and go to state 123
    CONDITIONAL_OR   shift, and go to state 124
    CURLY_OPEN       shift, and go to state 38

    code_block  go to state 168


state 165

   42 else_statement: ELSE . code_block

    CURLY_OPEN  shift, and go to state 38

    code_block  go to state 169


state 166

   40 if_statement: IF OPEN expr CLOSE code_block else_statement .

    $default  reduce using rule 40 (if_statement)


state 167

   57 non_empty_callout_args: non_empty_callout_args COMMA callout_arg .

    $default  reduce using rule 57 (non_empty_callout_args)


state 168

   43 for_statement: FOR ID EQUAL expr COMMA expr code_block .

    $default  reduce using rule 43 (for_statement)


state 169

   42 else_statement: ELSE code_block .

    $default  reduce using rule 42 (else_statement)
