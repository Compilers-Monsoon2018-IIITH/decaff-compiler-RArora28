Terminals which are not used

   ABSOLUTE


State 6 conflicts: 2 shift/reduce
State 40 conflicts: 1 reduce/reduce
State 93 conflicts: 13 shift/reduce
State 94 conflicts: 13 shift/reduce
State 127 conflicts: 13 shift/reduce


Grammar

    0 $accept: program_declaration $end

    1 program_declaration: CLASS PROGRAM CURLY_OPEN field_declarations method_declarations CURLY_CLOSE

    2 var_type: INT
    3         | BOOLEAN

    4 field_declarations: /* empty */
    5                   | field_declarations field_declaration SEMI_COLON

    6 field_declaration: var_type field_names

    7 field_names: field_name
    8            | field_names COMMA field_name

    9 field_name: ID
   10           | ID SQUARE_OPEN int_literal SQUARE_CLOSE

   11 method_declarations: /* empty */
   12                    | method_declarations method_declaration

   13 method_declaration: VOID ID OPEN parameter_declarations CLOSE code_block
   14                   | var_type ID OPEN parameter_declarations CLOSE code_block

   15 parameter_declarations: /* empty */
   16                       | non_empty_parameter_declaration

   17 non_empty_parameter_declaration: parameter_declaration
   18                                | non_empty_parameter_declaration COMMA parameter_declaration

   19 parameter_declaration: var_type ID

   20 code_block: CURLY_OPEN block CURLY_CLOSE

   21 block: /* empty */
   22      | var_declarations statements

   23 var_declarations: /* empty */
   24                 | var_declarations var_declaration SEMI_COLON

   25 var_declaration: var_type var_names

   26 var_names: ID
   27          | ID COMMA var_names

   28 statements: /* empty */
   29           | statement statements

   30 statement: location assign_op expr SEMI_COLON
   31          | method_call SEMI_COLON
   32          | IF OPEN expr CLOSE code_block possible_else
   33          | FOR ID EQUAL expr COMMA expr code_block
   34          | RETURN return_value SEMI_COLON
   35          | BREAK SEMI_COLON
   36          | CONTINUE SEMI_COLON
   37          | code_block

   38 possible_else: /* empty */
   39              | ELSE code_block

   40 return_value: /* empty */
   41             | expr

   42 location: ID
   43         | ID SQUARE_OPEN expr SQUARE_CLOSE

   44 method_call: ID OPEN method_call_args CLOSE
   45            | CALLOUT OPEN string_literal CLOSE
   46            | CALLOUT OPEN string_literal COMMA non_empty_callout_args CLOSE

   47 method_call_args: /* empty */
   48                 | non_empty_method_call_args

   49 non_empty_method_call_args: method_call_arg
   50                           | non_empty_method_call_args COMMA method_call_arg

   51 method_call_arg: expr

   52 non_empty_callout_args: callout_arg
   53                       | non_empty_callout_args COMMA callout_arg

   54 callout_arg: expr
   55            | string_literal

   56 expr: location
   57     | method_call
   58     | literal
   59     | expr bin_op expr
   60     | SUBTRACT expr
   61     | NOT expr
   62     | OPEN expr CLOSE

   63 assign_op: EQUAL
   64          | PLUS_EQUAL
   65          | MINUS_EQUAL

   66 bin_op: arith_op
   67       | rel_op
   68       | eq_op
   69       | cond_op

   70 arith_op: ADD
   71         | SUBTRACT
   72         | MULTIPLY
   73         | DIVIDE
   74         | MODULO

   75 rel_op: GREATER
   76       | LESS
   77       | GREATER_EQUAL
   78       | LESS_EQUAL

   79 eq_op: EQUALITY
   80      | NOT_EQUAL

   81 cond_op: CONDITIONAL_AND
   82        | CONDITIONAL_OR

   83 literal: char_literal
   84        | bool_literal
   85        | int_literal

   86 char_literal: CHAR_LITERAL

   87 int_literal: NUM
   88            | HEX_LITERAL

   89 bool_literal: TRUE
   90             | FALSE

   91 string_literal: STRING


Terminals, with rules where they appear

$end (0) 0
error (256)
PROGRAM (258) 1
CLASS (259) 1
CALLOUT (260) 45 46
VOID (261) 13
INT (262) 2
BOOLEAN (263) 3
TRUE (264) 89
FALSE (265) 90
BREAK (266) 35
CONTINUE (267) 36
RETURN (268) 34
FOR (269) 33
IF (270) 32
ELSE (271) 39
NUM (272) 87
HEX_LITERAL (273) 88
CHAR_LITERAL (274) 86
STRING (275) 91
ID (276) 9 10 13 14 19 26 27 33 42 43 44
ADD (277) 70
SUBTRACT (278) 60 71
MULTIPLY (279) 72
DIVIDE (280) 73
EQUAL (281) 33 63
PLUS_EQUAL (282) 64
MINUS_EQUAL (283) 65
EQUALITY (284) 79
NOT_EQUAL (285) 80
GREATER_EQUAL (286) 77
LESS_EQUAL (287) 78
GREATER (288) 75
LESS (289) 76
CONDITIONAL_AND (290) 81
CONDITIONAL_OR (291) 82
NOT (292) 61
ABSOLUTE (293)
MODULO (294) 74
CURLY_OPEN (295) 1 20
CURLY_CLOSE (296) 1 20
SQUARE_OPEN (297) 10 43
SQUARE_CLOSE (298) 10 43
OPEN (299) 13 14 32 44 45 46 62
CLOSE (300) 13 14 32 44 45 46 62
SEMI_COLON (301) 5 24 30 31 34 35 36
COMMA (302) 8 18 27 33 46 50 53


Nonterminals, with rules where they appear

$accept (48)
    on left: 0
program_declaration (49)
    on left: 1, on right: 0
var_type (50)
    on left: 2 3, on right: 6 14 19 25
field_declarations (51)
    on left: 4 5, on right: 1 5
field_declaration (52)
    on left: 6, on right: 5
field_names (53)
    on left: 7 8, on right: 6 8
field_name (54)
    on left: 9 10, on right: 7 8
method_declarations (55)
    on left: 11 12, on right: 1 12
method_declaration (56)
    on left: 13 14, on right: 12
parameter_declarations (57)
    on left: 15 16, on right: 13 14
non_empty_parameter_declaration (58)
    on left: 17 18, on right: 16 18
parameter_declaration (59)
    on left: 19, on right: 17 18
code_block (60)
    on left: 20, on right: 13 14 32 33 37 39
block (61)
    on left: 21 22, on right: 20
var_declarations (62)
    on left: 23 24, on right: 22 24
var_declaration (63)
    on left: 25, on right: 24
var_names (64)
    on left: 26 27, on right: 25 27
statements (65)
    on left: 28 29, on right: 22 29
statement (66)
    on left: 30 31 32 33 34 35 36 37, on right: 29
possible_else (67)
    on left: 38 39, on right: 32
return_value (68)
    on left: 40 41, on right: 34
location (69)
    on left: 42 43, on right: 30 56
method_call (70)
    on left: 44 45 46, on right: 31 57
method_call_args (71)
    on left: 47 48, on right: 44
non_empty_method_call_args (72)
    on left: 49 50, on right: 48 50
method_call_arg (73)
    on left: 51, on right: 49 50
non_empty_callout_args (74)
    on left: 52 53, on right: 46 53
callout_arg (75)
    on left: 54 55, on right: 52 53
expr (76)
    on left: 56 57 58 59 60 61 62, on right: 30 32 33 41 43 51 54 59
    60 61 62
assign_op (77)
    on left: 63 64 65, on right: 30
bin_op (78)
    on left: 66 67 68 69, on right: 59
arith_op (79)
    on left: 70 71 72 73 74, on right: 66
rel_op (80)
    on left: 75 76 77 78, on right: 67
eq_op (81)
    on left: 79 80, on right: 68
cond_op (82)
    on left: 81 82, on right: 69
literal (83)
    on left: 83 84 85, on right: 58
char_literal (84)
    on left: 86, on right: 83
int_literal (85)
    on left: 87 88, on right: 10 85
bool_literal (86)
    on left: 89 90, on right: 84
string_literal (87)
    on left: 91, on right: 45 46 55


state 0

    0 $accept: . program_declaration $end

    CLASS  shift, and go to state 1

    program_declaration  go to state 2


state 1

    1 program_declaration: CLASS . PROGRAM CURLY_OPEN field_declarations method_declarations CURLY_CLOSE

    PROGRAM  shift, and go to state 3


state 2

    0 $accept: program_declaration . $end

    $end  shift, and go to state 4


state 3

    1 program_declaration: CLASS PROGRAM . CURLY_OPEN field_declarations method_declarations CURLY_CLOSE

    CURLY_OPEN  shift, and go to state 5


state 4

    0 $accept: program_declaration $end .

    $default  accept


state 5

    1 program_declaration: CLASS PROGRAM CURLY_OPEN . field_declarations method_declarations CURLY_CLOSE

    $default  reduce using rule 4 (field_declarations)

    field_declarations  go to state 6


state 6

    1 program_declaration: CLASS PROGRAM CURLY_OPEN field_declarations . method_declarations CURLY_CLOSE
    5 field_declarations: field_declarations . field_declaration SEMI_COLON

    INT      shift, and go to state 7
    BOOLEAN  shift, and go to state 8

    INT       [reduce using rule 11 (method_declarations)]
    BOOLEAN   [reduce using rule 11 (method_declarations)]
    $default  reduce using rule 11 (method_declarations)

    var_type             go to state 9
    field_declaration    go to state 10
    method_declarations  go to state 11


state 7

    2 var_type: INT .

    $default  reduce using rule 2 (var_type)


state 8

    3 var_type: BOOLEAN .

    $default  reduce using rule 3 (var_type)


state 9

    6 field_declaration: var_type . field_names

    ID  shift, and go to state 12

    field_names  go to state 13
    field_name   go to state 14


state 10

    5 field_declarations: field_declarations field_declaration . SEMI_COLON

    SEMI_COLON  shift, and go to state 15


state 11

    1 program_declaration: CLASS PROGRAM CURLY_OPEN field_declarations method_declarations . CURLY_CLOSE
   12 method_declarations: method_declarations . method_declaration

    VOID         shift, and go to state 16
    INT          shift, and go to state 7
    BOOLEAN      shift, and go to state 8
    CURLY_CLOSE  shift, and go to state 17

    var_type            go to state 18
    method_declaration  go to state 19


state 12

    9 field_name: ID .
   10           | ID . SQUARE_OPEN int_literal SQUARE_CLOSE

    SQUARE_OPEN  shift, and go to state 20

    $default  reduce using rule 9 (field_name)


state 13

    6 field_declaration: var_type field_names .
    8 field_names: field_names . COMMA field_name

    COMMA  shift, and go to state 21

    $default  reduce using rule 6 (field_declaration)


state 14

    7 field_names: field_name .

    $default  reduce using rule 7 (field_names)


state 15

    5 field_declarations: field_declarations field_declaration SEMI_COLON .

    $default  reduce using rule 5 (field_declarations)


state 16

   13 method_declaration: VOID . ID OPEN parameter_declarations CLOSE code_block

    ID  shift, and go to state 22


state 17

    1 program_declaration: CLASS PROGRAM CURLY_OPEN field_declarations method_declarations CURLY_CLOSE .

    $default  reduce using rule 1 (program_declaration)


state 18

   14 method_declaration: var_type . ID OPEN parameter_declarations CLOSE code_block

    ID  shift, and go to state 23


state 19

   12 method_declarations: method_declarations method_declaration .

    $default  reduce using rule 12 (method_declarations)


state 20

   10 field_name: ID SQUARE_OPEN . int_literal SQUARE_CLOSE

    NUM          shift, and go to state 24
    HEX_LITERAL  shift, and go to state 25

    int_literal  go to state 26


state 21

    8 field_names: field_names COMMA . field_name

    ID  shift, and go to state 12

    field_name  go to state 27


state 22

   13 method_declaration: VOID ID . OPEN parameter_declarations CLOSE code_block

    OPEN  shift, and go to state 28


state 23

   14 method_declaration: var_type ID . OPEN parameter_declarations CLOSE code_block

    OPEN  shift, and go to state 29


state 24

   87 int_literal: NUM .

    $default  reduce using rule 87 (int_literal)


state 25

   88 int_literal: HEX_LITERAL .

    $default  reduce using rule 88 (int_literal)


state 26

   10 field_name: ID SQUARE_OPEN int_literal . SQUARE_CLOSE

    SQUARE_CLOSE  shift, and go to state 30


state 27

    8 field_names: field_names COMMA field_name .

    $default  reduce using rule 8 (field_names)


state 28

   13 method_declaration: VOID ID OPEN . parameter_declarations CLOSE code_block

    INT      shift, and go to state 7
    BOOLEAN  shift, and go to state 8

    $default  reduce using rule 15 (parameter_declarations)

    var_type                         go to state 31
    parameter_declarations           go to state 32
    non_empty_parameter_declaration  go to state 33
    parameter_declaration            go to state 34


state 29

   14 method_declaration: var_type ID OPEN . parameter_declarations CLOSE code_block

    INT      shift, and go to state 7
    BOOLEAN  shift, and go to state 8

    $default  reduce using rule 15 (parameter_declarations)

    var_type                         go to state 31
    parameter_declarations           go to state 35
    non_empty_parameter_declaration  go to state 33
    parameter_declaration            go to state 34


state 30

   10 field_name: ID SQUARE_OPEN int_literal SQUARE_CLOSE .

    $default  reduce using rule 10 (field_name)


state 31

   19 parameter_declaration: var_type . ID

    ID  shift, and go to state 36


state 32

   13 method_declaration: VOID ID OPEN parameter_declarations . CLOSE code_block

    CLOSE  shift, and go to state 37


state 33

   16 parameter_declarations: non_empty_parameter_declaration .
   18 non_empty_parameter_declaration: non_empty_parameter_declaration . COMMA parameter_declaration

    COMMA  shift, and go to state 38

    $default  reduce using rule 16 (parameter_declarations)


state 34

   17 non_empty_parameter_declaration: parameter_declaration .

    $default  reduce using rule 17 (non_empty_parameter_declaration)


state 35

   14 method_declaration: var_type ID OPEN parameter_declarations . CLOSE code_block

    CLOSE  shift, and go to state 39


state 36

   19 parameter_declaration: var_type ID .

    $default  reduce using rule 19 (parameter_declaration)


state 37

   13 method_declaration: VOID ID OPEN parameter_declarations CLOSE . code_block

    CURLY_OPEN  shift, and go to state 40

    code_block  go to state 41


state 38

   18 non_empty_parameter_declaration: non_empty_parameter_declaration COMMA . parameter_declaration

    INT      shift, and go to state 7
    BOOLEAN  shift, and go to state 8

    var_type               go to state 31
    parameter_declaration  go to state 42


state 39

   14 method_declaration: var_type ID OPEN parameter_declarations CLOSE . code_block

    CURLY_OPEN  shift, and go to state 40

    code_block  go to state 43


state 40

   20 code_block: CURLY_OPEN . block CURLY_CLOSE

    CURLY_CLOSE  reduce using rule 21 (block)
    CURLY_CLOSE  [reduce using rule 23 (var_declarations)]
    $default     reduce using rule 23 (var_declarations)

    block             go to state 44
    var_declarations  go to state 45


state 41

   13 method_declaration: VOID ID OPEN parameter_declarations CLOSE code_block .

    $default  reduce using rule 13 (method_declaration)


state 42

   18 non_empty_parameter_declaration: non_empty_parameter_declaration COMMA parameter_declaration .

    $default  reduce using rule 18 (non_empty_parameter_declaration)


state 43

   14 method_declaration: var_type ID OPEN parameter_declarations CLOSE code_block .

    $default  reduce using rule 14 (method_declaration)


state 44

   20 code_block: CURLY_OPEN block . CURLY_CLOSE

    CURLY_CLOSE  shift, and go to state 46


state 45

   22 block: var_declarations . statements
   24 var_declarations: var_declarations . var_declaration SEMI_COLON

    CALLOUT     shift, and go to state 47
    INT         shift, and go to state 7
    BOOLEAN     shift, and go to state 8
    BREAK       shift, and go to state 48
    CONTINUE    shift, and go to state 49
    RETURN      shift, and go to state 50
    FOR         shift, and go to state 51
    IF          shift, and go to state 52
    ID          shift, and go to state 53
    CURLY_OPEN  shift, and go to state 40

    $default  reduce using rule 28 (statements)

    var_type         go to state 54
    code_block       go to state 55
    var_declaration  go to state 56
    statements       go to state 57
    statement        go to state 58
    location         go to state 59
    method_call      go to state 60


state 46

   20 code_block: CURLY_OPEN block CURLY_CLOSE .

    $default  reduce using rule 20 (code_block)


state 47

   45 method_call: CALLOUT . OPEN string_literal CLOSE
   46            | CALLOUT . OPEN string_literal COMMA non_empty_callout_args CLOSE

    OPEN  shift, and go to state 61


state 48

   35 statement: BREAK . SEMI_COLON

    SEMI_COLON  shift, and go to state 62


state 49

   36 statement: CONTINUE . SEMI_COLON

    SEMI_COLON  shift, and go to state 63


state 50

   34 statement: RETURN . return_value SEMI_COLON

    CALLOUT       shift, and go to state 47
    TRUE          shift, and go to state 64
    FALSE         shift, and go to state 65
    NUM           shift, and go to state 24
    HEX_LITERAL   shift, and go to state 25
    CHAR_LITERAL  shift, and go to state 66
    ID            shift, and go to state 53
    SUBTRACT      shift, and go to state 67
    NOT           shift, and go to state 68
    OPEN          shift, and go to state 69

    $default  reduce using rule 40 (return_value)

    return_value  go to state 70
    location      go to state 71
    method_call   go to state 72
    expr          go to state 73
    literal       go to state 74
    char_literal  go to state 75
    int_literal   go to state 76
    bool_literal  go to state 77


state 51

   33 statement: FOR . ID EQUAL expr COMMA expr code_block

    ID  shift, and go to state 78


state 52

   32 statement: IF . OPEN expr CLOSE code_block possible_else

    OPEN  shift, and go to state 79


state 53

   42 location: ID .
   43         | ID . SQUARE_OPEN expr SQUARE_CLOSE
   44 method_call: ID . OPEN method_call_args CLOSE

    SQUARE_OPEN  shift, and go to state 80
    OPEN         shift, and go to state 81

    $default  reduce using rule 42 (location)


state 54

   25 var_declaration: var_type . var_names

    ID  shift, and go to state 82

    var_names  go to state 83


state 55

   37 statement: code_block .

    $default  reduce using rule 37 (statement)


state 56

   24 var_declarations: var_declarations var_declaration . SEMI_COLON

    SEMI_COLON  shift, and go to state 84


state 57

   22 block: var_declarations statements .

    $default  reduce using rule 22 (block)


state 58

   29 statements: statement . statements

    CALLOUT     shift, and go to state 47
    BREAK       shift, and go to state 48
    CONTINUE    shift, and go to state 49
    RETURN      shift, and go to state 50
    FOR         shift, and go to state 51
    IF          shift, and go to state 52
    ID          shift, and go to state 53
    CURLY_OPEN  shift, and go to state 40

    $default  reduce using rule 28 (statements)

    code_block   go to state 55
    statements   go to state 85
    statement    go to state 58
    location     go to state 59
    method_call  go to state 60


state 59

   30 statement: location . assign_op expr SEMI_COLON

    EQUAL        shift, and go to state 86
    PLUS_EQUAL   shift, and go to state 87
    MINUS_EQUAL  shift, and go to state 88

    assign_op  go to state 89


state 60

   31 statement: method_call . SEMI_COLON

    SEMI_COLON  shift, and go to state 90


state 61

   45 method_call: CALLOUT OPEN . string_literal CLOSE
   46            | CALLOUT OPEN . string_literal COMMA non_empty_callout_args CLOSE

    STRING  shift, and go to state 91

    string_literal  go to state 92


state 62

   35 statement: BREAK SEMI_COLON .

    $default  reduce using rule 35 (statement)


state 63

   36 statement: CONTINUE SEMI_COLON .

    $default  reduce using rule 36 (statement)


state 64

   89 bool_literal: TRUE .

    $default  reduce using rule 89 (bool_literal)


state 65

   90 bool_literal: FALSE .

    $default  reduce using rule 90 (bool_literal)


state 66

   86 char_literal: CHAR_LITERAL .

    $default  reduce using rule 86 (char_literal)


state 67

   60 expr: SUBTRACT . expr

    CALLOUT       shift, and go to state 47
    TRUE          shift, and go to state 64
    FALSE         shift, and go to state 65
    NUM           shift, and go to state 24
    HEX_LITERAL   shift, and go to state 25
    CHAR_LITERAL  shift, and go to state 66
    ID            shift, and go to state 53
    SUBTRACT      shift, and go to state 67
    NOT           shift, and go to state 68
    OPEN          shift, and go to state 69

    location      go to state 71
    method_call   go to state 72
    expr          go to state 93
    literal       go to state 74
    char_literal  go to state 75
    int_literal   go to state 76
    bool_literal  go to state 77


state 68

   61 expr: NOT . expr

    CALLOUT       shift, and go to state 47
    TRUE          shift, and go to state 64
    FALSE         shift, and go to state 65
    NUM           shift, and go to state 24
    HEX_LITERAL   shift, and go to state 25
    CHAR_LITERAL  shift, and go to state 66
    ID            shift, and go to state 53
    SUBTRACT      shift, and go to state 67
    NOT           shift, and go to state 68
    OPEN          shift, and go to state 69

    location      go to state 71
    method_call   go to state 72
    expr          go to state 94
    literal       go to state 74
    char_literal  go to state 75
    int_literal   go to state 76
    bool_literal  go to state 77


state 69

   62 expr: OPEN . expr CLOSE

    CALLOUT       shift, and go to state 47
    TRUE          shift, and go to state 64
    FALSE         shift, and go to state 65
    NUM           shift, and go to state 24
    HEX_LITERAL   shift, and go to state 25
    CHAR_LITERAL  shift, and go to state 66
    ID            shift, and go to state 53
    SUBTRACT      shift, and go to state 67
    NOT           shift, and go to state 68
    OPEN          shift, and go to state 69

    location      go to state 71
    method_call   go to state 72
    expr          go to state 95
    literal       go to state 74
    char_literal  go to state 75
    int_literal   go to state 76
    bool_literal  go to state 77


state 70

   34 statement: RETURN return_value . SEMI_COLON

    SEMI_COLON  shift, and go to state 96


state 71

   56 expr: location .

    $default  reduce using rule 56 (expr)


state 72

   57 expr: method_call .

    $default  reduce using rule 57 (expr)


state 73

   41 return_value: expr .
   59 expr: expr . bin_op expr

    ADD              shift, and go to state 97
    SUBTRACT         shift, and go to state 98
    MULTIPLY         shift, and go to state 99
    DIVIDE           shift, and go to state 100
    EQUALITY         shift, and go to state 101
    NOT_EQUAL        shift, and go to state 102
    GREATER_EQUAL    shift, and go to state 103
    LESS_EQUAL       shift, and go to state 104
    GREATER          shift, and go to state 105
    LESS             shift, and go to state 106
    CONDITIONAL_AND  shift, and go to state 107
    CONDITIONAL_OR   shift, and go to state 108
    MODULO           shift, and go to state 109

    $default  reduce using rule 41 (return_value)

    bin_op    go to state 110
    arith_op  go to state 111
    rel_op    go to state 112
    eq_op     go to state 113
    cond_op   go to state 114


state 74

   58 expr: literal .

    $default  reduce using rule 58 (expr)


state 75

   83 literal: char_literal .

    $default  reduce using rule 83 (literal)


state 76

   85 literal: int_literal .

    $default  reduce using rule 85 (literal)


state 77

   84 literal: bool_literal .

    $default  reduce using rule 84 (literal)


state 78

   33 statement: FOR ID . EQUAL expr COMMA expr code_block

    EQUAL  shift, and go to state 115


state 79

   32 statement: IF OPEN . expr CLOSE code_block possible_else

    CALLOUT       shift, and go to state 47
    TRUE          shift, and go to state 64
    FALSE         shift, and go to state 65
    NUM           shift, and go to state 24
    HEX_LITERAL   shift, and go to state 25
    CHAR_LITERAL  shift, and go to state 66
    ID            shift, and go to state 53
    SUBTRACT      shift, and go to state 67
    NOT           shift, and go to state 68
    OPEN          shift, and go to state 69

    location      go to state 71
    method_call   go to state 72
    expr          go to state 116
    literal       go to state 74
    char_literal  go to state 75
    int_literal   go to state 76
    bool_literal  go to state 77


state 80

   43 location: ID SQUARE_OPEN . expr SQUARE_CLOSE

    CALLOUT       shift, and go to state 47
    TRUE          shift, and go to state 64
    FALSE         shift, and go to state 65
    NUM           shift, and go to state 24
    HEX_LITERAL   shift, and go to state 25
    CHAR_LITERAL  shift, and go to state 66
    ID            shift, and go to state 53
    SUBTRACT      shift, and go to state 67
    NOT           shift, and go to state 68
    OPEN          shift, and go to state 69

    location      go to state 71
    method_call   go to state 72
    expr          go to state 117
    literal       go to state 74
    char_literal  go to state 75
    int_literal   go to state 76
    bool_literal  go to state 77


state 81

   44 method_call: ID OPEN . method_call_args CLOSE

    CALLOUT       shift, and go to state 47
    TRUE          shift, and go to state 64
    FALSE         shift, and go to state 65
    NUM           shift, and go to state 24
    HEX_LITERAL   shift, and go to state 25
    CHAR_LITERAL  shift, and go to state 66
    ID            shift, and go to state 53
    SUBTRACT      shift, and go to state 67
    NOT           shift, and go to state 68
    OPEN          shift, and go to state 69

    $default  reduce using rule 47 (method_call_args)

    location                    go to state 71
    method_call                 go to state 72
    method_call_args            go to state 118
    non_empty_method_call_args  go to state 119
    method_call_arg             go to state 120
    expr                        go to state 121
    literal                     go to state 74
    char_literal                go to state 75
    int_literal                 go to state 76
    bool_literal                go to state 77


state 82

   26 var_names: ID .
   27          | ID . COMMA var_names

    COMMA  shift, and go to state 122

    $default  reduce using rule 26 (var_names)


state 83

   25 var_declaration: var_type var_names .

    $default  reduce using rule 25 (var_declaration)


state 84

   24 var_declarations: var_declarations var_declaration SEMI_COLON .

    $default  reduce using rule 24 (var_declarations)


state 85

   29 statements: statement statements .

    $default  reduce using rule 29 (statements)


state 86

   63 assign_op: EQUAL .

    $default  reduce using rule 63 (assign_op)


state 87

   64 assign_op: PLUS_EQUAL .

    $default  reduce using rule 64 (assign_op)


state 88

   65 assign_op: MINUS_EQUAL .

    $default  reduce using rule 65 (assign_op)


state 89

   30 statement: location assign_op . expr SEMI_COLON

    CALLOUT       shift, and go to state 47
    TRUE          shift, and go to state 64
    FALSE         shift, and go to state 65
    NUM           shift, and go to state 24
    HEX_LITERAL   shift, and go to state 25
    CHAR_LITERAL  shift, and go to state 66
    ID            shift, and go to state 53
    SUBTRACT      shift, and go to state 67
    NOT           shift, and go to state 68
    OPEN          shift, and go to state 69

    location      go to state 71
    method_call   go to state 72
    expr          go to state 123
    literal       go to state 74
    char_literal  go to state 75
    int_literal   go to state 76
    bool_literal  go to state 77


state 90

   31 statement: method_call SEMI_COLON .

    $default  reduce using rule 31 (statement)


state 91

   91 string_literal: STRING .

    $default  reduce using rule 91 (string_literal)


state 92

   45 method_call: CALLOUT OPEN string_literal . CLOSE
   46            | CALLOUT OPEN string_literal . COMMA non_empty_callout_args CLOSE

    CLOSE  shift, and go to state 124
    COMMA  shift, and go to state 125


state 93

   59 expr: expr . bin_op expr
   60     | SUBTRACT expr .

    ADD              shift, and go to state 97
    SUBTRACT         shift, and go to state 98
    MULTIPLY         shift, and go to state 99
    DIVIDE           shift, and go to state 100
    EQUALITY         shift, and go to state 101
    NOT_EQUAL        shift, and go to state 102
    GREATER_EQUAL    shift, and go to state 103
    LESS_EQUAL       shift, and go to state 104
    GREATER          shift, and go to state 105
    LESS             shift, and go to state 106
    CONDITIONAL_AND  shift, and go to state 107
    CONDITIONAL_OR   shift, and go to state 108
    MODULO           shift, and go to state 109

    ADD              [reduce using rule 60 (expr)]
    SUBTRACT         [reduce using rule 60 (expr)]
    MULTIPLY         [reduce using rule 60 (expr)]
    DIVIDE           [reduce using rule 60 (expr)]
    EQUALITY         [reduce using rule 60 (expr)]
    NOT_EQUAL        [reduce using rule 60 (expr)]
    GREATER_EQUAL    [reduce using rule 60 (expr)]
    LESS_EQUAL       [reduce using rule 60 (expr)]
    GREATER          [reduce using rule 60 (expr)]
    LESS             [reduce using rule 60 (expr)]
    CONDITIONAL_AND  [reduce using rule 60 (expr)]
    CONDITIONAL_OR   [reduce using rule 60 (expr)]
    MODULO           [reduce using rule 60 (expr)]
    $default         reduce using rule 60 (expr)

    bin_op    go to state 110
    arith_op  go to state 111
    rel_op    go to state 112
    eq_op     go to state 113
    cond_op   go to state 114


state 94

   59 expr: expr . bin_op expr
   61     | NOT expr .

    ADD              shift, and go to state 97
    SUBTRACT         shift, and go to state 98
    MULTIPLY         shift, and go to state 99
    DIVIDE           shift, and go to state 100
    EQUALITY         shift, and go to state 101
    NOT_EQUAL        shift, and go to state 102
    GREATER_EQUAL    shift, and go to state 103
    LESS_EQUAL       shift, and go to state 104
    GREATER          shift, and go to state 105
    LESS             shift, and go to state 106
    CONDITIONAL_AND  shift, and go to state 107
    CONDITIONAL_OR   shift, and go to state 108
    MODULO           shift, and go to state 109

    ADD              [reduce using rule 61 (expr)]
    SUBTRACT         [reduce using rule 61 (expr)]
    MULTIPLY         [reduce using rule 61 (expr)]
    DIVIDE           [reduce using rule 61 (expr)]
    EQUALITY         [reduce using rule 61 (expr)]
    NOT_EQUAL        [reduce using rule 61 (expr)]
    GREATER_EQUAL    [reduce using rule 61 (expr)]
    LESS_EQUAL       [reduce using rule 61 (expr)]
    GREATER          [reduce using rule 61 (expr)]
    LESS             [reduce using rule 61 (expr)]
    CONDITIONAL_AND  [reduce using rule 61 (expr)]
    CONDITIONAL_OR   [reduce using rule 61 (expr)]
    MODULO           [reduce using rule 61 (expr)]
    $default         reduce using rule 61 (expr)

    bin_op    go to state 110
    arith_op  go to state 111
    rel_op    go to state 112
    eq_op     go to state 113
    cond_op   go to state 114


state 95

   59 expr: expr . bin_op expr
   62     | OPEN expr . CLOSE

    ADD              shift, and go to state 97
    SUBTRACT         shift, and go to state 98
    MULTIPLY         shift, and go to state 99
    DIVIDE           shift, and go to state 100
    EQUALITY         shift, and go to state 101
    NOT_EQUAL        shift, and go to state 102
    GREATER_EQUAL    shift, and go to state 103
    LESS_EQUAL       shift, and go to state 104
    GREATER          shift, and go to state 105
    LESS             shift, and go to state 106
    CONDITIONAL_AND  shift, and go to state 107
    CONDITIONAL_OR   shift, and go to state 108
    MODULO           shift, and go to state 109
    CLOSE            shift, and go to state 126

    bin_op    go to state 110
    arith_op  go to state 111
    rel_op    go to state 112
    eq_op     go to state 113
    cond_op   go to state 114


state 96

   34 statement: RETURN return_value SEMI_COLON .

    $default  reduce using rule 34 (statement)


state 97

   70 arith_op: ADD .

    $default  reduce using rule 70 (arith_op)


state 98

   71 arith_op: SUBTRACT .

    $default  reduce using rule 71 (arith_op)


state 99

   72 arith_op: MULTIPLY .

    $default  reduce using rule 72 (arith_op)


state 100

   73 arith_op: DIVIDE .

    $default  reduce using rule 73 (arith_op)


state 101

   79 eq_op: EQUALITY .

    $default  reduce using rule 79 (eq_op)


state 102

   80 eq_op: NOT_EQUAL .

    $default  reduce using rule 80 (eq_op)


state 103

   77 rel_op: GREATER_EQUAL .

    $default  reduce using rule 77 (rel_op)


state 104

   78 rel_op: LESS_EQUAL .

    $default  reduce using rule 78 (rel_op)


state 105

   75 rel_op: GREATER .

    $default  reduce using rule 75 (rel_op)


state 106

   76 rel_op: LESS .

    $default  reduce using rule 76 (rel_op)


state 107

   81 cond_op: CONDITIONAL_AND .

    $default  reduce using rule 81 (cond_op)


state 108

   82 cond_op: CONDITIONAL_OR .

    $default  reduce using rule 82 (cond_op)


state 109

   74 arith_op: MODULO .

    $default  reduce using rule 74 (arith_op)


state 110

   59 expr: expr bin_op . expr

    CALLOUT       shift, and go to state 47
    TRUE          shift, and go to state 64
    FALSE         shift, and go to state 65
    NUM           shift, and go to state 24
    HEX_LITERAL   shift, and go to state 25
    CHAR_LITERAL  shift, and go to state 66
    ID            shift, and go to state 53
    SUBTRACT      shift, and go to state 67
    NOT           shift, and go to state 68
    OPEN          shift, and go to state 69

    location      go to state 71
    method_call   go to state 72
    expr          go to state 127
    literal       go to state 74
    char_literal  go to state 75
    int_literal   go to state 76
    bool_literal  go to state 77


state 111

   66 bin_op: arith_op .

    $default  reduce using rule 66 (bin_op)


state 112

   67 bin_op: rel_op .

    $default  reduce using rule 67 (bin_op)


state 113

   68 bin_op: eq_op .

    $default  reduce using rule 68 (bin_op)


state 114

   69 bin_op: cond_op .

    $default  reduce using rule 69 (bin_op)


state 115

   33 statement: FOR ID EQUAL . expr COMMA expr code_block

    CALLOUT       shift, and go to state 47
    TRUE          shift, and go to state 64
    FALSE         shift, and go to state 65
    NUM           shift, and go to state 24
    HEX_LITERAL   shift, and go to state 25
    CHAR_LITERAL  shift, and go to state 66
    ID            shift, and go to state 53
    SUBTRACT      shift, and go to state 67
    NOT           shift, and go to state 68
    OPEN          shift, and go to state 69

    location      go to state 71
    method_call   go to state 72
    expr          go to state 128
    literal       go to state 74
    char_literal  go to state 75
    int_literal   go to state 76
    bool_literal  go to state 77


state 116

   32 statement: IF OPEN expr . CLOSE code_block possible_else
   59 expr: expr . bin_op expr

    ADD              shift, and go to state 97
    SUBTRACT         shift, and go to state 98
    MULTIPLY         shift, and go to state 99
    DIVIDE           shift, and go to state 100
    EQUALITY         shift, and go to state 101
    NOT_EQUAL        shift, and go to state 102
    GREATER_EQUAL    shift, and go to state 103
    LESS_EQUAL       shift, and go to state 104
    GREATER          shift, and go to state 105
    LESS             shift, and go to state 106
    CONDITIONAL_AND  shift, and go to state 107
    CONDITIONAL_OR   shift, and go to state 108
    MODULO           shift, and go to state 109
    CLOSE            shift, and go to state 129

    bin_op    go to state 110
    arith_op  go to state 111
    rel_op    go to state 112
    eq_op     go to state 113
    cond_op   go to state 114


state 117

   43 location: ID SQUARE_OPEN expr . SQUARE_CLOSE
   59 expr: expr . bin_op expr

    ADD              shift, and go to state 97
    SUBTRACT         shift, and go to state 98
    MULTIPLY         shift, and go to state 99
    DIVIDE           shift, and go to state 100
    EQUALITY         shift, and go to state 101
    NOT_EQUAL        shift, and go to state 102
    GREATER_EQUAL    shift, and go to state 103
    LESS_EQUAL       shift, and go to state 104
    GREATER          shift, and go to state 105
    LESS             shift, and go to state 106
    CONDITIONAL_AND  shift, and go to state 107
    CONDITIONAL_OR   shift, and go to state 108
    MODULO           shift, and go to state 109
    SQUARE_CLOSE     shift, and go to state 130

    bin_op    go to state 110
    arith_op  go to state 111
    rel_op    go to state 112
    eq_op     go to state 113
    cond_op   go to state 114


state 118

   44 method_call: ID OPEN method_call_args . CLOSE

    CLOSE  shift, and go to state 131


state 119

   48 method_call_args: non_empty_method_call_args .
   50 non_empty_method_call_args: non_empty_method_call_args . COMMA method_call_arg

    COMMA  shift, and go to state 132

    $default  reduce using rule 48 (method_call_args)


state 120

   49 non_empty_method_call_args: method_call_arg .

    $default  reduce using rule 49 (non_empty_method_call_args)


state 121

   51 method_call_arg: expr .
   59 expr: expr . bin_op expr

    ADD              shift, and go to state 97
    SUBTRACT         shift, and go to state 98
    MULTIPLY         shift, and go to state 99
    DIVIDE           shift, and go to state 100
    EQUALITY         shift, and go to state 101
    NOT_EQUAL        shift, and go to state 102
    GREATER_EQUAL    shift, and go to state 103
    LESS_EQUAL       shift, and go to state 104
    GREATER          shift, and go to state 105
    LESS             shift, and go to state 106
    CONDITIONAL_AND  shift, and go to state 107
    CONDITIONAL_OR   shift, and go to state 108
    MODULO           shift, and go to state 109

    $default  reduce using rule 51 (method_call_arg)

    bin_op    go to state 110
    arith_op  go to state 111
    rel_op    go to state 112
    eq_op     go to state 113
    cond_op   go to state 114


state 122

   27 var_names: ID COMMA . var_names

    ID  shift, and go to state 82

    var_names  go to state 133


state 123

   30 statement: location assign_op expr . SEMI_COLON
   59 expr: expr . bin_op expr

    ADD              shift, and go to state 97
    SUBTRACT         shift, and go to state 98
    MULTIPLY         shift, and go to state 99
    DIVIDE           shift, and go to state 100
    EQUALITY         shift, and go to state 101
    NOT_EQUAL        shift, and go to state 102
    GREATER_EQUAL    shift, and go to state 103
    LESS_EQUAL       shift, and go to state 104
    GREATER          shift, and go to state 105
    LESS             shift, and go to state 106
    CONDITIONAL_AND  shift, and go to state 107
    CONDITIONAL_OR   shift, and go to state 108
    MODULO           shift, and go to state 109
    SEMI_COLON       shift, and go to state 134

    bin_op    go to state 110
    arith_op  go to state 111
    rel_op    go to state 112
    eq_op     go to state 113
    cond_op   go to state 114


state 124

   45 method_call: CALLOUT OPEN string_literal CLOSE .

    $default  reduce using rule 45 (method_call)


state 125

   46 method_call: CALLOUT OPEN string_literal COMMA . non_empty_callout_args CLOSE

    CALLOUT       shift, and go to state 47
    TRUE          shift, and go to state 64
    FALSE         shift, and go to state 65
    NUM           shift, and go to state 24
    HEX_LITERAL   shift, and go to state 25
    CHAR_LITERAL  shift, and go to state 66
    STRING        shift, and go to state 91
    ID            shift, and go to state 53
    SUBTRACT      shift, and go to state 67
    NOT           shift, and go to state 68
    OPEN          shift, and go to state 69

    location                go to state 71
    method_call             go to state 72
    non_empty_callout_args  go to state 135
    callout_arg             go to state 136
    expr                    go to state 137
    literal                 go to state 74
    char_literal            go to state 75
    int_literal             go to state 76
    bool_literal            go to state 77
    string_literal          go to state 138


state 126

   62 expr: OPEN expr CLOSE .

    $default  reduce using rule 62 (expr)


state 127

   59 expr: expr . bin_op expr
   59     | expr bin_op expr .

    ADD              shift, and go to state 97
    SUBTRACT         shift, and go to state 98
    MULTIPLY         shift, and go to state 99
    DIVIDE           shift, and go to state 100
    EQUALITY         shift, and go to state 101
    NOT_EQUAL        shift, and go to state 102
    GREATER_EQUAL    shift, and go to state 103
    LESS_EQUAL       shift, and go to state 104
    GREATER          shift, and go to state 105
    LESS             shift, and go to state 106
    CONDITIONAL_AND  shift, and go to state 107
    CONDITIONAL_OR   shift, and go to state 108
    MODULO           shift, and go to state 109

    ADD              [reduce using rule 59 (expr)]
    SUBTRACT         [reduce using rule 59 (expr)]
    MULTIPLY         [reduce using rule 59 (expr)]
    DIVIDE           [reduce using rule 59 (expr)]
    EQUALITY         [reduce using rule 59 (expr)]
    NOT_EQUAL        [reduce using rule 59 (expr)]
    GREATER_EQUAL    [reduce using rule 59 (expr)]
    LESS_EQUAL       [reduce using rule 59 (expr)]
    GREATER          [reduce using rule 59 (expr)]
    LESS             [reduce using rule 59 (expr)]
    CONDITIONAL_AND  [reduce using rule 59 (expr)]
    CONDITIONAL_OR   [reduce using rule 59 (expr)]
    MODULO           [reduce using rule 59 (expr)]
    $default         reduce using rule 59 (expr)

    bin_op    go to state 110
    arith_op  go to state 111
    rel_op    go to state 112
    eq_op     go to state 113
    cond_op   go to state 114


state 128

   33 statement: FOR ID EQUAL expr . COMMA expr code_block
   59 expr: expr . bin_op expr

    ADD              shift, and go to state 97
    SUBTRACT         shift, and go to state 98
    MULTIPLY         shift, and go to state 99
    DIVIDE           shift, and go to state 100
    EQUALITY         shift, and go to state 101
    NOT_EQUAL        shift, and go to state 102
    GREATER_EQUAL    shift, and go to state 103
    LESS_EQUAL       shift, and go to state 104
    GREATER          shift, and go to state 105
    LESS             shift, and go to state 106
    CONDITIONAL_AND  shift, and go to state 107
    CONDITIONAL_OR   shift, and go to state 108
    MODULO           shift, and go to state 109
    COMMA            shift, and go to state 139

    bin_op    go to state 110
    arith_op  go to state 111
    rel_op    go to state 112
    eq_op     go to state 113
    cond_op   go to state 114


state 129

   32 statement: IF OPEN expr CLOSE . code_block possible_else

    CURLY_OPEN  shift, and go to state 40

    code_block  go to state 140


state 130

   43 location: ID SQUARE_OPEN expr SQUARE_CLOSE .

    $default  reduce using rule 43 (location)


state 131

   44 method_call: ID OPEN method_call_args CLOSE .

    $default  reduce using rule 44 (method_call)


state 132

   50 non_empty_method_call_args: non_empty_method_call_args COMMA . method_call_arg

    CALLOUT       shift, and go to state 47
    TRUE          shift, and go to state 64
    FALSE         shift, and go to state 65
    NUM           shift, and go to state 24
    HEX_LITERAL   shift, and go to state 25
    CHAR_LITERAL  shift, and go to state 66
    ID            shift, and go to state 53
    SUBTRACT      shift, and go to state 67
    NOT           shift, and go to state 68
    OPEN          shift, and go to state 69

    location         go to state 71
    method_call      go to state 72
    method_call_arg  go to state 141
    expr             go to state 121
    literal          go to state 74
    char_literal     go to state 75
    int_literal      go to state 76
    bool_literal     go to state 77


state 133

   27 var_names: ID COMMA var_names .

    $default  reduce using rule 27 (var_names)


state 134

   30 statement: location assign_op expr SEMI_COLON .

    $default  reduce using rule 30 (statement)


state 135

   46 method_call: CALLOUT OPEN string_literal COMMA non_empty_callout_args . CLOSE
   53 non_empty_callout_args: non_empty_callout_args . COMMA callout_arg

    CLOSE  shift, and go to state 142
    COMMA  shift, and go to state 143


state 136

   52 non_empty_callout_args: callout_arg .

    $default  reduce using rule 52 (non_empty_callout_args)


state 137

   54 callout_arg: expr .
   59 expr: expr . bin_op expr

    ADD              shift, and go to state 97
    SUBTRACT         shift, and go to state 98
    MULTIPLY         shift, and go to state 99
    DIVIDE           shift, and go to state 100
    EQUALITY         shift, and go to state 101
    NOT_EQUAL        shift, and go to state 102
    GREATER_EQUAL    shift, and go to state 103
    LESS_EQUAL       shift, and go to state 104
    GREATER          shift, and go to state 105
    LESS             shift, and go to state 106
    CONDITIONAL_AND  shift, and go to state 107
    CONDITIONAL_OR   shift, and go to state 108
    MODULO           shift, and go to state 109

    $default  reduce using rule 54 (callout_arg)

    bin_op    go to state 110
    arith_op  go to state 111
    rel_op    go to state 112
    eq_op     go to state 113
    cond_op   go to state 114


state 138

   55 callout_arg: string_literal .

    $default  reduce using rule 55 (callout_arg)


state 139

   33 statement: FOR ID EQUAL expr COMMA . expr code_block

    CALLOUT       shift, and go to state 47
    TRUE          shift, and go to state 64
    FALSE         shift, and go to state 65
    NUM           shift, and go to state 24
    HEX_LITERAL   shift, and go to state 25
    CHAR_LITERAL  shift, and go to state 66
    ID            shift, and go to state 53
    SUBTRACT      shift, and go to state 67
    NOT           shift, and go to state 68
    OPEN          shift, and go to state 69

    location      go to state 71
    method_call   go to state 72
    expr          go to state 144
    literal       go to state 74
    char_literal  go to state 75
    int_literal   go to state 76
    bool_literal  go to state 77


state 140

   32 statement: IF OPEN expr CLOSE code_block . possible_else

    ELSE  shift, and go to state 145

    $default  reduce using rule 38 (possible_else)

    possible_else  go to state 146


state 141

   50 non_empty_method_call_args: non_empty_method_call_args COMMA method_call_arg .

    $default  reduce using rule 50 (non_empty_method_call_args)


state 142

   46 method_call: CALLOUT OPEN string_literal COMMA non_empty_callout_args CLOSE .

    $default  reduce using rule 46 (method_call)


state 143

   53 non_empty_callout_args: non_empty_callout_args COMMA . callout_arg

    CALLOUT       shift, and go to state 47
    TRUE          shift, and go to state 64
    FALSE         shift, and go to state 65
    NUM           shift, and go to state 24
    HEX_LITERAL   shift, and go to state 25
    CHAR_LITERAL  shift, and go to state 66
    STRING        shift, and go to state 91
    ID            shift, and go to state 53
    SUBTRACT      shift, and go to state 67
    NOT           shift, and go to state 68
    OPEN          shift, and go to state 69

    location        go to state 71
    method_call     go to state 72
    callout_arg     go to state 147
    expr            go to state 137
    literal         go to state 74
    char_literal    go to state 75
    int_literal     go to state 76
    bool_literal    go to state 77
    string_literal  go to state 138


state 144

   33 statement: FOR ID EQUAL expr COMMA expr . code_block
   59 expr: expr . bin_op expr

    ADD              shift, and go to state 97
    SUBTRACT         shift, and go to state 98
    MULTIPLY         shift, and go to state 99
    DIVIDE           shift, and go to state 100
    EQUALITY         shift, and go to state 101
    NOT_EQUAL        shift, and go to state 102
    GREATER_EQUAL    shift, and go to state 103
    LESS_EQUAL       shift, and go to state 104
    GREATER          shift, and go to state 105
    LESS             shift, and go to state 106
    CONDITIONAL_AND  shift, and go to state 107
    CONDITIONAL_OR   shift, and go to state 108
    MODULO           shift, and go to state 109
    CURLY_OPEN       shift, and go to state 40

    code_block  go to state 148
    bin_op      go to state 110
    arith_op    go to state 111
    rel_op      go to state 112
    eq_op       go to state 113
    cond_op     go to state 114


state 145

   39 possible_else: ELSE . code_block

    CURLY_OPEN  shift, and go to state 40

    code_block  go to state 149


state 146

   32 statement: IF OPEN expr CLOSE code_block possible_else .

    $default  reduce using rule 32 (statement)


state 147

   53 non_empty_callout_args: non_empty_callout_args COMMA callout_arg .

    $default  reduce using rule 53 (non_empty_callout_args)


state 148

   33 statement: FOR ID EQUAL expr COMMA expr code_block .

    $default  reduce using rule 33 (statement)


state 149

   39 possible_else: ELSE code_block .

    $default  reduce using rule 39 (possible_else)
