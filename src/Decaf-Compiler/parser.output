Terminals which are not used

   ABSOLUTE


State 6 conflicts: 2 shift/reduce
State 40 conflicts: 1 reduce/reduce
State 104 conflicts: 13 shift/reduce
State 105 conflicts: 13 shift/reduce
State 131 conflicts: 13 shift/reduce
State 132 conflicts: 13 shift/reduce
State 133 conflicts: 13 shift/reduce
State 134 conflicts: 13 shift/reduce
State 135 conflicts: 13 shift/reduce
State 136 conflicts: 13 shift/reduce
State 137 conflicts: 13 shift/reduce
State 138 conflicts: 13 shift/reduce
State 139 conflicts: 13 shift/reduce
State 140 conflicts: 13 shift/reduce
State 141 conflicts: 13 shift/reduce
State 142 conflicts: 13 shift/reduce
State 143 conflicts: 13 shift/reduce


Grammar

    0 $accept: program_declaration $end

    1 program_declaration: CLASS PROGRAM CURLY_OPEN field_declarations method_declarations CURLY_CLOSE

    2 var_type: INT
    3         | BOOLEAN

    4 field_declarations: /* empty */
    5                   | field_declarations field_declaration SEMI_COLON

    6 field_declaration: var_type field_names

    7 field_names: field_name
    8            | field_names COMMA field_name

    9 field_name: ID
   10           | ID SQUARE_OPEN int_literal SQUARE_CLOSE

   11 method_declarations: /* empty */
   12                    | method_declarations method_declaration

   13 method_declaration: VOID ID OPEN parameter_declarations CLOSE code_block
   14                   | var_type ID OPEN parameter_declarations CLOSE code_block

   15 parameter_declarations: /* empty */
   16                       | non_empty_parameter_declaration

   17 non_empty_parameter_declaration: parameter_declaration
   18                                | non_empty_parameter_declaration COMMA parameter_declaration

   19 parameter_declaration: var_type ID

   20 code_block: CURLY_OPEN block CURLY_CLOSE

   21 block: /* empty */
   22      | var_declarations statements

   23 var_declarations: /* empty */
   24                 | var_declarations var_declaration SEMI_COLON

   25 var_declaration: var_type var_names

   26 var_names: ID
   27          | var_names COMMA ID

   28 statements: /* empty */
   29           | statements statement

   30 statement: assign_statement
   31          | method_call_statment
   32          | if_statement
   33          | for_statement
   34          | return_statement
   35          | terminal_statement
   36          | code_block

   37 assign_statement: location assign_op expr SEMI_COLON

   38 location: ID
   39         | ID SQUARE_OPEN expr SQUARE_CLOSE

   40 if_statement: IF OPEN expr CLOSE code_block else_statement

   41 else_statement: /* empty */
   42               | ELSE code_block

   43 for_statement: FOR ID EQUAL expr COMMA expr code_block

   44 return_statement: RETURN return_value SEMI_COLON

   45 return_value: /* empty */
   46             | expr

   47 terminal_statement: BREAK SEMI_COLON
   48                   | CONTINUE SEMI_COLON

   49 method_call_statment: method_call SEMI_COLON

   50 method_call: normal_call
   51            | callout_call

   52 normal_call: ID OPEN method_call_args CLOSE

   53 method_call_args: /* empty */
   54                 | non_empty_method_call_args

   55 non_empty_method_call_args: expr
   56                           | non_empty_method_call_args COMMA expr

   57 callout_call: CALLOUT OPEN string_literal CLOSE
   58             | CALLOUT OPEN string_literal COMMA non_empty_callout_args CLOSE

   59 non_empty_callout_args: callout_arg
   60                       | non_empty_callout_args COMMA callout_arg

   61 callout_arg: expr
   62            | string_literal

   63 expr: location
   64     | method_call
   65     | char_literal
   66     | int_literal
   67     | bool_literal
   68     | binary_expr
   69     | unary_expr
   70     | enclosed_expr

   71 binary_expr: expr ADD expr
   72            | expr SUBTRACT expr
   73            | expr MULTIPLY expr
   74            | expr DIVIDE expr
   75            | expr MODULO expr
   76            | expr GREATER expr
   77            | expr LESS expr
   78            | expr GREATER_EQUAL expr
   79            | expr LESS_EQUAL expr
   80            | expr EQUALITY expr
   81            | expr NOT_EQUAL expr
   82            | expr CONDITIONAL_AND expr
   83            | expr CONDITIONAL_OR expr

   84 enclosed_expr: OPEN expr CLOSE

   85 unary_expr: SUBTRACT expr
   86           | NOT expr

   87 assign_op: EQUAL
   88          | PLUS_EQUAL
   89          | MINUS_EQUAL

   90 char_literal: CHAR_LITERAL

   91 int_literal: NUM
   92            | HEX_LITERAL

   93 bool_literal: TRUE
   94             | FALSE

   95 string_literal: STRING


Terminals, with rules where they appear

$end (0) 0
error (256)
PROGRAM (258) 1
CLASS (259) 1
CALLOUT (260) 57 58
VOID (261) 13
INT (262) 2
BOOLEAN (263) 3
TRUE (264) 93
FALSE (265) 94
BREAK (266) 47
CONTINUE (267) 48
RETURN (268) 44
FOR (269) 43
IF (270) 40
ELSE (271) 42
NUM (272) 91
HEX_LITERAL (273) 92
CHAR_LITERAL (274) 90
STRING (275) 95
ID (276) 9 10 13 14 19 26 27 38 39 43 52
ADD (277) 71
SUBTRACT (278) 72 85
MULTIPLY (279) 73
DIVIDE (280) 74
EQUAL (281) 43 87
PLUS_EQUAL (282) 88
MINUS_EQUAL (283) 89
EQUALITY (284) 80
NOT_EQUAL (285) 81
GREATER_EQUAL (286) 78
LESS_EQUAL (287) 79
GREATER (288) 76
LESS (289) 77
CONDITIONAL_AND (290) 82
CONDITIONAL_OR (291) 83
NOT (292) 86
ABSOLUTE (293)
MODULO (294) 75
CURLY_OPEN (295) 1 20
CURLY_CLOSE (296) 1 20
SQUARE_OPEN (297) 10 39
SQUARE_CLOSE (298) 10 39
OPEN (299) 13 14 40 52 57 58 84
CLOSE (300) 13 14 40 52 57 58 84
SEMI_COLON (301) 5 24 37 44 47 48 49
COMMA (302) 8 18 27 43 56 58 60


Nonterminals, with rules where they appear

$accept (48)
    on left: 0
program_declaration (49)
    on left: 1, on right: 0
var_type (50)
    on left: 2 3, on right: 6 14 19 25
field_declarations (51)
    on left: 4 5, on right: 1 5
field_declaration (52)
    on left: 6, on right: 5
field_names (53)
    on left: 7 8, on right: 6 8
field_name (54)
    on left: 9 10, on right: 7 8
method_declarations (55)
    on left: 11 12, on right: 1 12
method_declaration (56)
    on left: 13 14, on right: 12
parameter_declarations (57)
    on left: 15 16, on right: 13 14
non_empty_parameter_declaration (58)
    on left: 17 18, on right: 16 18
parameter_declaration (59)
    on left: 19, on right: 17 18
code_block (60)
    on left: 20, on right: 13 14 36 40 42 43
block (61)
    on left: 21 22, on right: 20
var_declarations (62)
    on left: 23 24, on right: 22 24
var_declaration (63)
    on left: 25, on right: 24
var_names (64)
    on left: 26 27, on right: 25 27
statements (65)
    on left: 28 29, on right: 22 29
statement (66)
    on left: 30 31 32 33 34 35 36, on right: 29
assign_statement (67)
    on left: 37, on right: 30
location (68)
    on left: 38 39, on right: 37 63
if_statement (69)
    on left: 40, on right: 32
else_statement (70)
    on left: 41 42, on right: 40
for_statement (71)
    on left: 43, on right: 33
return_statement (72)
    on left: 44, on right: 34
return_value (73)
    on left: 45 46, on right: 44
terminal_statement (74)
    on left: 47 48, on right: 35
method_call_statment (75)
    on left: 49, on right: 31
method_call (76)
    on left: 50 51, on right: 49 64
normal_call (77)
    on left: 52, on right: 50
method_call_args (78)
    on left: 53 54, on right: 52
non_empty_method_call_args (79)
    on left: 55 56, on right: 54 56
callout_call (80)
    on left: 57 58, on right: 51
non_empty_callout_args (81)
    on left: 59 60, on right: 58 60
callout_arg (82)
    on left: 61 62, on right: 59 60
expr (83)
    on left: 63 64 65 66 67 68 69 70, on right: 37 39 40 43 46 55 56
    61 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86
binary_expr (84)
    on left: 71 72 73 74 75 76 77 78 79 80 81 82 83,
    on right: 68
enclosed_expr (85)
    on left: 84, on right: 70
unary_expr (86)
    on left: 85 86, on right: 69
assign_op (87)
    on left: 87 88 89, on right: 37
char_literal (88)
    on left: 90, on right: 65
int_literal (89)
    on left: 91 92, on right: 10 66
bool_literal (90)
    on left: 93 94, on right: 67
string_literal (91)
    on left: 95, on right: 57 58 62


state 0

    0 $accept: . program_declaration $end

    CLASS  shift, and go to state 1

    program_declaration  go to state 2


state 1

    1 program_declaration: CLASS . PROGRAM CURLY_OPEN field_declarations method_declarations CURLY_CLOSE

    PROGRAM  shift, and go to state 3


state 2

    0 $accept: program_declaration . $end

    $end  shift, and go to state 4


state 3

    1 program_declaration: CLASS PROGRAM . CURLY_OPEN field_declarations method_declarations CURLY_CLOSE

    CURLY_OPEN  shift, and go to state 5


state 4

    0 $accept: program_declaration $end .

    $default  accept


state 5

    1 program_declaration: CLASS PROGRAM CURLY_OPEN . field_declarations method_declarations CURLY_CLOSE

    $default  reduce using rule 4 (field_declarations)

    field_declarations  go to state 6


state 6

    1 program_declaration: CLASS PROGRAM CURLY_OPEN field_declarations . method_declarations CURLY_CLOSE
    5 field_declarations: field_declarations . field_declaration SEMI_COLON

    INT      shift, and go to state 7
    BOOLEAN  shift, and go to state 8

    INT       [reduce using rule 11 (method_declarations)]
    BOOLEAN   [reduce using rule 11 (method_declarations)]
    $default  reduce using rule 11 (method_declarations)

    var_type             go to state 9
    field_declaration    go to state 10
    method_declarations  go to state 11


state 7

    2 var_type: INT .

    $default  reduce using rule 2 (var_type)


state 8

    3 var_type: BOOLEAN .

    $default  reduce using rule 3 (var_type)


state 9

    6 field_declaration: var_type . field_names

    ID  shift, and go to state 12

    field_names  go to state 13
    field_name   go to state 14


state 10

    5 field_declarations: field_declarations field_declaration . SEMI_COLON

    SEMI_COLON  shift, and go to state 15


state 11

    1 program_declaration: CLASS PROGRAM CURLY_OPEN field_declarations method_declarations . CURLY_CLOSE
   12 method_declarations: method_declarations . method_declaration

    VOID         shift, and go to state 16
    INT          shift, and go to state 7
    BOOLEAN      shift, and go to state 8
    CURLY_CLOSE  shift, and go to state 17

    var_type            go to state 18
    method_declaration  go to state 19


state 12

    9 field_name: ID .
   10           | ID . SQUARE_OPEN int_literal SQUARE_CLOSE

    SQUARE_OPEN  shift, and go to state 20

    $default  reduce using rule 9 (field_name)


state 13

    6 field_declaration: var_type field_names .
    8 field_names: field_names . COMMA field_name

    COMMA  shift, and go to state 21

    $default  reduce using rule 6 (field_declaration)


state 14

    7 field_names: field_name .

    $default  reduce using rule 7 (field_names)


state 15

    5 field_declarations: field_declarations field_declaration SEMI_COLON .

    $default  reduce using rule 5 (field_declarations)


state 16

   13 method_declaration: VOID . ID OPEN parameter_declarations CLOSE code_block

    ID  shift, and go to state 22


state 17

    1 program_declaration: CLASS PROGRAM CURLY_OPEN field_declarations method_declarations CURLY_CLOSE .

    $default  reduce using rule 1 (program_declaration)


state 18

   14 method_declaration: var_type . ID OPEN parameter_declarations CLOSE code_block

    ID  shift, and go to state 23


state 19

   12 method_declarations: method_declarations method_declaration .

    $default  reduce using rule 12 (method_declarations)


state 20

   10 field_name: ID SQUARE_OPEN . int_literal SQUARE_CLOSE

    NUM          shift, and go to state 24
    HEX_LITERAL  shift, and go to state 25

    int_literal  go to state 26


state 21

    8 field_names: field_names COMMA . field_name

    ID  shift, and go to state 12

    field_name  go to state 27


state 22

   13 method_declaration: VOID ID . OPEN parameter_declarations CLOSE code_block

    OPEN  shift, and go to state 28


state 23

   14 method_declaration: var_type ID . OPEN parameter_declarations CLOSE code_block

    OPEN  shift, and go to state 29


state 24

   91 int_literal: NUM .

    $default  reduce using rule 91 (int_literal)


state 25

   92 int_literal: HEX_LITERAL .

    $default  reduce using rule 92 (int_literal)


state 26

   10 field_name: ID SQUARE_OPEN int_literal . SQUARE_CLOSE

    SQUARE_CLOSE  shift, and go to state 30


state 27

    8 field_names: field_names COMMA field_name .

    $default  reduce using rule 8 (field_names)


state 28

   13 method_declaration: VOID ID OPEN . parameter_declarations CLOSE code_block

    INT      shift, and go to state 7
    BOOLEAN  shift, and go to state 8

    $default  reduce using rule 15 (parameter_declarations)

    var_type                         go to state 31
    parameter_declarations           go to state 32
    non_empty_parameter_declaration  go to state 33
    parameter_declaration            go to state 34


state 29

   14 method_declaration: var_type ID OPEN . parameter_declarations CLOSE code_block

    INT      shift, and go to state 7
    BOOLEAN  shift, and go to state 8

    $default  reduce using rule 15 (parameter_declarations)

    var_type                         go to state 31
    parameter_declarations           go to state 35
    non_empty_parameter_declaration  go to state 33
    parameter_declaration            go to state 34


state 30

   10 field_name: ID SQUARE_OPEN int_literal SQUARE_CLOSE .

    $default  reduce using rule 10 (field_name)


state 31

   19 parameter_declaration: var_type . ID

    ID  shift, and go to state 36


state 32

   13 method_declaration: VOID ID OPEN parameter_declarations . CLOSE code_block

    CLOSE  shift, and go to state 37


state 33

   16 parameter_declarations: non_empty_parameter_declaration .
   18 non_empty_parameter_declaration: non_empty_parameter_declaration . COMMA parameter_declaration

    COMMA  shift, and go to state 38

    $default  reduce using rule 16 (parameter_declarations)


state 34

   17 non_empty_parameter_declaration: parameter_declaration .

    $default  reduce using rule 17 (non_empty_parameter_declaration)


state 35

   14 method_declaration: var_type ID OPEN parameter_declarations . CLOSE code_block

    CLOSE  shift, and go to state 39


state 36

   19 parameter_declaration: var_type ID .

    $default  reduce using rule 19 (parameter_declaration)


state 37

   13 method_declaration: VOID ID OPEN parameter_declarations CLOSE . code_block

    CURLY_OPEN  shift, and go to state 40

    code_block  go to state 41


state 38

   18 non_empty_parameter_declaration: non_empty_parameter_declaration COMMA . parameter_declaration

    INT      shift, and go to state 7
    BOOLEAN  shift, and go to state 8

    var_type               go to state 31
    parameter_declaration  go to state 42


state 39

   14 method_declaration: var_type ID OPEN parameter_declarations CLOSE . code_block

    CURLY_OPEN  shift, and go to state 40

    code_block  go to state 43


state 40

   20 code_block: CURLY_OPEN . block CURLY_CLOSE

    CURLY_CLOSE  reduce using rule 21 (block)
    CURLY_CLOSE  [reduce using rule 23 (var_declarations)]
    $default     reduce using rule 23 (var_declarations)

    block             go to state 44
    var_declarations  go to state 45


state 41

   13 method_declaration: VOID ID OPEN parameter_declarations CLOSE code_block .

    $default  reduce using rule 13 (method_declaration)


state 42

   18 non_empty_parameter_declaration: non_empty_parameter_declaration COMMA parameter_declaration .

    $default  reduce using rule 18 (non_empty_parameter_declaration)


state 43

   14 method_declaration: var_type ID OPEN parameter_declarations CLOSE code_block .

    $default  reduce using rule 14 (method_declaration)


state 44

   20 code_block: CURLY_OPEN block . CURLY_CLOSE

    CURLY_CLOSE  shift, and go to state 46


state 45

   22 block: var_declarations . statements
   24 var_declarations: var_declarations . var_declaration SEMI_COLON

    INT      shift, and go to state 7
    BOOLEAN  shift, and go to state 8

    $default  reduce using rule 28 (statements)

    var_type         go to state 47
    var_declaration  go to state 48
    statements       go to state 49


state 46

   20 code_block: CURLY_OPEN block CURLY_CLOSE .

    $default  reduce using rule 20 (code_block)


state 47

   25 var_declaration: var_type . var_names

    ID  shift, and go to state 50

    var_names  go to state 51


state 48

   24 var_declarations: var_declarations var_declaration . SEMI_COLON

    SEMI_COLON  shift, and go to state 52


state 49

   22 block: var_declarations statements .
   29 statements: statements . statement

    CALLOUT     shift, and go to state 53
    BREAK       shift, and go to state 54
    CONTINUE    shift, and go to state 55
    RETURN      shift, and go to state 56
    FOR         shift, and go to state 57
    IF          shift, and go to state 58
    ID          shift, and go to state 59
    CURLY_OPEN  shift, and go to state 40

    $default  reduce using rule 22 (block)

    code_block            go to state 60
    statement             go to state 61
    assign_statement      go to state 62
    location              go to state 63
    if_statement          go to state 64
    for_statement         go to state 65
    return_statement      go to state 66
    terminal_statement    go to state 67
    method_call_statment  go to state 68
    method_call           go to state 69
    normal_call           go to state 70
    callout_call          go to state 71


state 50

   26 var_names: ID .

    $default  reduce using rule 26 (var_names)


state 51

   25 var_declaration: var_type var_names .
   27 var_names: var_names . COMMA ID

    COMMA  shift, and go to state 72

    $default  reduce using rule 25 (var_declaration)


state 52

   24 var_declarations: var_declarations var_declaration SEMI_COLON .

    $default  reduce using rule 24 (var_declarations)


state 53

   57 callout_call: CALLOUT . OPEN string_literal CLOSE
   58             | CALLOUT . OPEN string_literal COMMA non_empty_callout_args CLOSE

    OPEN  shift, and go to state 73


state 54

   47 terminal_statement: BREAK . SEMI_COLON

    SEMI_COLON  shift, and go to state 74


state 55

   48 terminal_statement: CONTINUE . SEMI_COLON

    SEMI_COLON  shift, and go to state 75


state 56

   44 return_statement: RETURN . return_value SEMI_COLON

    CALLOUT       shift, and go to state 53
    TRUE          shift, and go to state 76
    FALSE         shift, and go to state 77
    NUM           shift, and go to state 24
    HEX_LITERAL   shift, and go to state 25
    CHAR_LITERAL  shift, and go to state 78
    ID            shift, and go to state 59
    SUBTRACT      shift, and go to state 79
    NOT           shift, and go to state 80
    OPEN          shift, and go to state 81

    $default  reduce using rule 45 (return_value)

    location       go to state 82
    return_value   go to state 83
    method_call    go to state 84
    normal_call    go to state 70
    callout_call   go to state 71
    expr           go to state 85
    binary_expr    go to state 86
    enclosed_expr  go to state 87
    unary_expr     go to state 88
    char_literal   go to state 89
    int_literal    go to state 90
    bool_literal   go to state 91


state 57

   43 for_statement: FOR . ID EQUAL expr COMMA expr code_block

    ID  shift, and go to state 92


state 58

   40 if_statement: IF . OPEN expr CLOSE code_block else_statement

    OPEN  shift, and go to state 93


state 59

   38 location: ID .
   39         | ID . SQUARE_OPEN expr SQUARE_CLOSE
   52 normal_call: ID . OPEN method_call_args CLOSE

    SQUARE_OPEN  shift, and go to state 94
    OPEN         shift, and go to state 95

    $default  reduce using rule 38 (location)


state 60

   36 statement: code_block .

    $default  reduce using rule 36 (statement)


state 61

   29 statements: statements statement .

    $default  reduce using rule 29 (statements)


state 62

   30 statement: assign_statement .

    $default  reduce using rule 30 (statement)


state 63

   37 assign_statement: location . assign_op expr SEMI_COLON

    EQUAL        shift, and go to state 96
    PLUS_EQUAL   shift, and go to state 97
    MINUS_EQUAL  shift, and go to state 98

    assign_op  go to state 99


state 64

   32 statement: if_statement .

    $default  reduce using rule 32 (statement)


state 65

   33 statement: for_statement .

    $default  reduce using rule 33 (statement)


state 66

   34 statement: return_statement .

    $default  reduce using rule 34 (statement)


state 67

   35 statement: terminal_statement .

    $default  reduce using rule 35 (statement)


state 68

   31 statement: method_call_statment .

    $default  reduce using rule 31 (statement)


state 69

   49 method_call_statment: method_call . SEMI_COLON

    SEMI_COLON  shift, and go to state 100


state 70

   50 method_call: normal_call .

    $default  reduce using rule 50 (method_call)


state 71

   51 method_call: callout_call .

    $default  reduce using rule 51 (method_call)


state 72

   27 var_names: var_names COMMA . ID

    ID  shift, and go to state 101


state 73

   57 callout_call: CALLOUT OPEN . string_literal CLOSE
   58             | CALLOUT OPEN . string_literal COMMA non_empty_callout_args CLOSE

    STRING  shift, and go to state 102

    string_literal  go to state 103


state 74

   47 terminal_statement: BREAK SEMI_COLON .

    $default  reduce using rule 47 (terminal_statement)


state 75

   48 terminal_statement: CONTINUE SEMI_COLON .

    $default  reduce using rule 48 (terminal_statement)


state 76

   93 bool_literal: TRUE .

    $default  reduce using rule 93 (bool_literal)


state 77

   94 bool_literal: FALSE .

    $default  reduce using rule 94 (bool_literal)


state 78

   90 char_literal: CHAR_LITERAL .

    $default  reduce using rule 90 (char_literal)


state 79

   85 unary_expr: SUBTRACT . expr

    CALLOUT       shift, and go to state 53
    TRUE          shift, and go to state 76
    FALSE         shift, and go to state 77
    NUM           shift, and go to state 24
    HEX_LITERAL   shift, and go to state 25
    CHAR_LITERAL  shift, and go to state 78
    ID            shift, and go to state 59
    SUBTRACT      shift, and go to state 79
    NOT           shift, and go to state 80
    OPEN          shift, and go to state 81

    location       go to state 82
    method_call    go to state 84
    normal_call    go to state 70
    callout_call   go to state 71
    expr           go to state 104
    binary_expr    go to state 86
    enclosed_expr  go to state 87
    unary_expr     go to state 88
    char_literal   go to state 89
    int_literal    go to state 90
    bool_literal   go to state 91


state 80

   86 unary_expr: NOT . expr

    CALLOUT       shift, and go to state 53
    TRUE          shift, and go to state 76
    FALSE         shift, and go to state 77
    NUM           shift, and go to state 24
    HEX_LITERAL   shift, and go to state 25
    CHAR_LITERAL  shift, and go to state 78
    ID            shift, and go to state 59
    SUBTRACT      shift, and go to state 79
    NOT           shift, and go to state 80
    OPEN          shift, and go to state 81

    location       go to state 82
    method_call    go to state 84
    normal_call    go to state 70
    callout_call   go to state 71
    expr           go to state 105
    binary_expr    go to state 86
    enclosed_expr  go to state 87
    unary_expr     go to state 88
    char_literal   go to state 89
    int_literal    go to state 90
    bool_literal   go to state 91


state 81

   84 enclosed_expr: OPEN . expr CLOSE

    CALLOUT       shift, and go to state 53
    TRUE          shift, and go to state 76
    FALSE         shift, and go to state 77
    NUM           shift, and go to state 24
    HEX_LITERAL   shift, and go to state 25
    CHAR_LITERAL  shift, and go to state 78
    ID            shift, and go to state 59
    SUBTRACT      shift, and go to state 79
    NOT           shift, and go to state 80
    OPEN          shift, and go to state 81

    location       go to state 82
    method_call    go to state 84
    normal_call    go to state 70
    callout_call   go to state 71
    expr           go to state 106
    binary_expr    go to state 86
    enclosed_expr  go to state 87
    unary_expr     go to state 88
    char_literal   go to state 89
    int_literal    go to state 90
    bool_literal   go to state 91


state 82

   63 expr: location .

    $default  reduce using rule 63 (expr)


state 83

   44 return_statement: RETURN return_value . SEMI_COLON

    SEMI_COLON  shift, and go to state 107


state 84

   64 expr: method_call .

    $default  reduce using rule 64 (expr)


state 85

   46 return_value: expr .
   71 binary_expr: expr . ADD expr
   72            | expr . SUBTRACT expr
   73            | expr . MULTIPLY expr
   74            | expr . DIVIDE expr
   75            | expr . MODULO expr
   76            | expr . GREATER expr
   77            | expr . LESS expr
   78            | expr . GREATER_EQUAL expr
   79            | expr . LESS_EQUAL expr
   80            | expr . EQUALITY expr
   81            | expr . NOT_EQUAL expr
   82            | expr . CONDITIONAL_AND expr
   83            | expr . CONDITIONAL_OR expr

    ADD              shift, and go to state 108
    SUBTRACT         shift, and go to state 109
    MULTIPLY         shift, and go to state 110
    DIVIDE           shift, and go to state 111
    EQUALITY         shift, and go to state 112
    NOT_EQUAL        shift, and go to state 113
    GREATER_EQUAL    shift, and go to state 114
    LESS_EQUAL       shift, and go to state 115
    GREATER          shift, and go to state 116
    LESS             shift, and go to state 117
    CONDITIONAL_AND  shift, and go to state 118
    CONDITIONAL_OR   shift, and go to state 119
    MODULO           shift, and go to state 120

    $default  reduce using rule 46 (return_value)


state 86

   68 expr: binary_expr .

    $default  reduce using rule 68 (expr)


state 87

   70 expr: enclosed_expr .

    $default  reduce using rule 70 (expr)


state 88

   69 expr: unary_expr .

    $default  reduce using rule 69 (expr)


state 89

   65 expr: char_literal .

    $default  reduce using rule 65 (expr)


state 90

   66 expr: int_literal .

    $default  reduce using rule 66 (expr)


state 91

   67 expr: bool_literal .

    $default  reduce using rule 67 (expr)


state 92

   43 for_statement: FOR ID . EQUAL expr COMMA expr code_block

    EQUAL  shift, and go to state 121


state 93

   40 if_statement: IF OPEN . expr CLOSE code_block else_statement

    CALLOUT       shift, and go to state 53
    TRUE          shift, and go to state 76
    FALSE         shift, and go to state 77
    NUM           shift, and go to state 24
    HEX_LITERAL   shift, and go to state 25
    CHAR_LITERAL  shift, and go to state 78
    ID            shift, and go to state 59
    SUBTRACT      shift, and go to state 79
    NOT           shift, and go to state 80
    OPEN          shift, and go to state 81

    location       go to state 82
    method_call    go to state 84
    normal_call    go to state 70
    callout_call   go to state 71
    expr           go to state 122
    binary_expr    go to state 86
    enclosed_expr  go to state 87
    unary_expr     go to state 88
    char_literal   go to state 89
    int_literal    go to state 90
    bool_literal   go to state 91


state 94

   39 location: ID SQUARE_OPEN . expr SQUARE_CLOSE

    CALLOUT       shift, and go to state 53
    TRUE          shift, and go to state 76
    FALSE         shift, and go to state 77
    NUM           shift, and go to state 24
    HEX_LITERAL   shift, and go to state 25
    CHAR_LITERAL  shift, and go to state 78
    ID            shift, and go to state 59
    SUBTRACT      shift, and go to state 79
    NOT           shift, and go to state 80
    OPEN          shift, and go to state 81

    location       go to state 82
    method_call    go to state 84
    normal_call    go to state 70
    callout_call   go to state 71
    expr           go to state 123
    binary_expr    go to state 86
    enclosed_expr  go to state 87
    unary_expr     go to state 88
    char_literal   go to state 89
    int_literal    go to state 90
    bool_literal   go to state 91


state 95

   52 normal_call: ID OPEN . method_call_args CLOSE

    CALLOUT       shift, and go to state 53
    TRUE          shift, and go to state 76
    FALSE         shift, and go to state 77
    NUM           shift, and go to state 24
    HEX_LITERAL   shift, and go to state 25
    CHAR_LITERAL  shift, and go to state 78
    ID            shift, and go to state 59
    SUBTRACT      shift, and go to state 79
    NOT           shift, and go to state 80
    OPEN          shift, and go to state 81

    $default  reduce using rule 53 (method_call_args)

    location                    go to state 82
    method_call                 go to state 84
    normal_call                 go to state 70
    method_call_args            go to state 124
    non_empty_method_call_args  go to state 125
    callout_call                go to state 71
    expr                        go to state 126
    binary_expr                 go to state 86
    enclosed_expr               go to state 87
    unary_expr                  go to state 88
    char_literal                go to state 89
    int_literal                 go to state 90
    bool_literal                go to state 91


state 96

   87 assign_op: EQUAL .

    $default  reduce using rule 87 (assign_op)


state 97

   88 assign_op: PLUS_EQUAL .

    $default  reduce using rule 88 (assign_op)


state 98

   89 assign_op: MINUS_EQUAL .

    $default  reduce using rule 89 (assign_op)


state 99

   37 assign_statement: location assign_op . expr SEMI_COLON

    CALLOUT       shift, and go to state 53
    TRUE          shift, and go to state 76
    FALSE         shift, and go to state 77
    NUM           shift, and go to state 24
    HEX_LITERAL   shift, and go to state 25
    CHAR_LITERAL  shift, and go to state 78
    ID            shift, and go to state 59
    SUBTRACT      shift, and go to state 79
    NOT           shift, and go to state 80
    OPEN          shift, and go to state 81

    location       go to state 82
    method_call    go to state 84
    normal_call    go to state 70
    callout_call   go to state 71
    expr           go to state 127
    binary_expr    go to state 86
    enclosed_expr  go to state 87
    unary_expr     go to state 88
    char_literal   go to state 89
    int_literal    go to state 90
    bool_literal   go to state 91


state 100

   49 method_call_statment: method_call SEMI_COLON .

    $default  reduce using rule 49 (method_call_statment)


state 101

   27 var_names: var_names COMMA ID .

    $default  reduce using rule 27 (var_names)


state 102

   95 string_literal: STRING .

    $default  reduce using rule 95 (string_literal)


state 103

   57 callout_call: CALLOUT OPEN string_literal . CLOSE
   58             | CALLOUT OPEN string_literal . COMMA non_empty_callout_args CLOSE

    CLOSE  shift, and go to state 128
    COMMA  shift, and go to state 129


state 104

   71 binary_expr: expr . ADD expr
   72            | expr . SUBTRACT expr
   73            | expr . MULTIPLY expr
   74            | expr . DIVIDE expr
   75            | expr . MODULO expr
   76            | expr . GREATER expr
   77            | expr . LESS expr
   78            | expr . GREATER_EQUAL expr
   79            | expr . LESS_EQUAL expr
   80            | expr . EQUALITY expr
   81            | expr . NOT_EQUAL expr
   82            | expr . CONDITIONAL_AND expr
   83            | expr . CONDITIONAL_OR expr
   85 unary_expr: SUBTRACT expr .

    ADD              shift, and go to state 108
    SUBTRACT         shift, and go to state 109
    MULTIPLY         shift, and go to state 110
    DIVIDE           shift, and go to state 111
    EQUALITY         shift, and go to state 112
    NOT_EQUAL        shift, and go to state 113
    GREATER_EQUAL    shift, and go to state 114
    LESS_EQUAL       shift, and go to state 115
    GREATER          shift, and go to state 116
    LESS             shift, and go to state 117
    CONDITIONAL_AND  shift, and go to state 118
    CONDITIONAL_OR   shift, and go to state 119
    MODULO           shift, and go to state 120

    ADD              [reduce using rule 85 (unary_expr)]
    SUBTRACT         [reduce using rule 85 (unary_expr)]
    MULTIPLY         [reduce using rule 85 (unary_expr)]
    DIVIDE           [reduce using rule 85 (unary_expr)]
    EQUALITY         [reduce using rule 85 (unary_expr)]
    NOT_EQUAL        [reduce using rule 85 (unary_expr)]
    GREATER_EQUAL    [reduce using rule 85 (unary_expr)]
    LESS_EQUAL       [reduce using rule 85 (unary_expr)]
    GREATER          [reduce using rule 85 (unary_expr)]
    LESS             [reduce using rule 85 (unary_expr)]
    CONDITIONAL_AND  [reduce using rule 85 (unary_expr)]
    CONDITIONAL_OR   [reduce using rule 85 (unary_expr)]
    MODULO           [reduce using rule 85 (unary_expr)]
    $default         reduce using rule 85 (unary_expr)


state 105

   71 binary_expr: expr . ADD expr
   72            | expr . SUBTRACT expr
   73            | expr . MULTIPLY expr
   74            | expr . DIVIDE expr
   75            | expr . MODULO expr
   76            | expr . GREATER expr
   77            | expr . LESS expr
   78            | expr . GREATER_EQUAL expr
   79            | expr . LESS_EQUAL expr
   80            | expr . EQUALITY expr
   81            | expr . NOT_EQUAL expr
   82            | expr . CONDITIONAL_AND expr
   83            | expr . CONDITIONAL_OR expr
   86 unary_expr: NOT expr .

    ADD              shift, and go to state 108
    SUBTRACT         shift, and go to state 109
    MULTIPLY         shift, and go to state 110
    DIVIDE           shift, and go to state 111
    EQUALITY         shift, and go to state 112
    NOT_EQUAL        shift, and go to state 113
    GREATER_EQUAL    shift, and go to state 114
    LESS_EQUAL       shift, and go to state 115
    GREATER          shift, and go to state 116
    LESS             shift, and go to state 117
    CONDITIONAL_AND  shift, and go to state 118
    CONDITIONAL_OR   shift, and go to state 119
    MODULO           shift, and go to state 120

    ADD              [reduce using rule 86 (unary_expr)]
    SUBTRACT         [reduce using rule 86 (unary_expr)]
    MULTIPLY         [reduce using rule 86 (unary_expr)]
    DIVIDE           [reduce using rule 86 (unary_expr)]
    EQUALITY         [reduce using rule 86 (unary_expr)]
    NOT_EQUAL        [reduce using rule 86 (unary_expr)]
    GREATER_EQUAL    [reduce using rule 86 (unary_expr)]
    LESS_EQUAL       [reduce using rule 86 (unary_expr)]
    GREATER          [reduce using rule 86 (unary_expr)]
    LESS             [reduce using rule 86 (unary_expr)]
    CONDITIONAL_AND  [reduce using rule 86 (unary_expr)]
    CONDITIONAL_OR   [reduce using rule 86 (unary_expr)]
    MODULO           [reduce using rule 86 (unary_expr)]
    $default         reduce using rule 86 (unary_expr)


state 106

   71 binary_expr: expr . ADD expr
   72            | expr . SUBTRACT expr
   73            | expr . MULTIPLY expr
   74            | expr . DIVIDE expr
   75            | expr . MODULO expr
   76            | expr . GREATER expr
   77            | expr . LESS expr
   78            | expr . GREATER_EQUAL expr
   79            | expr . LESS_EQUAL expr
   80            | expr . EQUALITY expr
   81            | expr . NOT_EQUAL expr
   82            | expr . CONDITIONAL_AND expr
   83            | expr . CONDITIONAL_OR expr
   84 enclosed_expr: OPEN expr . CLOSE

    ADD              shift, and go to state 108
    SUBTRACT         shift, and go to state 109
    MULTIPLY         shift, and go to state 110
    DIVIDE           shift, and go to state 111
    EQUALITY         shift, and go to state 112
    NOT_EQUAL        shift, and go to state 113
    GREATER_EQUAL    shift, and go to state 114
    LESS_EQUAL       shift, and go to state 115
    GREATER          shift, and go to state 116
    LESS             shift, and go to state 117
    CONDITIONAL_AND  shift, and go to state 118
    CONDITIONAL_OR   shift, and go to state 119
    MODULO           shift, and go to state 120
    CLOSE            shift, and go to state 130


state 107

   44 return_statement: RETURN return_value SEMI_COLON .

    $default  reduce using rule 44 (return_statement)


state 108

   71 binary_expr: expr ADD . expr

    CALLOUT       shift, and go to state 53
    TRUE          shift, and go to state 76
    FALSE         shift, and go to state 77
    NUM           shift, and go to state 24
    HEX_LITERAL   shift, and go to state 25
    CHAR_LITERAL  shift, and go to state 78
    ID            shift, and go to state 59
    SUBTRACT      shift, and go to state 79
    NOT           shift, and go to state 80
    OPEN          shift, and go to state 81

    location       go to state 82
    method_call    go to state 84
    normal_call    go to state 70
    callout_call   go to state 71
    expr           go to state 131
    binary_expr    go to state 86
    enclosed_expr  go to state 87
    unary_expr     go to state 88
    char_literal   go to state 89
    int_literal    go to state 90
    bool_literal   go to state 91


state 109

   72 binary_expr: expr SUBTRACT . expr

    CALLOUT       shift, and go to state 53
    TRUE          shift, and go to state 76
    FALSE         shift, and go to state 77
    NUM           shift, and go to state 24
    HEX_LITERAL   shift, and go to state 25
    CHAR_LITERAL  shift, and go to state 78
    ID            shift, and go to state 59
    SUBTRACT      shift, and go to state 79
    NOT           shift, and go to state 80
    OPEN          shift, and go to state 81

    location       go to state 82
    method_call    go to state 84
    normal_call    go to state 70
    callout_call   go to state 71
    expr           go to state 132
    binary_expr    go to state 86
    enclosed_expr  go to state 87
    unary_expr     go to state 88
    char_literal   go to state 89
    int_literal    go to state 90
    bool_literal   go to state 91


state 110

   73 binary_expr: expr MULTIPLY . expr

    CALLOUT       shift, and go to state 53
    TRUE          shift, and go to state 76
    FALSE         shift, and go to state 77
    NUM           shift, and go to state 24
    HEX_LITERAL   shift, and go to state 25
    CHAR_LITERAL  shift, and go to state 78
    ID            shift, and go to state 59
    SUBTRACT      shift, and go to state 79
    NOT           shift, and go to state 80
    OPEN          shift, and go to state 81

    location       go to state 82
    method_call    go to state 84
    normal_call    go to state 70
    callout_call   go to state 71
    expr           go to state 133
    binary_expr    go to state 86
    enclosed_expr  go to state 87
    unary_expr     go to state 88
    char_literal   go to state 89
    int_literal    go to state 90
    bool_literal   go to state 91


state 111

   74 binary_expr: expr DIVIDE . expr

    CALLOUT       shift, and go to state 53
    TRUE          shift, and go to state 76
    FALSE         shift, and go to state 77
    NUM           shift, and go to state 24
    HEX_LITERAL   shift, and go to state 25
    CHAR_LITERAL  shift, and go to state 78
    ID            shift, and go to state 59
    SUBTRACT      shift, and go to state 79
    NOT           shift, and go to state 80
    OPEN          shift, and go to state 81

    location       go to state 82
    method_call    go to state 84
    normal_call    go to state 70
    callout_call   go to state 71
    expr           go to state 134
    binary_expr    go to state 86
    enclosed_expr  go to state 87
    unary_expr     go to state 88
    char_literal   go to state 89
    int_literal    go to state 90
    bool_literal   go to state 91


state 112

   80 binary_expr: expr EQUALITY . expr

    CALLOUT       shift, and go to state 53
    TRUE          shift, and go to state 76
    FALSE         shift, and go to state 77
    NUM           shift, and go to state 24
    HEX_LITERAL   shift, and go to state 25
    CHAR_LITERAL  shift, and go to state 78
    ID            shift, and go to state 59
    SUBTRACT      shift, and go to state 79
    NOT           shift, and go to state 80
    OPEN          shift, and go to state 81

    location       go to state 82
    method_call    go to state 84
    normal_call    go to state 70
    callout_call   go to state 71
    expr           go to state 135
    binary_expr    go to state 86
    enclosed_expr  go to state 87
    unary_expr     go to state 88
    char_literal   go to state 89
    int_literal    go to state 90
    bool_literal   go to state 91


state 113

   81 binary_expr: expr NOT_EQUAL . expr

    CALLOUT       shift, and go to state 53
    TRUE          shift, and go to state 76
    FALSE         shift, and go to state 77
    NUM           shift, and go to state 24
    HEX_LITERAL   shift, and go to state 25
    CHAR_LITERAL  shift, and go to state 78
    ID            shift, and go to state 59
    SUBTRACT      shift, and go to state 79
    NOT           shift, and go to state 80
    OPEN          shift, and go to state 81

    location       go to state 82
    method_call    go to state 84
    normal_call    go to state 70
    callout_call   go to state 71
    expr           go to state 136
    binary_expr    go to state 86
    enclosed_expr  go to state 87
    unary_expr     go to state 88
    char_literal   go to state 89
    int_literal    go to state 90
    bool_literal   go to state 91


state 114

   78 binary_expr: expr GREATER_EQUAL . expr

    CALLOUT       shift, and go to state 53
    TRUE          shift, and go to state 76
    FALSE         shift, and go to state 77
    NUM           shift, and go to state 24
    HEX_LITERAL   shift, and go to state 25
    CHAR_LITERAL  shift, and go to state 78
    ID            shift, and go to state 59
    SUBTRACT      shift, and go to state 79
    NOT           shift, and go to state 80
    OPEN          shift, and go to state 81

    location       go to state 82
    method_call    go to state 84
    normal_call    go to state 70
    callout_call   go to state 71
    expr           go to state 137
    binary_expr    go to state 86
    enclosed_expr  go to state 87
    unary_expr     go to state 88
    char_literal   go to state 89
    int_literal    go to state 90
    bool_literal   go to state 91


state 115

   79 binary_expr: expr LESS_EQUAL . expr

    CALLOUT       shift, and go to state 53
    TRUE          shift, and go to state 76
    FALSE         shift, and go to state 77
    NUM           shift, and go to state 24
    HEX_LITERAL   shift, and go to state 25
    CHAR_LITERAL  shift, and go to state 78
    ID            shift, and go to state 59
    SUBTRACT      shift, and go to state 79
    NOT           shift, and go to state 80
    OPEN          shift, and go to state 81

    location       go to state 82
    method_call    go to state 84
    normal_call    go to state 70
    callout_call   go to state 71
    expr           go to state 138
    binary_expr    go to state 86
    enclosed_expr  go to state 87
    unary_expr     go to state 88
    char_literal   go to state 89
    int_literal    go to state 90
    bool_literal   go to state 91


state 116

   76 binary_expr: expr GREATER . expr

    CALLOUT       shift, and go to state 53
    TRUE          shift, and go to state 76
    FALSE         shift, and go to state 77
    NUM           shift, and go to state 24
    HEX_LITERAL   shift, and go to state 25
    CHAR_LITERAL  shift, and go to state 78
    ID            shift, and go to state 59
    SUBTRACT      shift, and go to state 79
    NOT           shift, and go to state 80
    OPEN          shift, and go to state 81

    location       go to state 82
    method_call    go to state 84
    normal_call    go to state 70
    callout_call   go to state 71
    expr           go to state 139
    binary_expr    go to state 86
    enclosed_expr  go to state 87
    unary_expr     go to state 88
    char_literal   go to state 89
    int_literal    go to state 90
    bool_literal   go to state 91


state 117

   77 binary_expr: expr LESS . expr

    CALLOUT       shift, and go to state 53
    TRUE          shift, and go to state 76
    FALSE         shift, and go to state 77
    NUM           shift, and go to state 24
    HEX_LITERAL   shift, and go to state 25
    CHAR_LITERAL  shift, and go to state 78
    ID            shift, and go to state 59
    SUBTRACT      shift, and go to state 79
    NOT           shift, and go to state 80
    OPEN          shift, and go to state 81

    location       go to state 82
    method_call    go to state 84
    normal_call    go to state 70
    callout_call   go to state 71
    expr           go to state 140
    binary_expr    go to state 86
    enclosed_expr  go to state 87
    unary_expr     go to state 88
    char_literal   go to state 89
    int_literal    go to state 90
    bool_literal   go to state 91


state 118

   82 binary_expr: expr CONDITIONAL_AND . expr

    CALLOUT       shift, and go to state 53
    TRUE          shift, and go to state 76
    FALSE         shift, and go to state 77
    NUM           shift, and go to state 24
    HEX_LITERAL   shift, and go to state 25
    CHAR_LITERAL  shift, and go to state 78
    ID            shift, and go to state 59
    SUBTRACT      shift, and go to state 79
    NOT           shift, and go to state 80
    OPEN          shift, and go to state 81

    location       go to state 82
    method_call    go to state 84
    normal_call    go to state 70
    callout_call   go to state 71
    expr           go to state 141
    binary_expr    go to state 86
    enclosed_expr  go to state 87
    unary_expr     go to state 88
    char_literal   go to state 89
    int_literal    go to state 90
    bool_literal   go to state 91


state 119

   83 binary_expr: expr CONDITIONAL_OR . expr

    CALLOUT       shift, and go to state 53
    TRUE          shift, and go to state 76
    FALSE         shift, and go to state 77
    NUM           shift, and go to state 24
    HEX_LITERAL   shift, and go to state 25
    CHAR_LITERAL  shift, and go to state 78
    ID            shift, and go to state 59
    SUBTRACT      shift, and go to state 79
    NOT           shift, and go to state 80
    OPEN          shift, and go to state 81

    location       go to state 82
    method_call    go to state 84
    normal_call    go to state 70
    callout_call   go to state 71
    expr           go to state 142
    binary_expr    go to state 86
    enclosed_expr  go to state 87
    unary_expr     go to state 88
    char_literal   go to state 89
    int_literal    go to state 90
    bool_literal   go to state 91


state 120

   75 binary_expr: expr MODULO . expr

    CALLOUT       shift, and go to state 53
    TRUE          shift, and go to state 76
    FALSE         shift, and go to state 77
    NUM           shift, and go to state 24
    HEX_LITERAL   shift, and go to state 25
    CHAR_LITERAL  shift, and go to state 78
    ID            shift, and go to state 59
    SUBTRACT      shift, and go to state 79
    NOT           shift, and go to state 80
    OPEN          shift, and go to state 81

    location       go to state 82
    method_call    go to state 84
    normal_call    go to state 70
    callout_call   go to state 71
    expr           go to state 143
    binary_expr    go to state 86
    enclosed_expr  go to state 87
    unary_expr     go to state 88
    char_literal   go to state 89
    int_literal    go to state 90
    bool_literal   go to state 91


state 121

   43 for_statement: FOR ID EQUAL . expr COMMA expr code_block

    CALLOUT       shift, and go to state 53
    TRUE          shift, and go to state 76
    FALSE         shift, and go to state 77
    NUM           shift, and go to state 24
    HEX_LITERAL   shift, and go to state 25
    CHAR_LITERAL  shift, and go to state 78
    ID            shift, and go to state 59
    SUBTRACT      shift, and go to state 79
    NOT           shift, and go to state 80
    OPEN          shift, and go to state 81

    location       go to state 82
    method_call    go to state 84
    normal_call    go to state 70
    callout_call   go to state 71
    expr           go to state 144
    binary_expr    go to state 86
    enclosed_expr  go to state 87
    unary_expr     go to state 88
    char_literal   go to state 89
    int_literal    go to state 90
    bool_literal   go to state 91


state 122

   40 if_statement: IF OPEN expr . CLOSE code_block else_statement
   71 binary_expr: expr . ADD expr
   72            | expr . SUBTRACT expr
   73            | expr . MULTIPLY expr
   74            | expr . DIVIDE expr
   75            | expr . MODULO expr
   76            | expr . GREATER expr
   77            | expr . LESS expr
   78            | expr . GREATER_EQUAL expr
   79            | expr . LESS_EQUAL expr
   80            | expr . EQUALITY expr
   81            | expr . NOT_EQUAL expr
   82            | expr . CONDITIONAL_AND expr
   83            | expr . CONDITIONAL_OR expr

    ADD              shift, and go to state 108
    SUBTRACT         shift, and go to state 109
    MULTIPLY         shift, and go to state 110
    DIVIDE           shift, and go to state 111
    EQUALITY         shift, and go to state 112
    NOT_EQUAL        shift, and go to state 113
    GREATER_EQUAL    shift, and go to state 114
    LESS_EQUAL       shift, and go to state 115
    GREATER          shift, and go to state 116
    LESS             shift, and go to state 117
    CONDITIONAL_AND  shift, and go to state 118
    CONDITIONAL_OR   shift, and go to state 119
    MODULO           shift, and go to state 120
    CLOSE            shift, and go to state 145


state 123

   39 location: ID SQUARE_OPEN expr . SQUARE_CLOSE
   71 binary_expr: expr . ADD expr
   72            | expr . SUBTRACT expr
   73            | expr . MULTIPLY expr
   74            | expr . DIVIDE expr
   75            | expr . MODULO expr
   76            | expr . GREATER expr
   77            | expr . LESS expr
   78            | expr . GREATER_EQUAL expr
   79            | expr . LESS_EQUAL expr
   80            | expr . EQUALITY expr
   81            | expr . NOT_EQUAL expr
   82            | expr . CONDITIONAL_AND expr
   83            | expr . CONDITIONAL_OR expr

    ADD              shift, and go to state 108
    SUBTRACT         shift, and go to state 109
    MULTIPLY         shift, and go to state 110
    DIVIDE           shift, and go to state 111
    EQUALITY         shift, and go to state 112
    NOT_EQUAL        shift, and go to state 113
    GREATER_EQUAL    shift, and go to state 114
    LESS_EQUAL       shift, and go to state 115
    GREATER          shift, and go to state 116
    LESS             shift, and go to state 117
    CONDITIONAL_AND  shift, and go to state 118
    CONDITIONAL_OR   shift, and go to state 119
    MODULO           shift, and go to state 120
    SQUARE_CLOSE     shift, and go to state 146


state 124

   52 normal_call: ID OPEN method_call_args . CLOSE

    CLOSE  shift, and go to state 147


state 125

   54 method_call_args: non_empty_method_call_args .
   56 non_empty_method_call_args: non_empty_method_call_args . COMMA expr

    COMMA  shift, and go to state 148

    $default  reduce using rule 54 (method_call_args)


state 126

   55 non_empty_method_call_args: expr .
   71 binary_expr: expr . ADD expr
   72            | expr . SUBTRACT expr
   73            | expr . MULTIPLY expr
   74            | expr . DIVIDE expr
   75            | expr . MODULO expr
   76            | expr . GREATER expr
   77            | expr . LESS expr
   78            | expr . GREATER_EQUAL expr
   79            | expr . LESS_EQUAL expr
   80            | expr . EQUALITY expr
   81            | expr . NOT_EQUAL expr
   82            | expr . CONDITIONAL_AND expr
   83            | expr . CONDITIONAL_OR expr

    ADD              shift, and go to state 108
    SUBTRACT         shift, and go to state 109
    MULTIPLY         shift, and go to state 110
    DIVIDE           shift, and go to state 111
    EQUALITY         shift, and go to state 112
    NOT_EQUAL        shift, and go to state 113
    GREATER_EQUAL    shift, and go to state 114
    LESS_EQUAL       shift, and go to state 115
    GREATER          shift, and go to state 116
    LESS             shift, and go to state 117
    CONDITIONAL_AND  shift, and go to state 118
    CONDITIONAL_OR   shift, and go to state 119
    MODULO           shift, and go to state 120

    $default  reduce using rule 55 (non_empty_method_call_args)


state 127

   37 assign_statement: location assign_op expr . SEMI_COLON
   71 binary_expr: expr . ADD expr
   72            | expr . SUBTRACT expr
   73            | expr . MULTIPLY expr
   74            | expr . DIVIDE expr
   75            | expr . MODULO expr
   76            | expr . GREATER expr
   77            | expr . LESS expr
   78            | expr . GREATER_EQUAL expr
   79            | expr . LESS_EQUAL expr
   80            | expr . EQUALITY expr
   81            | expr . NOT_EQUAL expr
   82            | expr . CONDITIONAL_AND expr
   83            | expr . CONDITIONAL_OR expr

    ADD              shift, and go to state 108
    SUBTRACT         shift, and go to state 109
    MULTIPLY         shift, and go to state 110
    DIVIDE           shift, and go to state 111
    EQUALITY         shift, and go to state 112
    NOT_EQUAL        shift, and go to state 113
    GREATER_EQUAL    shift, and go to state 114
    LESS_EQUAL       shift, and go to state 115
    GREATER          shift, and go to state 116
    LESS             shift, and go to state 117
    CONDITIONAL_AND  shift, and go to state 118
    CONDITIONAL_OR   shift, and go to state 119
    MODULO           shift, and go to state 120
    SEMI_COLON       shift, and go to state 149


state 128

   57 callout_call: CALLOUT OPEN string_literal CLOSE .

    $default  reduce using rule 57 (callout_call)


state 129

   58 callout_call: CALLOUT OPEN string_literal COMMA . non_empty_callout_args CLOSE

    CALLOUT       shift, and go to state 53
    TRUE          shift, and go to state 76
    FALSE         shift, and go to state 77
    NUM           shift, and go to state 24
    HEX_LITERAL   shift, and go to state 25
    CHAR_LITERAL  shift, and go to state 78
    STRING        shift, and go to state 102
    ID            shift, and go to state 59
    SUBTRACT      shift, and go to state 79
    NOT           shift, and go to state 80
    OPEN          shift, and go to state 81

    location                go to state 82
    method_call             go to state 84
    normal_call             go to state 70
    callout_call            go to state 71
    non_empty_callout_args  go to state 150
    callout_arg             go to state 151
    expr                    go to state 152
    binary_expr             go to state 86
    enclosed_expr           go to state 87
    unary_expr              go to state 88
    char_literal            go to state 89
    int_literal             go to state 90
    bool_literal            go to state 91
    string_literal          go to state 153


state 130

   84 enclosed_expr: OPEN expr CLOSE .

    $default  reduce using rule 84 (enclosed_expr)


state 131

   71 binary_expr: expr . ADD expr
   71            | expr ADD expr .
   72            | expr . SUBTRACT expr
   73            | expr . MULTIPLY expr
   74            | expr . DIVIDE expr
   75            | expr . MODULO expr
   76            | expr . GREATER expr
   77            | expr . LESS expr
   78            | expr . GREATER_EQUAL expr
   79            | expr . LESS_EQUAL expr
   80            | expr . EQUALITY expr
   81            | expr . NOT_EQUAL expr
   82            | expr . CONDITIONAL_AND expr
   83            | expr . CONDITIONAL_OR expr

    ADD              shift, and go to state 108
    SUBTRACT         shift, and go to state 109
    MULTIPLY         shift, and go to state 110
    DIVIDE           shift, and go to state 111
    EQUALITY         shift, and go to state 112
    NOT_EQUAL        shift, and go to state 113
    GREATER_EQUAL    shift, and go to state 114
    LESS_EQUAL       shift, and go to state 115
    GREATER          shift, and go to state 116
    LESS             shift, and go to state 117
    CONDITIONAL_AND  shift, and go to state 118
    CONDITIONAL_OR   shift, and go to state 119
    MODULO           shift, and go to state 120

    ADD              [reduce using rule 71 (binary_expr)]
    SUBTRACT         [reduce using rule 71 (binary_expr)]
    MULTIPLY         [reduce using rule 71 (binary_expr)]
    DIVIDE           [reduce using rule 71 (binary_expr)]
    EQUALITY         [reduce using rule 71 (binary_expr)]
    NOT_EQUAL        [reduce using rule 71 (binary_expr)]
    GREATER_EQUAL    [reduce using rule 71 (binary_expr)]
    LESS_EQUAL       [reduce using rule 71 (binary_expr)]
    GREATER          [reduce using rule 71 (binary_expr)]
    LESS             [reduce using rule 71 (binary_expr)]
    CONDITIONAL_AND  [reduce using rule 71 (binary_expr)]
    CONDITIONAL_OR   [reduce using rule 71 (binary_expr)]
    MODULO           [reduce using rule 71 (binary_expr)]
    $default         reduce using rule 71 (binary_expr)


state 132

   71 binary_expr: expr . ADD expr
   72            | expr . SUBTRACT expr
   72            | expr SUBTRACT expr .
   73            | expr . MULTIPLY expr
   74            | expr . DIVIDE expr
   75            | expr . MODULO expr
   76            | expr . GREATER expr
   77            | expr . LESS expr
   78            | expr . GREATER_EQUAL expr
   79            | expr . LESS_EQUAL expr
   80            | expr . EQUALITY expr
   81            | expr . NOT_EQUAL expr
   82            | expr . CONDITIONAL_AND expr
   83            | expr . CONDITIONAL_OR expr

    ADD              shift, and go to state 108
    SUBTRACT         shift, and go to state 109
    MULTIPLY         shift, and go to state 110
    DIVIDE           shift, and go to state 111
    EQUALITY         shift, and go to state 112
    NOT_EQUAL        shift, and go to state 113
    GREATER_EQUAL    shift, and go to state 114
    LESS_EQUAL       shift, and go to state 115
    GREATER          shift, and go to state 116
    LESS             shift, and go to state 117
    CONDITIONAL_AND  shift, and go to state 118
    CONDITIONAL_OR   shift, and go to state 119
    MODULO           shift, and go to state 120

    ADD              [reduce using rule 72 (binary_expr)]
    SUBTRACT         [reduce using rule 72 (binary_expr)]
    MULTIPLY         [reduce using rule 72 (binary_expr)]
    DIVIDE           [reduce using rule 72 (binary_expr)]
    EQUALITY         [reduce using rule 72 (binary_expr)]
    NOT_EQUAL        [reduce using rule 72 (binary_expr)]
    GREATER_EQUAL    [reduce using rule 72 (binary_expr)]
    LESS_EQUAL       [reduce using rule 72 (binary_expr)]
    GREATER          [reduce using rule 72 (binary_expr)]
    LESS             [reduce using rule 72 (binary_expr)]
    CONDITIONAL_AND  [reduce using rule 72 (binary_expr)]
    CONDITIONAL_OR   [reduce using rule 72 (binary_expr)]
    MODULO           [reduce using rule 72 (binary_expr)]
    $default         reduce using rule 72 (binary_expr)


state 133

   71 binary_expr: expr . ADD expr
   72            | expr . SUBTRACT expr
   73            | expr . MULTIPLY expr
   73            | expr MULTIPLY expr .
   74            | expr . DIVIDE expr
   75            | expr . MODULO expr
   76            | expr . GREATER expr
   77            | expr . LESS expr
   78            | expr . GREATER_EQUAL expr
   79            | expr . LESS_EQUAL expr
   80            | expr . EQUALITY expr
   81            | expr . NOT_EQUAL expr
   82            | expr . CONDITIONAL_AND expr
   83            | expr . CONDITIONAL_OR expr

    ADD              shift, and go to state 108
    SUBTRACT         shift, and go to state 109
    MULTIPLY         shift, and go to state 110
    DIVIDE           shift, and go to state 111
    EQUALITY         shift, and go to state 112
    NOT_EQUAL        shift, and go to state 113
    GREATER_EQUAL    shift, and go to state 114
    LESS_EQUAL       shift, and go to state 115
    GREATER          shift, and go to state 116
    LESS             shift, and go to state 117
    CONDITIONAL_AND  shift, and go to state 118
    CONDITIONAL_OR   shift, and go to state 119
    MODULO           shift, and go to state 120

    ADD              [reduce using rule 73 (binary_expr)]
    SUBTRACT         [reduce using rule 73 (binary_expr)]
    MULTIPLY         [reduce using rule 73 (binary_expr)]
    DIVIDE           [reduce using rule 73 (binary_expr)]
    EQUALITY         [reduce using rule 73 (binary_expr)]
    NOT_EQUAL        [reduce using rule 73 (binary_expr)]
    GREATER_EQUAL    [reduce using rule 73 (binary_expr)]
    LESS_EQUAL       [reduce using rule 73 (binary_expr)]
    GREATER          [reduce using rule 73 (binary_expr)]
    LESS             [reduce using rule 73 (binary_expr)]
    CONDITIONAL_AND  [reduce using rule 73 (binary_expr)]
    CONDITIONAL_OR   [reduce using rule 73 (binary_expr)]
    MODULO           [reduce using rule 73 (binary_expr)]
    $default         reduce using rule 73 (binary_expr)


state 134

   71 binary_expr: expr . ADD expr
   72            | expr . SUBTRACT expr
   73            | expr . MULTIPLY expr
   74            | expr . DIVIDE expr
   74            | expr DIVIDE expr .
   75            | expr . MODULO expr
   76            | expr . GREATER expr
   77            | expr . LESS expr
   78            | expr . GREATER_EQUAL expr
   79            | expr . LESS_EQUAL expr
   80            | expr . EQUALITY expr
   81            | expr . NOT_EQUAL expr
   82            | expr . CONDITIONAL_AND expr
   83            | expr . CONDITIONAL_OR expr

    ADD              shift, and go to state 108
    SUBTRACT         shift, and go to state 109
    MULTIPLY         shift, and go to state 110
    DIVIDE           shift, and go to state 111
    EQUALITY         shift, and go to state 112
    NOT_EQUAL        shift, and go to state 113
    GREATER_EQUAL    shift, and go to state 114
    LESS_EQUAL       shift, and go to state 115
    GREATER          shift, and go to state 116
    LESS             shift, and go to state 117
    CONDITIONAL_AND  shift, and go to state 118
    CONDITIONAL_OR   shift, and go to state 119
    MODULO           shift, and go to state 120

    ADD              [reduce using rule 74 (binary_expr)]
    SUBTRACT         [reduce using rule 74 (binary_expr)]
    MULTIPLY         [reduce using rule 74 (binary_expr)]
    DIVIDE           [reduce using rule 74 (binary_expr)]
    EQUALITY         [reduce using rule 74 (binary_expr)]
    NOT_EQUAL        [reduce using rule 74 (binary_expr)]
    GREATER_EQUAL    [reduce using rule 74 (binary_expr)]
    LESS_EQUAL       [reduce using rule 74 (binary_expr)]
    GREATER          [reduce using rule 74 (binary_expr)]
    LESS             [reduce using rule 74 (binary_expr)]
    CONDITIONAL_AND  [reduce using rule 74 (binary_expr)]
    CONDITIONAL_OR   [reduce using rule 74 (binary_expr)]
    MODULO           [reduce using rule 74 (binary_expr)]
    $default         reduce using rule 74 (binary_expr)


state 135

   71 binary_expr: expr . ADD expr
   72            | expr . SUBTRACT expr
   73            | expr . MULTIPLY expr
   74            | expr . DIVIDE expr
   75            | expr . MODULO expr
   76            | expr . GREATER expr
   77            | expr . LESS expr
   78            | expr . GREATER_EQUAL expr
   79            | expr . LESS_EQUAL expr
   80            | expr . EQUALITY expr
   80            | expr EQUALITY expr .
   81            | expr . NOT_EQUAL expr
   82            | expr . CONDITIONAL_AND expr
   83            | expr . CONDITIONAL_OR expr

    ADD              shift, and go to state 108
    SUBTRACT         shift, and go to state 109
    MULTIPLY         shift, and go to state 110
    DIVIDE           shift, and go to state 111
    EQUALITY         shift, and go to state 112
    NOT_EQUAL        shift, and go to state 113
    GREATER_EQUAL    shift, and go to state 114
    LESS_EQUAL       shift, and go to state 115
    GREATER          shift, and go to state 116
    LESS             shift, and go to state 117
    CONDITIONAL_AND  shift, and go to state 118
    CONDITIONAL_OR   shift, and go to state 119
    MODULO           shift, and go to state 120

    ADD              [reduce using rule 80 (binary_expr)]
    SUBTRACT         [reduce using rule 80 (binary_expr)]
    MULTIPLY         [reduce using rule 80 (binary_expr)]
    DIVIDE           [reduce using rule 80 (binary_expr)]
    EQUALITY         [reduce using rule 80 (binary_expr)]
    NOT_EQUAL        [reduce using rule 80 (binary_expr)]
    GREATER_EQUAL    [reduce using rule 80 (binary_expr)]
    LESS_EQUAL       [reduce using rule 80 (binary_expr)]
    GREATER          [reduce using rule 80 (binary_expr)]
    LESS             [reduce using rule 80 (binary_expr)]
    CONDITIONAL_AND  [reduce using rule 80 (binary_expr)]
    CONDITIONAL_OR   [reduce using rule 80 (binary_expr)]
    MODULO           [reduce using rule 80 (binary_expr)]
    $default         reduce using rule 80 (binary_expr)


state 136

   71 binary_expr: expr . ADD expr
   72            | expr . SUBTRACT expr
   73            | expr . MULTIPLY expr
   74            | expr . DIVIDE expr
   75            | expr . MODULO expr
   76            | expr . GREATER expr
   77            | expr . LESS expr
   78            | expr . GREATER_EQUAL expr
   79            | expr . LESS_EQUAL expr
   80            | expr . EQUALITY expr
   81            | expr . NOT_EQUAL expr
   81            | expr NOT_EQUAL expr .
   82            | expr . CONDITIONAL_AND expr
   83            | expr . CONDITIONAL_OR expr

    ADD              shift, and go to state 108
    SUBTRACT         shift, and go to state 109
    MULTIPLY         shift, and go to state 110
    DIVIDE           shift, and go to state 111
    EQUALITY         shift, and go to state 112
    NOT_EQUAL        shift, and go to state 113
    GREATER_EQUAL    shift, and go to state 114
    LESS_EQUAL       shift, and go to state 115
    GREATER          shift, and go to state 116
    LESS             shift, and go to state 117
    CONDITIONAL_AND  shift, and go to state 118
    CONDITIONAL_OR   shift, and go to state 119
    MODULO           shift, and go to state 120

    ADD              [reduce using rule 81 (binary_expr)]
    SUBTRACT         [reduce using rule 81 (binary_expr)]
    MULTIPLY         [reduce using rule 81 (binary_expr)]
    DIVIDE           [reduce using rule 81 (binary_expr)]
    EQUALITY         [reduce using rule 81 (binary_expr)]
    NOT_EQUAL        [reduce using rule 81 (binary_expr)]
    GREATER_EQUAL    [reduce using rule 81 (binary_expr)]
    LESS_EQUAL       [reduce using rule 81 (binary_expr)]
    GREATER          [reduce using rule 81 (binary_expr)]
    LESS             [reduce using rule 81 (binary_expr)]
    CONDITIONAL_AND  [reduce using rule 81 (binary_expr)]
    CONDITIONAL_OR   [reduce using rule 81 (binary_expr)]
    MODULO           [reduce using rule 81 (binary_expr)]
    $default         reduce using rule 81 (binary_expr)


state 137

   71 binary_expr: expr . ADD expr
   72            | expr . SUBTRACT expr
   73            | expr . MULTIPLY expr
   74            | expr . DIVIDE expr
   75            | expr . MODULO expr
   76            | expr . GREATER expr
   77            | expr . LESS expr
   78            | expr . GREATER_EQUAL expr
   78            | expr GREATER_EQUAL expr .
   79            | expr . LESS_EQUAL expr
   80            | expr . EQUALITY expr
   81            | expr . NOT_EQUAL expr
   82            | expr . CONDITIONAL_AND expr
   83            | expr . CONDITIONAL_OR expr

    ADD              shift, and go to state 108
    SUBTRACT         shift, and go to state 109
    MULTIPLY         shift, and go to state 110
    DIVIDE           shift, and go to state 111
    EQUALITY         shift, and go to state 112
    NOT_EQUAL        shift, and go to state 113
    GREATER_EQUAL    shift, and go to state 114
    LESS_EQUAL       shift, and go to state 115
    GREATER          shift, and go to state 116
    LESS             shift, and go to state 117
    CONDITIONAL_AND  shift, and go to state 118
    CONDITIONAL_OR   shift, and go to state 119
    MODULO           shift, and go to state 120

    ADD              [reduce using rule 78 (binary_expr)]
    SUBTRACT         [reduce using rule 78 (binary_expr)]
    MULTIPLY         [reduce using rule 78 (binary_expr)]
    DIVIDE           [reduce using rule 78 (binary_expr)]
    EQUALITY         [reduce using rule 78 (binary_expr)]
    NOT_EQUAL        [reduce using rule 78 (binary_expr)]
    GREATER_EQUAL    [reduce using rule 78 (binary_expr)]
    LESS_EQUAL       [reduce using rule 78 (binary_expr)]
    GREATER          [reduce using rule 78 (binary_expr)]
    LESS             [reduce using rule 78 (binary_expr)]
    CONDITIONAL_AND  [reduce using rule 78 (binary_expr)]
    CONDITIONAL_OR   [reduce using rule 78 (binary_expr)]
    MODULO           [reduce using rule 78 (binary_expr)]
    $default         reduce using rule 78 (binary_expr)


state 138

   71 binary_expr: expr . ADD expr
   72            | expr . SUBTRACT expr
   73            | expr . MULTIPLY expr
   74            | expr . DIVIDE expr
   75            | expr . MODULO expr
   76            | expr . GREATER expr
   77            | expr . LESS expr
   78            | expr . GREATER_EQUAL expr
   79            | expr . LESS_EQUAL expr
   79            | expr LESS_EQUAL expr .
   80            | expr . EQUALITY expr
   81            | expr . NOT_EQUAL expr
   82            | expr . CONDITIONAL_AND expr
   83            | expr . CONDITIONAL_OR expr

    ADD              shift, and go to state 108
    SUBTRACT         shift, and go to state 109
    MULTIPLY         shift, and go to state 110
    DIVIDE           shift, and go to state 111
    EQUALITY         shift, and go to state 112
    NOT_EQUAL        shift, and go to state 113
    GREATER_EQUAL    shift, and go to state 114
    LESS_EQUAL       shift, and go to state 115
    GREATER          shift, and go to state 116
    LESS             shift, and go to state 117
    CONDITIONAL_AND  shift, and go to state 118
    CONDITIONAL_OR   shift, and go to state 119
    MODULO           shift, and go to state 120

    ADD              [reduce using rule 79 (binary_expr)]
    SUBTRACT         [reduce using rule 79 (binary_expr)]
    MULTIPLY         [reduce using rule 79 (binary_expr)]
    DIVIDE           [reduce using rule 79 (binary_expr)]
    EQUALITY         [reduce using rule 79 (binary_expr)]
    NOT_EQUAL        [reduce using rule 79 (binary_expr)]
    GREATER_EQUAL    [reduce using rule 79 (binary_expr)]
    LESS_EQUAL       [reduce using rule 79 (binary_expr)]
    GREATER          [reduce using rule 79 (binary_expr)]
    LESS             [reduce using rule 79 (binary_expr)]
    CONDITIONAL_AND  [reduce using rule 79 (binary_expr)]
    CONDITIONAL_OR   [reduce using rule 79 (binary_expr)]
    MODULO           [reduce using rule 79 (binary_expr)]
    $default         reduce using rule 79 (binary_expr)


state 139

   71 binary_expr: expr . ADD expr
   72            | expr . SUBTRACT expr
   73            | expr . MULTIPLY expr
   74            | expr . DIVIDE expr
   75            | expr . MODULO expr
   76            | expr . GREATER expr
   76            | expr GREATER expr .
   77            | expr . LESS expr
   78            | expr . GREATER_EQUAL expr
   79            | expr . LESS_EQUAL expr
   80            | expr . EQUALITY expr
   81            | expr . NOT_EQUAL expr
   82            | expr . CONDITIONAL_AND expr
   83            | expr . CONDITIONAL_OR expr

    ADD              shift, and go to state 108
    SUBTRACT         shift, and go to state 109
    MULTIPLY         shift, and go to state 110
    DIVIDE           shift, and go to state 111
    EQUALITY         shift, and go to state 112
    NOT_EQUAL        shift, and go to state 113
    GREATER_EQUAL    shift, and go to state 114
    LESS_EQUAL       shift, and go to state 115
    GREATER          shift, and go to state 116
    LESS             shift, and go to state 117
    CONDITIONAL_AND  shift, and go to state 118
    CONDITIONAL_OR   shift, and go to state 119
    MODULO           shift, and go to state 120

    ADD              [reduce using rule 76 (binary_expr)]
    SUBTRACT         [reduce using rule 76 (binary_expr)]
    MULTIPLY         [reduce using rule 76 (binary_expr)]
    DIVIDE           [reduce using rule 76 (binary_expr)]
    EQUALITY         [reduce using rule 76 (binary_expr)]
    NOT_EQUAL        [reduce using rule 76 (binary_expr)]
    GREATER_EQUAL    [reduce using rule 76 (binary_expr)]
    LESS_EQUAL       [reduce using rule 76 (binary_expr)]
    GREATER          [reduce using rule 76 (binary_expr)]
    LESS             [reduce using rule 76 (binary_expr)]
    CONDITIONAL_AND  [reduce using rule 76 (binary_expr)]
    CONDITIONAL_OR   [reduce using rule 76 (binary_expr)]
    MODULO           [reduce using rule 76 (binary_expr)]
    $default         reduce using rule 76 (binary_expr)


state 140

   71 binary_expr: expr . ADD expr
   72            | expr . SUBTRACT expr
   73            | expr . MULTIPLY expr
   74            | expr . DIVIDE expr
   75            | expr . MODULO expr
   76            | expr . GREATER expr
   77            | expr . LESS expr
   77            | expr LESS expr .
   78            | expr . GREATER_EQUAL expr
   79            | expr . LESS_EQUAL expr
   80            | expr . EQUALITY expr
   81            | expr . NOT_EQUAL expr
   82            | expr . CONDITIONAL_AND expr
   83            | expr . CONDITIONAL_OR expr

    ADD              shift, and go to state 108
    SUBTRACT         shift, and go to state 109
    MULTIPLY         shift, and go to state 110
    DIVIDE           shift, and go to state 111
    EQUALITY         shift, and go to state 112
    NOT_EQUAL        shift, and go to state 113
    GREATER_EQUAL    shift, and go to state 114
    LESS_EQUAL       shift, and go to state 115
    GREATER          shift, and go to state 116
    LESS             shift, and go to state 117
    CONDITIONAL_AND  shift, and go to state 118
    CONDITIONAL_OR   shift, and go to state 119
    MODULO           shift, and go to state 120

    ADD              [reduce using rule 77 (binary_expr)]
    SUBTRACT         [reduce using rule 77 (binary_expr)]
    MULTIPLY         [reduce using rule 77 (binary_expr)]
    DIVIDE           [reduce using rule 77 (binary_expr)]
    EQUALITY         [reduce using rule 77 (binary_expr)]
    NOT_EQUAL        [reduce using rule 77 (binary_expr)]
    GREATER_EQUAL    [reduce using rule 77 (binary_expr)]
    LESS_EQUAL       [reduce using rule 77 (binary_expr)]
    GREATER          [reduce using rule 77 (binary_expr)]
    LESS             [reduce using rule 77 (binary_expr)]
    CONDITIONAL_AND  [reduce using rule 77 (binary_expr)]
    CONDITIONAL_OR   [reduce using rule 77 (binary_expr)]
    MODULO           [reduce using rule 77 (binary_expr)]
    $default         reduce using rule 77 (binary_expr)


state 141

   71 binary_expr: expr . ADD expr
   72            | expr . SUBTRACT expr
   73            | expr . MULTIPLY expr
   74            | expr . DIVIDE expr
   75            | expr . MODULO expr
   76            | expr . GREATER expr
   77            | expr . LESS expr
   78            | expr . GREATER_EQUAL expr
   79            | expr . LESS_EQUAL expr
   80            | expr . EQUALITY expr
   81            | expr . NOT_EQUAL expr
   82            | expr . CONDITIONAL_AND expr
   82            | expr CONDITIONAL_AND expr .
   83            | expr . CONDITIONAL_OR expr

    ADD              shift, and go to state 108
    SUBTRACT         shift, and go to state 109
    MULTIPLY         shift, and go to state 110
    DIVIDE           shift, and go to state 111
    EQUALITY         shift, and go to state 112
    NOT_EQUAL        shift, and go to state 113
    GREATER_EQUAL    shift, and go to state 114
    LESS_EQUAL       shift, and go to state 115
    GREATER          shift, and go to state 116
    LESS             shift, and go to state 117
    CONDITIONAL_AND  shift, and go to state 118
    CONDITIONAL_OR   shift, and go to state 119
    MODULO           shift, and go to state 120

    ADD              [reduce using rule 82 (binary_expr)]
    SUBTRACT         [reduce using rule 82 (binary_expr)]
    MULTIPLY         [reduce using rule 82 (binary_expr)]
    DIVIDE           [reduce using rule 82 (binary_expr)]
    EQUALITY         [reduce using rule 82 (binary_expr)]
    NOT_EQUAL        [reduce using rule 82 (binary_expr)]
    GREATER_EQUAL    [reduce using rule 82 (binary_expr)]
    LESS_EQUAL       [reduce using rule 82 (binary_expr)]
    GREATER          [reduce using rule 82 (binary_expr)]
    LESS             [reduce using rule 82 (binary_expr)]
    CONDITIONAL_AND  [reduce using rule 82 (binary_expr)]
    CONDITIONAL_OR   [reduce using rule 82 (binary_expr)]
    MODULO           [reduce using rule 82 (binary_expr)]
    $default         reduce using rule 82 (binary_expr)


state 142

   71 binary_expr: expr . ADD expr
   72            | expr . SUBTRACT expr
   73            | expr . MULTIPLY expr
   74            | expr . DIVIDE expr
   75            | expr . MODULO expr
   76            | expr . GREATER expr
   77            | expr . LESS expr
   78            | expr . GREATER_EQUAL expr
   79            | expr . LESS_EQUAL expr
   80            | expr . EQUALITY expr
   81            | expr . NOT_EQUAL expr
   82            | expr . CONDITIONAL_AND expr
   83            | expr . CONDITIONAL_OR expr
   83            | expr CONDITIONAL_OR expr .

    ADD              shift, and go to state 108
    SUBTRACT         shift, and go to state 109
    MULTIPLY         shift, and go to state 110
    DIVIDE           shift, and go to state 111
    EQUALITY         shift, and go to state 112
    NOT_EQUAL        shift, and go to state 113
    GREATER_EQUAL    shift, and go to state 114
    LESS_EQUAL       shift, and go to state 115
    GREATER          shift, and go to state 116
    LESS             shift, and go to state 117
    CONDITIONAL_AND  shift, and go to state 118
    CONDITIONAL_OR   shift, and go to state 119
    MODULO           shift, and go to state 120

    ADD              [reduce using rule 83 (binary_expr)]
    SUBTRACT         [reduce using rule 83 (binary_expr)]
    MULTIPLY         [reduce using rule 83 (binary_expr)]
    DIVIDE           [reduce using rule 83 (binary_expr)]
    EQUALITY         [reduce using rule 83 (binary_expr)]
    NOT_EQUAL        [reduce using rule 83 (binary_expr)]
    GREATER_EQUAL    [reduce using rule 83 (binary_expr)]
    LESS_EQUAL       [reduce using rule 83 (binary_expr)]
    GREATER          [reduce using rule 83 (binary_expr)]
    LESS             [reduce using rule 83 (binary_expr)]
    CONDITIONAL_AND  [reduce using rule 83 (binary_expr)]
    CONDITIONAL_OR   [reduce using rule 83 (binary_expr)]
    MODULO           [reduce using rule 83 (binary_expr)]
    $default         reduce using rule 83 (binary_expr)


state 143

   71 binary_expr: expr . ADD expr
   72            | expr . SUBTRACT expr
   73            | expr . MULTIPLY expr
   74            | expr . DIVIDE expr
   75            | expr . MODULO expr
   75            | expr MODULO expr .
   76            | expr . GREATER expr
   77            | expr . LESS expr
   78            | expr . GREATER_EQUAL expr
   79            | expr . LESS_EQUAL expr
   80            | expr . EQUALITY expr
   81            | expr . NOT_EQUAL expr
   82            | expr . CONDITIONAL_AND expr
   83            | expr . CONDITIONAL_OR expr

    ADD              shift, and go to state 108
    SUBTRACT         shift, and go to state 109
    MULTIPLY         shift, and go to state 110
    DIVIDE           shift, and go to state 111
    EQUALITY         shift, and go to state 112
    NOT_EQUAL        shift, and go to state 113
    GREATER_EQUAL    shift, and go to state 114
    LESS_EQUAL       shift, and go to state 115
    GREATER          shift, and go to state 116
    LESS             shift, and go to state 117
    CONDITIONAL_AND  shift, and go to state 118
    CONDITIONAL_OR   shift, and go to state 119
    MODULO           shift, and go to state 120

    ADD              [reduce using rule 75 (binary_expr)]
    SUBTRACT         [reduce using rule 75 (binary_expr)]
    MULTIPLY         [reduce using rule 75 (binary_expr)]
    DIVIDE           [reduce using rule 75 (binary_expr)]
    EQUALITY         [reduce using rule 75 (binary_expr)]
    NOT_EQUAL        [reduce using rule 75 (binary_expr)]
    GREATER_EQUAL    [reduce using rule 75 (binary_expr)]
    LESS_EQUAL       [reduce using rule 75 (binary_expr)]
    GREATER          [reduce using rule 75 (binary_expr)]
    LESS             [reduce using rule 75 (binary_expr)]
    CONDITIONAL_AND  [reduce using rule 75 (binary_expr)]
    CONDITIONAL_OR   [reduce using rule 75 (binary_expr)]
    MODULO           [reduce using rule 75 (binary_expr)]
    $default         reduce using rule 75 (binary_expr)


state 144

   43 for_statement: FOR ID EQUAL expr . COMMA expr code_block
   71 binary_expr: expr . ADD expr
   72            | expr . SUBTRACT expr
   73            | expr . MULTIPLY expr
   74            | expr . DIVIDE expr
   75            | expr . MODULO expr
   76            | expr . GREATER expr
   77            | expr . LESS expr
   78            | expr . GREATER_EQUAL expr
   79            | expr . LESS_EQUAL expr
   80            | expr . EQUALITY expr
   81            | expr . NOT_EQUAL expr
   82            | expr . CONDITIONAL_AND expr
   83            | expr . CONDITIONAL_OR expr

    ADD              shift, and go to state 108
    SUBTRACT         shift, and go to state 109
    MULTIPLY         shift, and go to state 110
    DIVIDE           shift, and go to state 111
    EQUALITY         shift, and go to state 112
    NOT_EQUAL        shift, and go to state 113
    GREATER_EQUAL    shift, and go to state 114
    LESS_EQUAL       shift, and go to state 115
    GREATER          shift, and go to state 116
    LESS             shift, and go to state 117
    CONDITIONAL_AND  shift, and go to state 118
    CONDITIONAL_OR   shift, and go to state 119
    MODULO           shift, and go to state 120
    COMMA            shift, and go to state 154


state 145

   40 if_statement: IF OPEN expr CLOSE . code_block else_statement

    CURLY_OPEN  shift, and go to state 40

    code_block  go to state 155


state 146

   39 location: ID SQUARE_OPEN expr SQUARE_CLOSE .

    $default  reduce using rule 39 (location)


state 147

   52 normal_call: ID OPEN method_call_args CLOSE .

    $default  reduce using rule 52 (normal_call)


state 148

   56 non_empty_method_call_args: non_empty_method_call_args COMMA . expr

    CALLOUT       shift, and go to state 53
    TRUE          shift, and go to state 76
    FALSE         shift, and go to state 77
    NUM           shift, and go to state 24
    HEX_LITERAL   shift, and go to state 25
    CHAR_LITERAL  shift, and go to state 78
    ID            shift, and go to state 59
    SUBTRACT      shift, and go to state 79
    NOT           shift, and go to state 80
    OPEN          shift, and go to state 81

    location       go to state 82
    method_call    go to state 84
    normal_call    go to state 70
    callout_call   go to state 71
    expr           go to state 156
    binary_expr    go to state 86
    enclosed_expr  go to state 87
    unary_expr     go to state 88
    char_literal   go to state 89
    int_literal    go to state 90
    bool_literal   go to state 91


state 149

   37 assign_statement: location assign_op expr SEMI_COLON .

    $default  reduce using rule 37 (assign_statement)


state 150

   58 callout_call: CALLOUT OPEN string_literal COMMA non_empty_callout_args . CLOSE
   60 non_empty_callout_args: non_empty_callout_args . COMMA callout_arg

    CLOSE  shift, and go to state 157
    COMMA  shift, and go to state 158


state 151

   59 non_empty_callout_args: callout_arg .

    $default  reduce using rule 59 (non_empty_callout_args)


state 152

   61 callout_arg: expr .
   71 binary_expr: expr . ADD expr
   72            | expr . SUBTRACT expr
   73            | expr . MULTIPLY expr
   74            | expr . DIVIDE expr
   75            | expr . MODULO expr
   76            | expr . GREATER expr
   77            | expr . LESS expr
   78            | expr . GREATER_EQUAL expr
   79            | expr . LESS_EQUAL expr
   80            | expr . EQUALITY expr
   81            | expr . NOT_EQUAL expr
   82            | expr . CONDITIONAL_AND expr
   83            | expr . CONDITIONAL_OR expr

    ADD              shift, and go to state 108
    SUBTRACT         shift, and go to state 109
    MULTIPLY         shift, and go to state 110
    DIVIDE           shift, and go to state 111
    EQUALITY         shift, and go to state 112
    NOT_EQUAL        shift, and go to state 113
    GREATER_EQUAL    shift, and go to state 114
    LESS_EQUAL       shift, and go to state 115
    GREATER          shift, and go to state 116
    LESS             shift, and go to state 117
    CONDITIONAL_AND  shift, and go to state 118
    CONDITIONAL_OR   shift, and go to state 119
    MODULO           shift, and go to state 120

    $default  reduce using rule 61 (callout_arg)


state 153

   62 callout_arg: string_literal .

    $default  reduce using rule 62 (callout_arg)


state 154

   43 for_statement: FOR ID EQUAL expr COMMA . expr code_block

    CALLOUT       shift, and go to state 53
    TRUE          shift, and go to state 76
    FALSE         shift, and go to state 77
    NUM           shift, and go to state 24
    HEX_LITERAL   shift, and go to state 25
    CHAR_LITERAL  shift, and go to state 78
    ID            shift, and go to state 59
    SUBTRACT      shift, and go to state 79
    NOT           shift, and go to state 80
    OPEN          shift, and go to state 81

    location       go to state 82
    method_call    go to state 84
    normal_call    go to state 70
    callout_call   go to state 71
    expr           go to state 159
    binary_expr    go to state 86
    enclosed_expr  go to state 87
    unary_expr     go to state 88
    char_literal   go to state 89
    int_literal    go to state 90
    bool_literal   go to state 91


state 155

   40 if_statement: IF OPEN expr CLOSE code_block . else_statement

    ELSE  shift, and go to state 160

    $default  reduce using rule 41 (else_statement)

    else_statement  go to state 161


state 156

   56 non_empty_method_call_args: non_empty_method_call_args COMMA expr .
   71 binary_expr: expr . ADD expr
   72            | expr . SUBTRACT expr
   73            | expr . MULTIPLY expr
   74            | expr . DIVIDE expr
   75            | expr . MODULO expr
   76            | expr . GREATER expr
   77            | expr . LESS expr
   78            | expr . GREATER_EQUAL expr
   79            | expr . LESS_EQUAL expr
   80            | expr . EQUALITY expr
   81            | expr . NOT_EQUAL expr
   82            | expr . CONDITIONAL_AND expr
   83            | expr . CONDITIONAL_OR expr

    ADD              shift, and go to state 108
    SUBTRACT         shift, and go to state 109
    MULTIPLY         shift, and go to state 110
    DIVIDE           shift, and go to state 111
    EQUALITY         shift, and go to state 112
    NOT_EQUAL        shift, and go to state 113
    GREATER_EQUAL    shift, and go to state 114
    LESS_EQUAL       shift, and go to state 115
    GREATER          shift, and go to state 116
    LESS             shift, and go to state 117
    CONDITIONAL_AND  shift, and go to state 118
    CONDITIONAL_OR   shift, and go to state 119
    MODULO           shift, and go to state 120

    $default  reduce using rule 56 (non_empty_method_call_args)


state 157

   58 callout_call: CALLOUT OPEN string_literal COMMA non_empty_callout_args CLOSE .

    $default  reduce using rule 58 (callout_call)


state 158

   60 non_empty_callout_args: non_empty_callout_args COMMA . callout_arg

    CALLOUT       shift, and go to state 53
    TRUE          shift, and go to state 76
    FALSE         shift, and go to state 77
    NUM           shift, and go to state 24
    HEX_LITERAL   shift, and go to state 25
    CHAR_LITERAL  shift, and go to state 78
    STRING        shift, and go to state 102
    ID            shift, and go to state 59
    SUBTRACT      shift, and go to state 79
    NOT           shift, and go to state 80
    OPEN          shift, and go to state 81

    location        go to state 82
    method_call     go to state 84
    normal_call     go to state 70
    callout_call    go to state 71
    callout_arg     go to state 162
    expr            go to state 152
    binary_expr     go to state 86
    enclosed_expr   go to state 87
    unary_expr      go to state 88
    char_literal    go to state 89
    int_literal     go to state 90
    bool_literal    go to state 91
    string_literal  go to state 153


state 159

   43 for_statement: FOR ID EQUAL expr COMMA expr . code_block
   71 binary_expr: expr . ADD expr
   72            | expr . SUBTRACT expr
   73            | expr . MULTIPLY expr
   74            | expr . DIVIDE expr
   75            | expr . MODULO expr
   76            | expr . GREATER expr
   77            | expr . LESS expr
   78            | expr . GREATER_EQUAL expr
   79            | expr . LESS_EQUAL expr
   80            | expr . EQUALITY expr
   81            | expr . NOT_EQUAL expr
   82            | expr . CONDITIONAL_AND expr
   83            | expr . CONDITIONAL_OR expr

    ADD              shift, and go to state 108
    SUBTRACT         shift, and go to state 109
    MULTIPLY         shift, and go to state 110
    DIVIDE           shift, and go to state 111
    EQUALITY         shift, and go to state 112
    NOT_EQUAL        shift, and go to state 113
    GREATER_EQUAL    shift, and go to state 114
    LESS_EQUAL       shift, and go to state 115
    GREATER          shift, and go to state 116
    LESS             shift, and go to state 117
    CONDITIONAL_AND  shift, and go to state 118
    CONDITIONAL_OR   shift, and go to state 119
    MODULO           shift, and go to state 120
    CURLY_OPEN       shift, and go to state 40

    code_block  go to state 163


state 160

   42 else_statement: ELSE . code_block

    CURLY_OPEN  shift, and go to state 40

    code_block  go to state 164


state 161

   40 if_statement: IF OPEN expr CLOSE code_block else_statement .

    $default  reduce using rule 40 (if_statement)


state 162

   60 non_empty_callout_args: non_empty_callout_args COMMA callout_arg .

    $default  reduce using rule 60 (non_empty_callout_args)


state 163

   43 for_statement: FOR ID EQUAL expr COMMA expr code_block .

    $default  reduce using rule 43 (for_statement)


state 164

   42 else_statement: ELSE code_block .

    $default  reduce using rule 42 (else_statement)
