Terminals which are not used

   ABSOLUTE


State 6 conflicts: 2 shift/reduce
State 40 conflicts: 1 reduce/reduce
State 99 conflicts: 13 shift/reduce
State 100 conflicts: 13 shift/reduce
State 132 conflicts: 13 shift/reduce


Grammar

    0 $accept: program_declaration $end

    1 program_declaration: CLASS PROGRAM CURLY_OPEN field_declarations method_declarations CURLY_CLOSE

    2 var_type: INT
    3         | BOOLEAN

    4 field_declarations: /* empty */
    5                   | field_declarations field_declaration SEMI_COLON

    6 field_declaration: var_type field_names

    7 field_names: field_name
    8            | field_names COMMA field_name

    9 field_name: ID
   10           | ID SQUARE_OPEN int_literal SQUARE_CLOSE

   11 method_declarations: /* empty */
   12                    | method_declarations method_declaration

   13 method_declaration: VOID ID OPEN parameter_declarations CLOSE code_block
   14                   | var_type ID OPEN parameter_declarations CLOSE code_block

   15 parameter_declarations: /* empty */
   16                       | non_empty_parameter_declaration

   17 non_empty_parameter_declaration: parameter_declaration
   18                                | non_empty_parameter_declaration COMMA parameter_declaration

   19 parameter_declaration: var_type ID

   20 code_block: CURLY_OPEN block CURLY_CLOSE

   21 block: /* empty */
   22      | var_declarations statements

   23 var_declarations: /* empty */
   24                 | var_declarations var_declaration SEMI_COLON

   25 var_declaration: var_type var_names

   26 var_names: ID
   27          | var_names COMMA ID

   28 statements: /* empty */
   29           | statements statement

   30 statement: assign_statement
   31          | method_call_statment
   32          | if_statement
   33          | for_statement
   34          | return_statement
   35          | terminal_statement

   36 assign_statement: location assign_op expr SEMI_COLON

   37 location: ID
   38         | ID SQUARE_OPEN expr SQUARE_CLOSE

   39 method_call_statment: method_call SEMI_COLON

   40 if_statement: IF OPEN expr CLOSE code_block else_statement

   41 else_statement: /* empty */
   42               | ELSE code_block

   43 for_statement: FOR ID EQUAL expr COMMA expr code_block

   44 return_statement: RETURN return_value SEMI_COLON

   45 return_value: /* empty */
   46             | expr

   47 terminal_statement: BREAK SEMI_COLON
   48                   | CONTINUE SEMI_COLON

   49 method_call: ID OPEN method_call_args CLOSE
   50            | CALLOUT OPEN string_literal CLOSE
   51            | CALLOUT OPEN string_literal COMMA non_empty_callout_args CLOSE

   52 method_call_args: /* empty */
   53                 | non_empty_method_call_args

   54 non_empty_method_call_args: method_call_arg
   55                           | non_empty_method_call_args COMMA method_call_arg

   56 method_call_arg: expr

   57 non_empty_callout_args: callout_arg
   58                       | non_empty_callout_args COMMA callout_arg

   59 callout_arg: expr
   60            | string_literal

   61 expr: location
   62     | method_call
   63     | literal
   64     | expr bin_op expr
   65     | SUBTRACT expr
   66     | NOT expr
   67     | OPEN expr CLOSE

   68 assign_op: EQUAL
   69          | PLUS_EQUAL
   70          | MINUS_EQUAL

   71 bin_op: arith_op
   72       | rel_op
   73       | eq_op
   74       | cond_op

   75 arith_op: ADD
   76         | SUBTRACT
   77         | MULTIPLY
   78         | DIVIDE
   79         | MODULO

   80 rel_op: GREATER
   81       | LESS
   82       | GREATER_EQUAL
   83       | LESS_EQUAL

   84 eq_op: EQUALITY
   85      | NOT_EQUAL

   86 cond_op: CONDITIONAL_AND
   87        | CONDITIONAL_OR

   88 literal: char_literal
   89        | bool_literal
   90        | int_literal

   91 char_literal: CHAR_LITERAL

   92 int_literal: NUM
   93            | HEX_LITERAL

   94 bool_literal: TRUE
   95             | FALSE

   96 string_literal: STRING


Terminals, with rules where they appear

$end (0) 0
error (256)
PROGRAM (258) 1
CLASS (259) 1
CALLOUT (260) 50 51
VOID (261) 13
INT (262) 2
BOOLEAN (263) 3
TRUE (264) 94
FALSE (265) 95
BREAK (266) 47
CONTINUE (267) 48
RETURN (268) 44
FOR (269) 43
IF (270) 40
ELSE (271) 42
NUM (272) 92
HEX_LITERAL (273) 93
CHAR_LITERAL (274) 91
STRING (275) 96
ID (276) 9 10 13 14 19 26 27 37 38 43 49
ADD (277) 75
SUBTRACT (278) 65 76
MULTIPLY (279) 77
DIVIDE (280) 78
EQUAL (281) 43 68
PLUS_EQUAL (282) 69
MINUS_EQUAL (283) 70
EQUALITY (284) 84
NOT_EQUAL (285) 85
GREATER_EQUAL (286) 82
LESS_EQUAL (287) 83
GREATER (288) 80
LESS (289) 81
CONDITIONAL_AND (290) 86
CONDITIONAL_OR (291) 87
NOT (292) 66
ABSOLUTE (293)
MODULO (294) 79
CURLY_OPEN (295) 1 20
CURLY_CLOSE (296) 1 20
SQUARE_OPEN (297) 10 38
SQUARE_CLOSE (298) 10 38
OPEN (299) 13 14 40 49 50 51 67
CLOSE (300) 13 14 40 49 50 51 67
SEMI_COLON (301) 5 24 36 39 44 47 48
COMMA (302) 8 18 27 43 51 55 58


Nonterminals, with rules where they appear

$accept (48)
    on left: 0
program_declaration (49)
    on left: 1, on right: 0
var_type (50)
    on left: 2 3, on right: 6 14 19 25
field_declarations (51)
    on left: 4 5, on right: 1 5
field_declaration (52)
    on left: 6, on right: 5
field_names (53)
    on left: 7 8, on right: 6 8
field_name (54)
    on left: 9 10, on right: 7 8
method_declarations (55)
    on left: 11 12, on right: 1 12
method_declaration (56)
    on left: 13 14, on right: 12
parameter_declarations (57)
    on left: 15 16, on right: 13 14
non_empty_parameter_declaration (58)
    on left: 17 18, on right: 16 18
parameter_declaration (59)
    on left: 19, on right: 17 18
code_block (60)
    on left: 20, on right: 13 14 40 42 43
block (61)
    on left: 21 22, on right: 20
var_declarations (62)
    on left: 23 24, on right: 22 24
var_declaration (63)
    on left: 25, on right: 24
var_names (64)
    on left: 26 27, on right: 25 27
statements (65)
    on left: 28 29, on right: 22 29
statement (66)
    on left: 30 31 32 33 34 35, on right: 29
assign_statement (67)
    on left: 36, on right: 30
location (68)
    on left: 37 38, on right: 36 61
method_call_statment (69)
    on left: 39, on right: 31
if_statement (70)
    on left: 40, on right: 32
else_statement (71)
    on left: 41 42, on right: 40
for_statement (72)
    on left: 43, on right: 33
return_statement (73)
    on left: 44, on right: 34
return_value (74)
    on left: 45 46, on right: 44
terminal_statement (75)
    on left: 47 48, on right: 35
method_call (76)
    on left: 49 50 51, on right: 39 62
method_call_args (77)
    on left: 52 53, on right: 49
non_empty_method_call_args (78)
    on left: 54 55, on right: 53 55
method_call_arg (79)
    on left: 56, on right: 54 55
non_empty_callout_args (80)
    on left: 57 58, on right: 51 58
callout_arg (81)
    on left: 59 60, on right: 57 58
expr (82)
    on left: 61 62 63 64 65 66 67, on right: 36 38 40 43 46 56 59 64
    65 66 67
assign_op (83)
    on left: 68 69 70, on right: 36
bin_op (84)
    on left: 71 72 73 74, on right: 64
arith_op (85)
    on left: 75 76 77 78 79, on right: 71
rel_op (86)
    on left: 80 81 82 83, on right: 72
eq_op (87)
    on left: 84 85, on right: 73
cond_op (88)
    on left: 86 87, on right: 74
literal (89)
    on left: 88 89 90, on right: 63
char_literal (90)
    on left: 91, on right: 88
int_literal (91)
    on left: 92 93, on right: 10 90
bool_literal (92)
    on left: 94 95, on right: 89
string_literal (93)
    on left: 96, on right: 50 51 60


state 0

    0 $accept: . program_declaration $end

    CLASS  shift, and go to state 1

    program_declaration  go to state 2


state 1

    1 program_declaration: CLASS . PROGRAM CURLY_OPEN field_declarations method_declarations CURLY_CLOSE

    PROGRAM  shift, and go to state 3


state 2

    0 $accept: program_declaration . $end

    $end  shift, and go to state 4


state 3

    1 program_declaration: CLASS PROGRAM . CURLY_OPEN field_declarations method_declarations CURLY_CLOSE

    CURLY_OPEN  shift, and go to state 5


state 4

    0 $accept: program_declaration $end .

    $default  accept


state 5

    1 program_declaration: CLASS PROGRAM CURLY_OPEN . field_declarations method_declarations CURLY_CLOSE

    $default  reduce using rule 4 (field_declarations)

    field_declarations  go to state 6


state 6

    1 program_declaration: CLASS PROGRAM CURLY_OPEN field_declarations . method_declarations CURLY_CLOSE
    5 field_declarations: field_declarations . field_declaration SEMI_COLON

    INT      shift, and go to state 7
    BOOLEAN  shift, and go to state 8

    INT       [reduce using rule 11 (method_declarations)]
    BOOLEAN   [reduce using rule 11 (method_declarations)]
    $default  reduce using rule 11 (method_declarations)

    var_type             go to state 9
    field_declaration    go to state 10
    method_declarations  go to state 11


state 7

    2 var_type: INT .

    $default  reduce using rule 2 (var_type)


state 8

    3 var_type: BOOLEAN .

    $default  reduce using rule 3 (var_type)


state 9

    6 field_declaration: var_type . field_names

    ID  shift, and go to state 12

    field_names  go to state 13
    field_name   go to state 14


state 10

    5 field_declarations: field_declarations field_declaration . SEMI_COLON

    SEMI_COLON  shift, and go to state 15


state 11

    1 program_declaration: CLASS PROGRAM CURLY_OPEN field_declarations method_declarations . CURLY_CLOSE
   12 method_declarations: method_declarations . method_declaration

    VOID         shift, and go to state 16
    INT          shift, and go to state 7
    BOOLEAN      shift, and go to state 8
    CURLY_CLOSE  shift, and go to state 17

    var_type            go to state 18
    method_declaration  go to state 19


state 12

    9 field_name: ID .
   10           | ID . SQUARE_OPEN int_literal SQUARE_CLOSE

    SQUARE_OPEN  shift, and go to state 20

    $default  reduce using rule 9 (field_name)


state 13

    6 field_declaration: var_type field_names .
    8 field_names: field_names . COMMA field_name

    COMMA  shift, and go to state 21

    $default  reduce using rule 6 (field_declaration)


state 14

    7 field_names: field_name .

    $default  reduce using rule 7 (field_names)


state 15

    5 field_declarations: field_declarations field_declaration SEMI_COLON .

    $default  reduce using rule 5 (field_declarations)


state 16

   13 method_declaration: VOID . ID OPEN parameter_declarations CLOSE code_block

    ID  shift, and go to state 22


state 17

    1 program_declaration: CLASS PROGRAM CURLY_OPEN field_declarations method_declarations CURLY_CLOSE .

    $default  reduce using rule 1 (program_declaration)


state 18

   14 method_declaration: var_type . ID OPEN parameter_declarations CLOSE code_block

    ID  shift, and go to state 23


state 19

   12 method_declarations: method_declarations method_declaration .

    $default  reduce using rule 12 (method_declarations)


state 20

   10 field_name: ID SQUARE_OPEN . int_literal SQUARE_CLOSE

    NUM          shift, and go to state 24
    HEX_LITERAL  shift, and go to state 25

    int_literal  go to state 26


state 21

    8 field_names: field_names COMMA . field_name

    ID  shift, and go to state 12

    field_name  go to state 27


state 22

   13 method_declaration: VOID ID . OPEN parameter_declarations CLOSE code_block

    OPEN  shift, and go to state 28


state 23

   14 method_declaration: var_type ID . OPEN parameter_declarations CLOSE code_block

    OPEN  shift, and go to state 29


state 24

   92 int_literal: NUM .

    $default  reduce using rule 92 (int_literal)


state 25

   93 int_literal: HEX_LITERAL .

    $default  reduce using rule 93 (int_literal)


state 26

   10 field_name: ID SQUARE_OPEN int_literal . SQUARE_CLOSE

    SQUARE_CLOSE  shift, and go to state 30


state 27

    8 field_names: field_names COMMA field_name .

    $default  reduce using rule 8 (field_names)


state 28

   13 method_declaration: VOID ID OPEN . parameter_declarations CLOSE code_block

    INT      shift, and go to state 7
    BOOLEAN  shift, and go to state 8

    $default  reduce using rule 15 (parameter_declarations)

    var_type                         go to state 31
    parameter_declarations           go to state 32
    non_empty_parameter_declaration  go to state 33
    parameter_declaration            go to state 34


state 29

   14 method_declaration: var_type ID OPEN . parameter_declarations CLOSE code_block

    INT      shift, and go to state 7
    BOOLEAN  shift, and go to state 8

    $default  reduce using rule 15 (parameter_declarations)

    var_type                         go to state 31
    parameter_declarations           go to state 35
    non_empty_parameter_declaration  go to state 33
    parameter_declaration            go to state 34


state 30

   10 field_name: ID SQUARE_OPEN int_literal SQUARE_CLOSE .

    $default  reduce using rule 10 (field_name)


state 31

   19 parameter_declaration: var_type . ID

    ID  shift, and go to state 36


state 32

   13 method_declaration: VOID ID OPEN parameter_declarations . CLOSE code_block

    CLOSE  shift, and go to state 37


state 33

   16 parameter_declarations: non_empty_parameter_declaration .
   18 non_empty_parameter_declaration: non_empty_parameter_declaration . COMMA parameter_declaration

    COMMA  shift, and go to state 38

    $default  reduce using rule 16 (parameter_declarations)


state 34

   17 non_empty_parameter_declaration: parameter_declaration .

    $default  reduce using rule 17 (non_empty_parameter_declaration)


state 35

   14 method_declaration: var_type ID OPEN parameter_declarations . CLOSE code_block

    CLOSE  shift, and go to state 39


state 36

   19 parameter_declaration: var_type ID .

    $default  reduce using rule 19 (parameter_declaration)


state 37

   13 method_declaration: VOID ID OPEN parameter_declarations CLOSE . code_block

    CURLY_OPEN  shift, and go to state 40

    code_block  go to state 41


state 38

   18 non_empty_parameter_declaration: non_empty_parameter_declaration COMMA . parameter_declaration

    INT      shift, and go to state 7
    BOOLEAN  shift, and go to state 8

    var_type               go to state 31
    parameter_declaration  go to state 42


state 39

   14 method_declaration: var_type ID OPEN parameter_declarations CLOSE . code_block

    CURLY_OPEN  shift, and go to state 40

    code_block  go to state 43


state 40

   20 code_block: CURLY_OPEN . block CURLY_CLOSE

    CURLY_CLOSE  reduce using rule 21 (block)
    CURLY_CLOSE  [reduce using rule 23 (var_declarations)]
    $default     reduce using rule 23 (var_declarations)

    block             go to state 44
    var_declarations  go to state 45


state 41

   13 method_declaration: VOID ID OPEN parameter_declarations CLOSE code_block .

    $default  reduce using rule 13 (method_declaration)


state 42

   18 non_empty_parameter_declaration: non_empty_parameter_declaration COMMA parameter_declaration .

    $default  reduce using rule 18 (non_empty_parameter_declaration)


state 43

   14 method_declaration: var_type ID OPEN parameter_declarations CLOSE code_block .

    $default  reduce using rule 14 (method_declaration)


state 44

   20 code_block: CURLY_OPEN block . CURLY_CLOSE

    CURLY_CLOSE  shift, and go to state 46


state 45

   22 block: var_declarations . statements
   24 var_declarations: var_declarations . var_declaration SEMI_COLON

    INT      shift, and go to state 7
    BOOLEAN  shift, and go to state 8

    $default  reduce using rule 28 (statements)

    var_type         go to state 47
    var_declaration  go to state 48
    statements       go to state 49


state 46

   20 code_block: CURLY_OPEN block CURLY_CLOSE .

    $default  reduce using rule 20 (code_block)


state 47

   25 var_declaration: var_type . var_names

    ID  shift, and go to state 50

    var_names  go to state 51


state 48

   24 var_declarations: var_declarations var_declaration . SEMI_COLON

    SEMI_COLON  shift, and go to state 52


state 49

   22 block: var_declarations statements .
   29 statements: statements . statement

    CALLOUT   shift, and go to state 53
    BREAK     shift, and go to state 54
    CONTINUE  shift, and go to state 55
    RETURN    shift, and go to state 56
    FOR       shift, and go to state 57
    IF        shift, and go to state 58
    ID        shift, and go to state 59

    $default  reduce using rule 22 (block)

    statement             go to state 60
    assign_statement      go to state 61
    location              go to state 62
    method_call_statment  go to state 63
    if_statement          go to state 64
    for_statement         go to state 65
    return_statement      go to state 66
    terminal_statement    go to state 67
    method_call           go to state 68


state 50

   26 var_names: ID .

    $default  reduce using rule 26 (var_names)


state 51

   25 var_declaration: var_type var_names .
   27 var_names: var_names . COMMA ID

    COMMA  shift, and go to state 69

    $default  reduce using rule 25 (var_declaration)


state 52

   24 var_declarations: var_declarations var_declaration SEMI_COLON .

    $default  reduce using rule 24 (var_declarations)


state 53

   50 method_call: CALLOUT . OPEN string_literal CLOSE
   51            | CALLOUT . OPEN string_literal COMMA non_empty_callout_args CLOSE

    OPEN  shift, and go to state 70


state 54

   47 terminal_statement: BREAK . SEMI_COLON

    SEMI_COLON  shift, and go to state 71


state 55

   48 terminal_statement: CONTINUE . SEMI_COLON

    SEMI_COLON  shift, and go to state 72


state 56

   44 return_statement: RETURN . return_value SEMI_COLON

    CALLOUT       shift, and go to state 53
    TRUE          shift, and go to state 73
    FALSE         shift, and go to state 74
    NUM           shift, and go to state 24
    HEX_LITERAL   shift, and go to state 25
    CHAR_LITERAL  shift, and go to state 75
    ID            shift, and go to state 59
    SUBTRACT      shift, and go to state 76
    NOT           shift, and go to state 77
    OPEN          shift, and go to state 78

    $default  reduce using rule 45 (return_value)

    location      go to state 79
    return_value  go to state 80
    method_call   go to state 81
    expr          go to state 82
    literal       go to state 83
    char_literal  go to state 84
    int_literal   go to state 85
    bool_literal  go to state 86


state 57

   43 for_statement: FOR . ID EQUAL expr COMMA expr code_block

    ID  shift, and go to state 87


state 58

   40 if_statement: IF . OPEN expr CLOSE code_block else_statement

    OPEN  shift, and go to state 88


state 59

   37 location: ID .
   38         | ID . SQUARE_OPEN expr SQUARE_CLOSE
   49 method_call: ID . OPEN method_call_args CLOSE

    SQUARE_OPEN  shift, and go to state 89
    OPEN         shift, and go to state 90

    $default  reduce using rule 37 (location)


state 60

   29 statements: statements statement .

    $default  reduce using rule 29 (statements)


state 61

   30 statement: assign_statement .

    $default  reduce using rule 30 (statement)


state 62

   36 assign_statement: location . assign_op expr SEMI_COLON

    EQUAL        shift, and go to state 91
    PLUS_EQUAL   shift, and go to state 92
    MINUS_EQUAL  shift, and go to state 93

    assign_op  go to state 94


state 63

   31 statement: method_call_statment .

    $default  reduce using rule 31 (statement)


state 64

   32 statement: if_statement .

    $default  reduce using rule 32 (statement)


state 65

   33 statement: for_statement .

    $default  reduce using rule 33 (statement)


state 66

   34 statement: return_statement .

    $default  reduce using rule 34 (statement)


state 67

   35 statement: terminal_statement .

    $default  reduce using rule 35 (statement)


state 68

   39 method_call_statment: method_call . SEMI_COLON

    SEMI_COLON  shift, and go to state 95


state 69

   27 var_names: var_names COMMA . ID

    ID  shift, and go to state 96


state 70

   50 method_call: CALLOUT OPEN . string_literal CLOSE
   51            | CALLOUT OPEN . string_literal COMMA non_empty_callout_args CLOSE

    STRING  shift, and go to state 97

    string_literal  go to state 98


state 71

   47 terminal_statement: BREAK SEMI_COLON .

    $default  reduce using rule 47 (terminal_statement)


state 72

   48 terminal_statement: CONTINUE SEMI_COLON .

    $default  reduce using rule 48 (terminal_statement)


state 73

   94 bool_literal: TRUE .

    $default  reduce using rule 94 (bool_literal)


state 74

   95 bool_literal: FALSE .

    $default  reduce using rule 95 (bool_literal)


state 75

   91 char_literal: CHAR_LITERAL .

    $default  reduce using rule 91 (char_literal)


state 76

   65 expr: SUBTRACT . expr

    CALLOUT       shift, and go to state 53
    TRUE          shift, and go to state 73
    FALSE         shift, and go to state 74
    NUM           shift, and go to state 24
    HEX_LITERAL   shift, and go to state 25
    CHAR_LITERAL  shift, and go to state 75
    ID            shift, and go to state 59
    SUBTRACT      shift, and go to state 76
    NOT           shift, and go to state 77
    OPEN          shift, and go to state 78

    location      go to state 79
    method_call   go to state 81
    expr          go to state 99
    literal       go to state 83
    char_literal  go to state 84
    int_literal   go to state 85
    bool_literal  go to state 86


state 77

   66 expr: NOT . expr

    CALLOUT       shift, and go to state 53
    TRUE          shift, and go to state 73
    FALSE         shift, and go to state 74
    NUM           shift, and go to state 24
    HEX_LITERAL   shift, and go to state 25
    CHAR_LITERAL  shift, and go to state 75
    ID            shift, and go to state 59
    SUBTRACT      shift, and go to state 76
    NOT           shift, and go to state 77
    OPEN          shift, and go to state 78

    location      go to state 79
    method_call   go to state 81
    expr          go to state 100
    literal       go to state 83
    char_literal  go to state 84
    int_literal   go to state 85
    bool_literal  go to state 86


state 78

   67 expr: OPEN . expr CLOSE

    CALLOUT       shift, and go to state 53
    TRUE          shift, and go to state 73
    FALSE         shift, and go to state 74
    NUM           shift, and go to state 24
    HEX_LITERAL   shift, and go to state 25
    CHAR_LITERAL  shift, and go to state 75
    ID            shift, and go to state 59
    SUBTRACT      shift, and go to state 76
    NOT           shift, and go to state 77
    OPEN          shift, and go to state 78

    location      go to state 79
    method_call   go to state 81
    expr          go to state 101
    literal       go to state 83
    char_literal  go to state 84
    int_literal   go to state 85
    bool_literal  go to state 86


state 79

   61 expr: location .

    $default  reduce using rule 61 (expr)


state 80

   44 return_statement: RETURN return_value . SEMI_COLON

    SEMI_COLON  shift, and go to state 102


state 81

   62 expr: method_call .

    $default  reduce using rule 62 (expr)


state 82

   46 return_value: expr .
   64 expr: expr . bin_op expr

    ADD              shift, and go to state 103
    SUBTRACT         shift, and go to state 104
    MULTIPLY         shift, and go to state 105
    DIVIDE           shift, and go to state 106
    EQUALITY         shift, and go to state 107
    NOT_EQUAL        shift, and go to state 108
    GREATER_EQUAL    shift, and go to state 109
    LESS_EQUAL       shift, and go to state 110
    GREATER          shift, and go to state 111
    LESS             shift, and go to state 112
    CONDITIONAL_AND  shift, and go to state 113
    CONDITIONAL_OR   shift, and go to state 114
    MODULO           shift, and go to state 115

    $default  reduce using rule 46 (return_value)

    bin_op    go to state 116
    arith_op  go to state 117
    rel_op    go to state 118
    eq_op     go to state 119
    cond_op   go to state 120


state 83

   63 expr: literal .

    $default  reduce using rule 63 (expr)


state 84

   88 literal: char_literal .

    $default  reduce using rule 88 (literal)


state 85

   90 literal: int_literal .

    $default  reduce using rule 90 (literal)


state 86

   89 literal: bool_literal .

    $default  reduce using rule 89 (literal)


state 87

   43 for_statement: FOR ID . EQUAL expr COMMA expr code_block

    EQUAL  shift, and go to state 121


state 88

   40 if_statement: IF OPEN . expr CLOSE code_block else_statement

    CALLOUT       shift, and go to state 53
    TRUE          shift, and go to state 73
    FALSE         shift, and go to state 74
    NUM           shift, and go to state 24
    HEX_LITERAL   shift, and go to state 25
    CHAR_LITERAL  shift, and go to state 75
    ID            shift, and go to state 59
    SUBTRACT      shift, and go to state 76
    NOT           shift, and go to state 77
    OPEN          shift, and go to state 78

    location      go to state 79
    method_call   go to state 81
    expr          go to state 122
    literal       go to state 83
    char_literal  go to state 84
    int_literal   go to state 85
    bool_literal  go to state 86


state 89

   38 location: ID SQUARE_OPEN . expr SQUARE_CLOSE

    CALLOUT       shift, and go to state 53
    TRUE          shift, and go to state 73
    FALSE         shift, and go to state 74
    NUM           shift, and go to state 24
    HEX_LITERAL   shift, and go to state 25
    CHAR_LITERAL  shift, and go to state 75
    ID            shift, and go to state 59
    SUBTRACT      shift, and go to state 76
    NOT           shift, and go to state 77
    OPEN          shift, and go to state 78

    location      go to state 79
    method_call   go to state 81
    expr          go to state 123
    literal       go to state 83
    char_literal  go to state 84
    int_literal   go to state 85
    bool_literal  go to state 86


state 90

   49 method_call: ID OPEN . method_call_args CLOSE

    CALLOUT       shift, and go to state 53
    TRUE          shift, and go to state 73
    FALSE         shift, and go to state 74
    NUM           shift, and go to state 24
    HEX_LITERAL   shift, and go to state 25
    CHAR_LITERAL  shift, and go to state 75
    ID            shift, and go to state 59
    SUBTRACT      shift, and go to state 76
    NOT           shift, and go to state 77
    OPEN          shift, and go to state 78

    $default  reduce using rule 52 (method_call_args)

    location                    go to state 79
    method_call                 go to state 81
    method_call_args            go to state 124
    non_empty_method_call_args  go to state 125
    method_call_arg             go to state 126
    expr                        go to state 127
    literal                     go to state 83
    char_literal                go to state 84
    int_literal                 go to state 85
    bool_literal                go to state 86


state 91

   68 assign_op: EQUAL .

    $default  reduce using rule 68 (assign_op)


state 92

   69 assign_op: PLUS_EQUAL .

    $default  reduce using rule 69 (assign_op)


state 93

   70 assign_op: MINUS_EQUAL .

    $default  reduce using rule 70 (assign_op)


state 94

   36 assign_statement: location assign_op . expr SEMI_COLON

    CALLOUT       shift, and go to state 53
    TRUE          shift, and go to state 73
    FALSE         shift, and go to state 74
    NUM           shift, and go to state 24
    HEX_LITERAL   shift, and go to state 25
    CHAR_LITERAL  shift, and go to state 75
    ID            shift, and go to state 59
    SUBTRACT      shift, and go to state 76
    NOT           shift, and go to state 77
    OPEN          shift, and go to state 78

    location      go to state 79
    method_call   go to state 81
    expr          go to state 128
    literal       go to state 83
    char_literal  go to state 84
    int_literal   go to state 85
    bool_literal  go to state 86


state 95

   39 method_call_statment: method_call SEMI_COLON .

    $default  reduce using rule 39 (method_call_statment)


state 96

   27 var_names: var_names COMMA ID .

    $default  reduce using rule 27 (var_names)


state 97

   96 string_literal: STRING .

    $default  reduce using rule 96 (string_literal)


state 98

   50 method_call: CALLOUT OPEN string_literal . CLOSE
   51            | CALLOUT OPEN string_literal . COMMA non_empty_callout_args CLOSE

    CLOSE  shift, and go to state 129
    COMMA  shift, and go to state 130


state 99

   64 expr: expr . bin_op expr
   65     | SUBTRACT expr .

    ADD              shift, and go to state 103
    SUBTRACT         shift, and go to state 104
    MULTIPLY         shift, and go to state 105
    DIVIDE           shift, and go to state 106
    EQUALITY         shift, and go to state 107
    NOT_EQUAL        shift, and go to state 108
    GREATER_EQUAL    shift, and go to state 109
    LESS_EQUAL       shift, and go to state 110
    GREATER          shift, and go to state 111
    LESS             shift, and go to state 112
    CONDITIONAL_AND  shift, and go to state 113
    CONDITIONAL_OR   shift, and go to state 114
    MODULO           shift, and go to state 115

    ADD              [reduce using rule 65 (expr)]
    SUBTRACT         [reduce using rule 65 (expr)]
    MULTIPLY         [reduce using rule 65 (expr)]
    DIVIDE           [reduce using rule 65 (expr)]
    EQUALITY         [reduce using rule 65 (expr)]
    NOT_EQUAL        [reduce using rule 65 (expr)]
    GREATER_EQUAL    [reduce using rule 65 (expr)]
    LESS_EQUAL       [reduce using rule 65 (expr)]
    GREATER          [reduce using rule 65 (expr)]
    LESS             [reduce using rule 65 (expr)]
    CONDITIONAL_AND  [reduce using rule 65 (expr)]
    CONDITIONAL_OR   [reduce using rule 65 (expr)]
    MODULO           [reduce using rule 65 (expr)]
    $default         reduce using rule 65 (expr)

    bin_op    go to state 116
    arith_op  go to state 117
    rel_op    go to state 118
    eq_op     go to state 119
    cond_op   go to state 120


state 100

   64 expr: expr . bin_op expr
   66     | NOT expr .

    ADD              shift, and go to state 103
    SUBTRACT         shift, and go to state 104
    MULTIPLY         shift, and go to state 105
    DIVIDE           shift, and go to state 106
    EQUALITY         shift, and go to state 107
    NOT_EQUAL        shift, and go to state 108
    GREATER_EQUAL    shift, and go to state 109
    LESS_EQUAL       shift, and go to state 110
    GREATER          shift, and go to state 111
    LESS             shift, and go to state 112
    CONDITIONAL_AND  shift, and go to state 113
    CONDITIONAL_OR   shift, and go to state 114
    MODULO           shift, and go to state 115

    ADD              [reduce using rule 66 (expr)]
    SUBTRACT         [reduce using rule 66 (expr)]
    MULTIPLY         [reduce using rule 66 (expr)]
    DIVIDE           [reduce using rule 66 (expr)]
    EQUALITY         [reduce using rule 66 (expr)]
    NOT_EQUAL        [reduce using rule 66 (expr)]
    GREATER_EQUAL    [reduce using rule 66 (expr)]
    LESS_EQUAL       [reduce using rule 66 (expr)]
    GREATER          [reduce using rule 66 (expr)]
    LESS             [reduce using rule 66 (expr)]
    CONDITIONAL_AND  [reduce using rule 66 (expr)]
    CONDITIONAL_OR   [reduce using rule 66 (expr)]
    MODULO           [reduce using rule 66 (expr)]
    $default         reduce using rule 66 (expr)

    bin_op    go to state 116
    arith_op  go to state 117
    rel_op    go to state 118
    eq_op     go to state 119
    cond_op   go to state 120


state 101

   64 expr: expr . bin_op expr
   67     | OPEN expr . CLOSE

    ADD              shift, and go to state 103
    SUBTRACT         shift, and go to state 104
    MULTIPLY         shift, and go to state 105
    DIVIDE           shift, and go to state 106
    EQUALITY         shift, and go to state 107
    NOT_EQUAL        shift, and go to state 108
    GREATER_EQUAL    shift, and go to state 109
    LESS_EQUAL       shift, and go to state 110
    GREATER          shift, and go to state 111
    LESS             shift, and go to state 112
    CONDITIONAL_AND  shift, and go to state 113
    CONDITIONAL_OR   shift, and go to state 114
    MODULO           shift, and go to state 115
    CLOSE            shift, and go to state 131

    bin_op    go to state 116
    arith_op  go to state 117
    rel_op    go to state 118
    eq_op     go to state 119
    cond_op   go to state 120


state 102

   44 return_statement: RETURN return_value SEMI_COLON .

    $default  reduce using rule 44 (return_statement)


state 103

   75 arith_op: ADD .

    $default  reduce using rule 75 (arith_op)


state 104

   76 arith_op: SUBTRACT .

    $default  reduce using rule 76 (arith_op)


state 105

   77 arith_op: MULTIPLY .

    $default  reduce using rule 77 (arith_op)


state 106

   78 arith_op: DIVIDE .

    $default  reduce using rule 78 (arith_op)


state 107

   84 eq_op: EQUALITY .

    $default  reduce using rule 84 (eq_op)


state 108

   85 eq_op: NOT_EQUAL .

    $default  reduce using rule 85 (eq_op)


state 109

   82 rel_op: GREATER_EQUAL .

    $default  reduce using rule 82 (rel_op)


state 110

   83 rel_op: LESS_EQUAL .

    $default  reduce using rule 83 (rel_op)


state 111

   80 rel_op: GREATER .

    $default  reduce using rule 80 (rel_op)


state 112

   81 rel_op: LESS .

    $default  reduce using rule 81 (rel_op)


state 113

   86 cond_op: CONDITIONAL_AND .

    $default  reduce using rule 86 (cond_op)


state 114

   87 cond_op: CONDITIONAL_OR .

    $default  reduce using rule 87 (cond_op)


state 115

   79 arith_op: MODULO .

    $default  reduce using rule 79 (arith_op)


state 116

   64 expr: expr bin_op . expr

    CALLOUT       shift, and go to state 53
    TRUE          shift, and go to state 73
    FALSE         shift, and go to state 74
    NUM           shift, and go to state 24
    HEX_LITERAL   shift, and go to state 25
    CHAR_LITERAL  shift, and go to state 75
    ID            shift, and go to state 59
    SUBTRACT      shift, and go to state 76
    NOT           shift, and go to state 77
    OPEN          shift, and go to state 78

    location      go to state 79
    method_call   go to state 81
    expr          go to state 132
    literal       go to state 83
    char_literal  go to state 84
    int_literal   go to state 85
    bool_literal  go to state 86


state 117

   71 bin_op: arith_op .

    $default  reduce using rule 71 (bin_op)


state 118

   72 bin_op: rel_op .

    $default  reduce using rule 72 (bin_op)


state 119

   73 bin_op: eq_op .

    $default  reduce using rule 73 (bin_op)


state 120

   74 bin_op: cond_op .

    $default  reduce using rule 74 (bin_op)


state 121

   43 for_statement: FOR ID EQUAL . expr COMMA expr code_block

    CALLOUT       shift, and go to state 53
    TRUE          shift, and go to state 73
    FALSE         shift, and go to state 74
    NUM           shift, and go to state 24
    HEX_LITERAL   shift, and go to state 25
    CHAR_LITERAL  shift, and go to state 75
    ID            shift, and go to state 59
    SUBTRACT      shift, and go to state 76
    NOT           shift, and go to state 77
    OPEN          shift, and go to state 78

    location      go to state 79
    method_call   go to state 81
    expr          go to state 133
    literal       go to state 83
    char_literal  go to state 84
    int_literal   go to state 85
    bool_literal  go to state 86


state 122

   40 if_statement: IF OPEN expr . CLOSE code_block else_statement
   64 expr: expr . bin_op expr

    ADD              shift, and go to state 103
    SUBTRACT         shift, and go to state 104
    MULTIPLY         shift, and go to state 105
    DIVIDE           shift, and go to state 106
    EQUALITY         shift, and go to state 107
    NOT_EQUAL        shift, and go to state 108
    GREATER_EQUAL    shift, and go to state 109
    LESS_EQUAL       shift, and go to state 110
    GREATER          shift, and go to state 111
    LESS             shift, and go to state 112
    CONDITIONAL_AND  shift, and go to state 113
    CONDITIONAL_OR   shift, and go to state 114
    MODULO           shift, and go to state 115
    CLOSE            shift, and go to state 134

    bin_op    go to state 116
    arith_op  go to state 117
    rel_op    go to state 118
    eq_op     go to state 119
    cond_op   go to state 120


state 123

   38 location: ID SQUARE_OPEN expr . SQUARE_CLOSE
   64 expr: expr . bin_op expr

    ADD              shift, and go to state 103
    SUBTRACT         shift, and go to state 104
    MULTIPLY         shift, and go to state 105
    DIVIDE           shift, and go to state 106
    EQUALITY         shift, and go to state 107
    NOT_EQUAL        shift, and go to state 108
    GREATER_EQUAL    shift, and go to state 109
    LESS_EQUAL       shift, and go to state 110
    GREATER          shift, and go to state 111
    LESS             shift, and go to state 112
    CONDITIONAL_AND  shift, and go to state 113
    CONDITIONAL_OR   shift, and go to state 114
    MODULO           shift, and go to state 115
    SQUARE_CLOSE     shift, and go to state 135

    bin_op    go to state 116
    arith_op  go to state 117
    rel_op    go to state 118
    eq_op     go to state 119
    cond_op   go to state 120


state 124

   49 method_call: ID OPEN method_call_args . CLOSE

    CLOSE  shift, and go to state 136


state 125

   53 method_call_args: non_empty_method_call_args .
   55 non_empty_method_call_args: non_empty_method_call_args . COMMA method_call_arg

    COMMA  shift, and go to state 137

    $default  reduce using rule 53 (method_call_args)


state 126

   54 non_empty_method_call_args: method_call_arg .

    $default  reduce using rule 54 (non_empty_method_call_args)


state 127

   56 method_call_arg: expr .
   64 expr: expr . bin_op expr

    ADD              shift, and go to state 103
    SUBTRACT         shift, and go to state 104
    MULTIPLY         shift, and go to state 105
    DIVIDE           shift, and go to state 106
    EQUALITY         shift, and go to state 107
    NOT_EQUAL        shift, and go to state 108
    GREATER_EQUAL    shift, and go to state 109
    LESS_EQUAL       shift, and go to state 110
    GREATER          shift, and go to state 111
    LESS             shift, and go to state 112
    CONDITIONAL_AND  shift, and go to state 113
    CONDITIONAL_OR   shift, and go to state 114
    MODULO           shift, and go to state 115

    $default  reduce using rule 56 (method_call_arg)

    bin_op    go to state 116
    arith_op  go to state 117
    rel_op    go to state 118
    eq_op     go to state 119
    cond_op   go to state 120


state 128

   36 assign_statement: location assign_op expr . SEMI_COLON
   64 expr: expr . bin_op expr

    ADD              shift, and go to state 103
    SUBTRACT         shift, and go to state 104
    MULTIPLY         shift, and go to state 105
    DIVIDE           shift, and go to state 106
    EQUALITY         shift, and go to state 107
    NOT_EQUAL        shift, and go to state 108
    GREATER_EQUAL    shift, and go to state 109
    LESS_EQUAL       shift, and go to state 110
    GREATER          shift, and go to state 111
    LESS             shift, and go to state 112
    CONDITIONAL_AND  shift, and go to state 113
    CONDITIONAL_OR   shift, and go to state 114
    MODULO           shift, and go to state 115
    SEMI_COLON       shift, and go to state 138

    bin_op    go to state 116
    arith_op  go to state 117
    rel_op    go to state 118
    eq_op     go to state 119
    cond_op   go to state 120


state 129

   50 method_call: CALLOUT OPEN string_literal CLOSE .

    $default  reduce using rule 50 (method_call)


state 130

   51 method_call: CALLOUT OPEN string_literal COMMA . non_empty_callout_args CLOSE

    CALLOUT       shift, and go to state 53
    TRUE          shift, and go to state 73
    FALSE         shift, and go to state 74
    NUM           shift, and go to state 24
    HEX_LITERAL   shift, and go to state 25
    CHAR_LITERAL  shift, and go to state 75
    STRING        shift, and go to state 97
    ID            shift, and go to state 59
    SUBTRACT      shift, and go to state 76
    NOT           shift, and go to state 77
    OPEN          shift, and go to state 78

    location                go to state 79
    method_call             go to state 81
    non_empty_callout_args  go to state 139
    callout_arg             go to state 140
    expr                    go to state 141
    literal                 go to state 83
    char_literal            go to state 84
    int_literal             go to state 85
    bool_literal            go to state 86
    string_literal          go to state 142


state 131

   67 expr: OPEN expr CLOSE .

    $default  reduce using rule 67 (expr)


state 132

   64 expr: expr . bin_op expr
   64     | expr bin_op expr .

    ADD              shift, and go to state 103
    SUBTRACT         shift, and go to state 104
    MULTIPLY         shift, and go to state 105
    DIVIDE           shift, and go to state 106
    EQUALITY         shift, and go to state 107
    NOT_EQUAL        shift, and go to state 108
    GREATER_EQUAL    shift, and go to state 109
    LESS_EQUAL       shift, and go to state 110
    GREATER          shift, and go to state 111
    LESS             shift, and go to state 112
    CONDITIONAL_AND  shift, and go to state 113
    CONDITIONAL_OR   shift, and go to state 114
    MODULO           shift, and go to state 115

    ADD              [reduce using rule 64 (expr)]
    SUBTRACT         [reduce using rule 64 (expr)]
    MULTIPLY         [reduce using rule 64 (expr)]
    DIVIDE           [reduce using rule 64 (expr)]
    EQUALITY         [reduce using rule 64 (expr)]
    NOT_EQUAL        [reduce using rule 64 (expr)]
    GREATER_EQUAL    [reduce using rule 64 (expr)]
    LESS_EQUAL       [reduce using rule 64 (expr)]
    GREATER          [reduce using rule 64 (expr)]
    LESS             [reduce using rule 64 (expr)]
    CONDITIONAL_AND  [reduce using rule 64 (expr)]
    CONDITIONAL_OR   [reduce using rule 64 (expr)]
    MODULO           [reduce using rule 64 (expr)]
    $default         reduce using rule 64 (expr)

    bin_op    go to state 116
    arith_op  go to state 117
    rel_op    go to state 118
    eq_op     go to state 119
    cond_op   go to state 120


state 133

   43 for_statement: FOR ID EQUAL expr . COMMA expr code_block
   64 expr: expr . bin_op expr

    ADD              shift, and go to state 103
    SUBTRACT         shift, and go to state 104
    MULTIPLY         shift, and go to state 105
    DIVIDE           shift, and go to state 106
    EQUALITY         shift, and go to state 107
    NOT_EQUAL        shift, and go to state 108
    GREATER_EQUAL    shift, and go to state 109
    LESS_EQUAL       shift, and go to state 110
    GREATER          shift, and go to state 111
    LESS             shift, and go to state 112
    CONDITIONAL_AND  shift, and go to state 113
    CONDITIONAL_OR   shift, and go to state 114
    MODULO           shift, and go to state 115
    COMMA            shift, and go to state 143

    bin_op    go to state 116
    arith_op  go to state 117
    rel_op    go to state 118
    eq_op     go to state 119
    cond_op   go to state 120


state 134

   40 if_statement: IF OPEN expr CLOSE . code_block else_statement

    CURLY_OPEN  shift, and go to state 40

    code_block  go to state 144


state 135

   38 location: ID SQUARE_OPEN expr SQUARE_CLOSE .

    $default  reduce using rule 38 (location)


state 136

   49 method_call: ID OPEN method_call_args CLOSE .

    $default  reduce using rule 49 (method_call)


state 137

   55 non_empty_method_call_args: non_empty_method_call_args COMMA . method_call_arg

    CALLOUT       shift, and go to state 53
    TRUE          shift, and go to state 73
    FALSE         shift, and go to state 74
    NUM           shift, and go to state 24
    HEX_LITERAL   shift, and go to state 25
    CHAR_LITERAL  shift, and go to state 75
    ID            shift, and go to state 59
    SUBTRACT      shift, and go to state 76
    NOT           shift, and go to state 77
    OPEN          shift, and go to state 78

    location         go to state 79
    method_call      go to state 81
    method_call_arg  go to state 145
    expr             go to state 127
    literal          go to state 83
    char_literal     go to state 84
    int_literal      go to state 85
    bool_literal     go to state 86


state 138

   36 assign_statement: location assign_op expr SEMI_COLON .

    $default  reduce using rule 36 (assign_statement)


state 139

   51 method_call: CALLOUT OPEN string_literal COMMA non_empty_callout_args . CLOSE
   58 non_empty_callout_args: non_empty_callout_args . COMMA callout_arg

    CLOSE  shift, and go to state 146
    COMMA  shift, and go to state 147


state 140

   57 non_empty_callout_args: callout_arg .

    $default  reduce using rule 57 (non_empty_callout_args)


state 141

   59 callout_arg: expr .
   64 expr: expr . bin_op expr

    ADD              shift, and go to state 103
    SUBTRACT         shift, and go to state 104
    MULTIPLY         shift, and go to state 105
    DIVIDE           shift, and go to state 106
    EQUALITY         shift, and go to state 107
    NOT_EQUAL        shift, and go to state 108
    GREATER_EQUAL    shift, and go to state 109
    LESS_EQUAL       shift, and go to state 110
    GREATER          shift, and go to state 111
    LESS             shift, and go to state 112
    CONDITIONAL_AND  shift, and go to state 113
    CONDITIONAL_OR   shift, and go to state 114
    MODULO           shift, and go to state 115

    $default  reduce using rule 59 (callout_arg)

    bin_op    go to state 116
    arith_op  go to state 117
    rel_op    go to state 118
    eq_op     go to state 119
    cond_op   go to state 120


state 142

   60 callout_arg: string_literal .

    $default  reduce using rule 60 (callout_arg)


state 143

   43 for_statement: FOR ID EQUAL expr COMMA . expr code_block

    CALLOUT       shift, and go to state 53
    TRUE          shift, and go to state 73
    FALSE         shift, and go to state 74
    NUM           shift, and go to state 24
    HEX_LITERAL   shift, and go to state 25
    CHAR_LITERAL  shift, and go to state 75
    ID            shift, and go to state 59
    SUBTRACT      shift, and go to state 76
    NOT           shift, and go to state 77
    OPEN          shift, and go to state 78

    location      go to state 79
    method_call   go to state 81
    expr          go to state 148
    literal       go to state 83
    char_literal  go to state 84
    int_literal   go to state 85
    bool_literal  go to state 86


state 144

   40 if_statement: IF OPEN expr CLOSE code_block . else_statement

    ELSE  shift, and go to state 149

    $default  reduce using rule 41 (else_statement)

    else_statement  go to state 150


state 145

   55 non_empty_method_call_args: non_empty_method_call_args COMMA method_call_arg .

    $default  reduce using rule 55 (non_empty_method_call_args)


state 146

   51 method_call: CALLOUT OPEN string_literal COMMA non_empty_callout_args CLOSE .

    $default  reduce using rule 51 (method_call)


state 147

   58 non_empty_callout_args: non_empty_callout_args COMMA . callout_arg

    CALLOUT       shift, and go to state 53
    TRUE          shift, and go to state 73
    FALSE         shift, and go to state 74
    NUM           shift, and go to state 24
    HEX_LITERAL   shift, and go to state 25
    CHAR_LITERAL  shift, and go to state 75
    STRING        shift, and go to state 97
    ID            shift, and go to state 59
    SUBTRACT      shift, and go to state 76
    NOT           shift, and go to state 77
    OPEN          shift, and go to state 78

    location        go to state 79
    method_call     go to state 81
    callout_arg     go to state 151
    expr            go to state 141
    literal         go to state 83
    char_literal    go to state 84
    int_literal     go to state 85
    bool_literal    go to state 86
    string_literal  go to state 142


state 148

   43 for_statement: FOR ID EQUAL expr COMMA expr . code_block
   64 expr: expr . bin_op expr

    ADD              shift, and go to state 103
    SUBTRACT         shift, and go to state 104
    MULTIPLY         shift, and go to state 105
    DIVIDE           shift, and go to state 106
    EQUALITY         shift, and go to state 107
    NOT_EQUAL        shift, and go to state 108
    GREATER_EQUAL    shift, and go to state 109
    LESS_EQUAL       shift, and go to state 110
    GREATER          shift, and go to state 111
    LESS             shift, and go to state 112
    CONDITIONAL_AND  shift, and go to state 113
    CONDITIONAL_OR   shift, and go to state 114
    MODULO           shift, and go to state 115
    CURLY_OPEN       shift, and go to state 40

    code_block  go to state 152
    bin_op      go to state 116
    arith_op    go to state 117
    rel_op      go to state 118
    eq_op       go to state 119
    cond_op     go to state 120


state 149

   42 else_statement: ELSE . code_block

    CURLY_OPEN  shift, and go to state 40

    code_block  go to state 153


state 150

   40 if_statement: IF OPEN expr CLOSE code_block else_statement .

    $default  reduce using rule 40 (if_statement)


state 151

   58 non_empty_callout_args: non_empty_callout_args COMMA callout_arg .

    $default  reduce using rule 58 (non_empty_callout_args)


state 152

   43 for_statement: FOR ID EQUAL expr COMMA expr code_block .

    $default  reduce using rule 43 (for_statement)


state 153

   42 else_statement: ELSE code_block .

    $default  reduce using rule 42 (else_statement)
