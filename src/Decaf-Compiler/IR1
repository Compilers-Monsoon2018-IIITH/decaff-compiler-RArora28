; ModuleID = 'Compiler for flatB language'

@n = global i32 0
@sum = global i32 0
@0 = private unnamed_addr constant [5 x i8] c"%d\5Cn\00"

declare i32 @printf(i8*, ...)

define i32 @method(i32 %x) {
entry:
  %x1 = alloca i32
  store i32 %x, i32* %x1
  %0 = load i32, i32* %x1
  %1 = call i32 bitcast (i32 (i8*, ...)* @printf to i32 (i8*, i32)*)(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @0, i32 0, i32 0), i32 %0)
  %2 = load i32, i32* %x1
  ret i32 %2
}

define void @main() {
entry:
  %i1 = alloca i32
  %i = alloca i32
  store i32 0, i32* %i
  %0 = load i32, i32* @n
  store i32 5, i32* @n
  %1 = load i32, i32* @sum
  store i32 0, i32* @sum
  store i32 0, i32* %i1
  br label %loop

loop:                                             ; preds = %ifcont, %entry
  %i2 = phi i32 [ 0, %entry ], [ %NextVal, %ifcont ]
  %2 = load i32, i32* %i1
  %gtcomparetmp = icmp ugt i32 %2, 2
  br i1 %gtcomparetmp, label %if, label %else

if:                                               ; preds = %loop
  %3 = load i32, i32* %i1
  %4 = call i32 @method(i32 %3)
  br label %ifcont

else:                                             ; preds = %loop
  br label %ifcont

ifcont:                                           ; preds = %else, %if
  %i3 = load i32, i32* %i1
  %NextVal = add i32 %i3, 1
  store i32 %NextVal, i32* %i1
  %5 = load i32, i32* @n
  %loopcondition = icmp ule i32 %NextVal, %5
  br i1 %loopcondition, label %loop, label %afterloop

afterloop:                                        ; preds = %ifcont
  ret void
}